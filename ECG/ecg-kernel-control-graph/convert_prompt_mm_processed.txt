
————————————————————————————————These prompts belong to Node: 【capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: capable in the linux kenrel source code.
## The capable function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: capable.

————————————————————————————————These prompts belong to Node: 【gfpflags_allow_blocking】at below.—————————————————————————————————— 
# Now I have a kernel internal function gfpflags_allow_blocking, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: gfpflags_allow_blocking in the linux kenrel source code.
## The gfpflags_allow_blocking function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes gfpflags_allow_blocking.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: gfpflags_allow_blocking.

————————————————————————————————These prompts belong to Node: 【down_write_killable】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_write_killable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_write_killable in the linux kenrel source code.
## The down_write_killable function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes mmap_write_lock_killable.
5. function mmap_write_lock_killable invokes down_write_killable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_write_killable.

————————————————————————————————These prompts belong to Node: 【memcmp】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcmp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcmp in the linux kenrel source code.
## The memcmp function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes mpol_rebind_policy.
6. function mpol_rebind_policy invokes __nodes_equal.
7. function __nodes_equal invokes bitmap_equal.
8. function bitmap_equal invokes memcmp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcmp.

————————————————————————————————These prompts belong to Node: 【zonelist_zone_idx】at below.—————————————————————————————————— 
# Now I have a kernel internal function zonelist_zone_idx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zonelist_zone_idx in the linux kenrel source code.
## The zonelist_zone_idx function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes mempolicy_slab_node.
11. function mempolicy_slab_node invokes first_zones_zonelist.
12. function first_zones_zonelist invokes __next_zones_zonelist.
13. function __next_zones_zonelist invokes zonelist_zone_idx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zonelist_zone_idx.

————————————————————————————————These prompts belong to Node: 【zone_to_nid】at below.—————————————————————————————————— 
# Now I have a kernel internal function zone_to_nid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zone_to_nid in the linux kenrel source code.
## The zone_to_nid function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes mempolicy_slab_node.
11. function mempolicy_slab_node invokes first_zones_zonelist.
12. function first_zones_zonelist invokes __next_zones_zonelist.
13. function __next_zones_zonelist invokes zref_in_nodemask.
14. function zref_in_nodemask invokes zonelist_node_idx.
15. function zonelist_node_idx invokes zone_to_nid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zone_to_nid.

————————————————————————————————These prompts belong to Node: 【downgrade_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function downgrade_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: downgrade_write in the linux kenrel source code.
## The downgrade_write function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes mmap_write_downgrade.
6. function mmap_write_downgrade invokes downgrade_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: downgrade_write.

————————————————————————————————These prompts belong to Node: 【mas_walk】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_walk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_walk in the linux kenrel source code.
## The mas_walk function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_iter_load.
8. function vma_iter_load invokes mas_walk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_walk.

————————————————————————————————These prompts belong to Node: 【__access_ok】at below.—————————————————————————————————— 
# Now I have a kernel internal function __access_ok, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __access_ok in the linux kenrel source code.
## The __access_ok function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes __access_ok.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __access_ok.

————————————————————————————————These prompts belong to Node: 【check_object_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_object_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_object_size in the linux kenrel source code.
## The check_object_size function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes check_object_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_object_size.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_released】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_released, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_released in the linux kenrel source code.
## The __mmap_lock_trace_released function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes mmap_read_unlock.
4. function mmap_read_unlock invokes __mmap_lock_trace_released.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_released.

————————————————————————————————These prompts belong to Node: 【sb_is_blkdev_sb】at below.—————————————————————————————————— 
# Now I have a kernel internal function sb_is_blkdev_sb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sb_is_blkdev_sb in the linux kenrel source code.
## The sb_is_blkdev_sb function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes writable_file_mapping_allowed.
9. function writable_file_mapping_allowed invokes vma_needs_dirty_tracking.
10. function vma_needs_dirty_tracking invokes vma_fs_can_writeback.
11. function vma_fs_can_writeback invokes mapping_can_writeback.
12. function mapping_can_writeback invokes inode_to_bdi.
13. function inode_to_bdi invokes sb_is_blkdev_sb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sb_is_blkdev_sb.

————————————————————————————————These prompts belong to Node: 【I_BDEV】at below.—————————————————————————————————— 
# Now I have a kernel internal function I_BDEV, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: I_BDEV in the linux kenrel source code.
## The I_BDEV function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes writable_file_mapping_allowed.
9. function writable_file_mapping_allowed invokes vma_needs_dirty_tracking.
10. function vma_needs_dirty_tracking invokes vma_fs_can_writeback.
11. function vma_fs_can_writeback invokes mapping_can_writeback.
12. function mapping_can_writeback invokes inode_to_bdi.
13. function inode_to_bdi invokes I_BDEV.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: I_BDEV.

————————————————————————————————These prompts belong to Node: 【_raw_spin_trylock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_trylock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_trylock in the linux kenrel source code.
## The _raw_spin_trylock function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes _raw_spin_trylock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_trylock.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irqsave】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irqsave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irqsave in the linux kenrel source code.
## The _raw_spin_lock_irqsave function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes _raw_spin_lock_irqsave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irqsave.

————————————————————————————————These prompts belong to Node: 【__wake_up_locked_key】at below.—————————————————————————————————— 
# Now I have a kernel internal function __wake_up_locked_key, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __wake_up_locked_key in the linux kenrel source code.
## The __wake_up_locked_key function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_unlock.
8. function folio_unlock invokes folio_wake_bit.
9. function folio_wake_bit invokes __wake_up_locked_key.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __wake_up_locked_key.

————————————————————————————————These prompts belong to Node: 【folio_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_flags in the linux kenrel source code.
## The folio_flags function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes folio_nr_pages.
5. function folio_nr_pages invokes folio_test_large.
6. function folio_test_large invokes folio_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_flags.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irqrestore】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irqrestore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irqrestore in the linux kenrel source code.
## The _raw_spin_unlock_irqrestore function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes _raw_spin_unlock_irqrestore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irqrestore.

————————————————————————————————These prompts belong to Node: 【list_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_empty in the linux kenrel source code.
## The list_empty function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_unlock.
8. function folio_unlock invokes folio_wake_bit.
9. function folio_wake_bit invokes waitqueue_active.
10. function waitqueue_active invokes list_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_empty.

————————————————————————————————These prompts belong to Node: 【hash_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function hash_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hash_ptr in the linux kenrel source code.
## The hash_ptr function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes folio_waitqueue.
11. function folio_waitqueue invokes hash_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hash_ptr.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock in the linux kenrel source code.
## The _raw_spin_unlock function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes _raw_spin_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock.

————————————————————————————————These prompts belong to Node: 【__rcu_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_unlock in the linux kenrel source code.
## The __rcu_read_unlock function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes pte_unmap.
12. function pte_unmap invokes rcu_read_unlock.
13. function rcu_read_unlock invokes __rcu_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_unlock.

————————————————————————————————These prompts belong to Node: 【psi_memstall_enter】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_memstall_enter, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_memstall_enter in the linux kenrel source code.
## The psi_memstall_enter function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes psi_memstall_enter.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_memstall_enter.

————————————————————————————————These prompts belong to Node: 【INIT_LIST_HEAD】at below.—————————————————————————————————— 
# Now I have a kernel internal function INIT_LIST_HEAD, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: INIT_LIST_HEAD in the linux kenrel source code.
## The INIT_LIST_HEAD function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes INIT_LIST_HEAD.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: INIT_LIST_HEAD.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irq in the linux kenrel source code.
## The _raw_spin_lock_irq function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes folio_lruvec_relock_irq.
11. function folio_lruvec_relock_irq invokes folio_lruvec_lock_irq.
12. function folio_lruvec_lock_irq invokes _raw_spin_lock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irq.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irq in the linux kenrel source code.
## The _raw_spin_unlock_irq function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes folio_lruvec_relock_irq.
11. function folio_lruvec_relock_irq invokes unlock_page_lruvec_irq.
12. function unlock_page_lruvec_irq invokes _raw_spin_unlock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irq.

————————————————————————————————These prompts belong to Node: 【io_schedule】at below.—————————————————————————————————— 
# Now I have a kernel internal function io_schedule, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: io_schedule in the linux kenrel source code.
## The io_schedule function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes io_schedule.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: io_schedule.

————————————————————————————————These prompts belong to Node: 【finish_wait】at below.—————————————————————————————————— 
# Now I have a kernel internal function finish_wait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: finish_wait in the linux kenrel source code.
## The finish_wait function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes finish_wait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: finish_wait.

————————————————————————————————These prompts belong to Node: 【psi_memstall_leave】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_memstall_leave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_memstall_leave in the linux kenrel source code.
## The psi_memstall_leave function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes psi_memstall_leave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_memstall_leave.

————————————————————————————————These prompts belong to Node: 【__delayacct_thrashing_end】at below.—————————————————————————————————— 
# Now I have a kernel internal function __delayacct_thrashing_end, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __delayacct_thrashing_end in the linux kenrel source code.
## The __delayacct_thrashing_end function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes delayacct_thrashing_end.
11. function delayacct_thrashing_end invokes __delayacct_thrashing_end.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __delayacct_thrashing_end.

————————————————————————————————These prompts belong to Node: 【sigismember】at below.—————————————————————————————————— 
# Now I have a kernel internal function sigismember, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sigismember in the linux kenrel source code.
## The sigismember function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes signal_pending_state.
11. function signal_pending_state invokes __fatal_signal_pending.
12. function __fatal_signal_pending invokes sigismember.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sigismember.

————————————————————————————————These prompts belong to Node: 【xa_is_internal】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_is_internal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_is_internal in the linux kenrel source code.
## The xa_is_internal function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_next_entry.
5. function xas_next_entry invokes xa_is_internal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_is_internal.

————————————————————————————————These prompts belong to Node: 【xa_mk_internal】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_mk_internal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_mk_internal in the linux kenrel source code.
## The xa_mk_internal function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_retry.
5. function xas_retry invokes xa_is_zero.
6. function xa_is_zero invokes xa_mk_internal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_mk_internal.

————————————————————————————————These prompts belong to Node: 【__list_add_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_add_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_add_valid in the linux kenrel source code.
## The __list_add_valid function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes __add_wait_queue_entry_tail.
11. function __add_wait_queue_entry_tail invokes list_add_tail.
12. function list_add_tail invokes __list_add.
13. function __list_add invokes __list_add_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_add_valid.

————————————————————————————————These prompts belong to Node: 【__delayacct_thrashing_start】at below.—————————————————————————————————— 
# Now I have a kernel internal function __delayacct_thrashing_start, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __delayacct_thrashing_start in the linux kenrel source code.
## The __delayacct_thrashing_start function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes unpin_user_pages_dirty_lock.
7. function unpin_user_pages_dirty_lock invokes folio_lock.
8. function folio_lock invokes __folio_lock.
9. function __folio_lock invokes folio_wait_bit_common.
10. function folio_wait_bit_common invokes delayacct_thrashing_start.
11. function delayacct_thrashing_start invokes __delayacct_thrashing_start.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __delayacct_thrashing_start.

————————————————————————————————These prompts belong to Node: 【__rcu_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_lock in the linux kenrel source code.
## The __rcu_read_lock function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes pte_offset_map.
12. function pte_offset_map invokes __pte_offset_map.
13. function __pte_offset_map invokes __rcu_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_lock.

————————————————————————————————These prompts belong to Node: 【xa_is_value】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_is_value, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_is_value in the linux kenrel source code.
## The xa_is_value function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xa_is_value.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_is_value.

————————————————————————————————These prompts belong to Node: 【xa_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_entry in the linux kenrel source code.
## The xa_entry function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_next_entry.
5. function xas_next_entry invokes xa_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_entry.

————————————————————————————————These prompts belong to Node: 【___ratelimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function ___ratelimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ___ratelimit in the linux kenrel source code.
## The ___ratelimit function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes slab_out_of_memory.
9. function slab_out_of_memory invokes ___ratelimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ___ratelimit.

————————————————————————————————These prompts belong to Node: 【xas_reset】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_reset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_reset in the linux kenrel source code.
## The xas_reset function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_retry.
5. function xas_retry invokes xas_reset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_reset.

————————————————————————————————These prompts belong to Node: 【xas_not_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_not_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_not_node in the linux kenrel source code.
## The xas_not_node function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_next_entry.
5. function xas_next_entry invokes xas_not_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_not_node.

————————————————————————————————These prompts belong to Node: 【xas_find】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_find, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_find in the linux kenrel source code.
## The xas_find function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_find.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_find.

————————————————————————————————These prompts belong to Node: 【fput】at below.—————————————————————————————————— 
# Now I have a kernel internal function fput, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fput in the linux kenrel source code.
## The fput function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes fdput.
4. function fdput invokes fput.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fput.

————————————————————————————————These prompts belong to Node: 【copy_page_to_iter】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_page_to_iter, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_page_to_iter in the linux kenrel source code.
## The copy_page_to_iter function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes process_vm_rw_pages.
7. function process_vm_rw_pages invokes copy_page_to_iter.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_page_to_iter.

————————————————————————————————These prompts belong to Node: 【up_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function up_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: up_read in the linux kenrel source code.
## The up_read function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes mmap_read_unlock.
4. function mmap_read_unlock invokes up_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: up_read.

————————————————————————————————These prompts belong to Node: 【shmem_mapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function shmem_mapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: shmem_mapping in the linux kenrel source code.
## The shmem_mapping function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes shmem_mapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: shmem_mapping.

————————————————————————————————These prompts belong to Node: 【xa_get_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_get_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_get_order in the linux kenrel source code.
## The xa_get_order function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xa_get_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_get_order.

————————————————————————————————These prompts belong to Node: 【xa_load】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_load, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_load in the linux kenrel source code.
## The xa_load function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes get_shadow_from_swap_cache.
5. function get_shadow_from_swap_cache invokes xa_load.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_load.

————————————————————————————————These prompts belong to Node: 【xas_find_conflict】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_find_conflict, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_find_conflict in the linux kenrel source code.
## The xas_find_conflict function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_add_to_page_cache.
9. function shmem_add_to_page_cache invokes xas_find_conflict.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_find_conflict.

————————————————————————————————These prompts belong to Node: 【xas_store】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_store, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_store in the linux kenrel source code.
## The xas_store function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes swap_range_free.
9. function swap_range_free invokes clear_shadow_from_swap_cache.
10. function clear_shadow_from_swap_cache invokes xas_store.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_store.

————————————————————————————————These prompts belong to Node: 【xas_nomem】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_nomem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_nomem in the linux kenrel source code.
## The xas_nomem function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_add_to_page_cache.
9. function shmem_add_to_page_cache invokes xas_nomem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_nomem.

————————————————————————————————These prompts belong to Node: 【add_taint】at below.—————————————————————————————————— 
# Now I have a kernel internal function add_taint, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: add_taint in the linux kenrel source code.
## The add_taint function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes free_tail_page_prepare.
9. function free_tail_page_prepare invokes bad_page.
10. function bad_page invokes add_taint.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: add_taint.

————————————————————————————————These prompts belong to Node: 【_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function _printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _printk in the linux kenrel source code.
## The _printk function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes free_tail_page_prepare.
9. function free_tail_page_prepare invokes bad_page.
10. function bad_page invokes _printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _printk.

————————————————————————————————These prompts belong to Node: 【dump_stack】at below.—————————————————————————————————— 
# Now I have a kernel internal function dump_stack, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dump_stack in the linux kenrel source code.
## The dump_stack function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes free_tail_page_prepare.
9. function free_tail_page_prepare invokes bad_page.
10. function bad_page invokes dump_stack.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dump_stack.

————————————————————————————————These prompts belong to Node: 【xas_load】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_load, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_load in the linux kenrel source code.
## The xas_load function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_replace_folio.
9. function shmem_replace_folio invokes shmem_replace_entry.
10. function shmem_replace_entry invokes xas_load.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_load.

————————————————————————————————These prompts belong to Node: 【down_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_read in the linux kenrel source code.
## The down_read function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes mmap_read_lock.
4. function mmap_read_lock invokes down_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_read.

————————————————————————————————These prompts belong to Node: 【vfs_fsync_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function vfs_fsync_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vfs_fsync_range in the linux kenrel source code.
## The vfs_fsync_range function is called in the sys_msync system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_msync invokes __se_sys_msync.
2. function __se_sys_msync invokes __do_sys_msync.
3. function __do_sys_msync invokes vfs_fsync_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vfs_fsync_range.

————————————————————————————————These prompts belong to Node: 【up_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function up_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: up_write in the linux kenrel source code.
## The up_write function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes process_vma_walk_lock.
6. function process_vma_walk_lock invokes vma_start_write.
7. function vma_start_write invokes up_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: up_write.

————————————————————————————————These prompts belong to Node: 【check_element】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_element, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_element in the linux kenrel source code.
## The check_element function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes setup_swap_extents.
5. function setup_swap_extents invokes sio_pool_init.
6. function sio_pool_init invokes mempool_create_kmalloc_pool.
7. function mempool_create_kmalloc_pool invokes mempool_create.
8. function mempool_create invokes mempool_create_node.
9. function mempool_create_node invokes mempool_init_node.
10. function mempool_init_node invokes mempool_exit.
11. function mempool_exit invokes remove_element.
12. function remove_element invokes check_element.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_element.

————————————————————————————————These prompts belong to Node: 【__must_check_overflow】at below.—————————————————————————————————— 
# Now I have a kernel internal function __must_check_overflow, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __must_check_overflow in the linux kenrel source code.
## The __must_check_overflow function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes setup_swap_extents.
5. function setup_swap_extents invokes sio_pool_init.
6. function sio_pool_init invokes mempool_create_kmalloc_pool.
7. function mempool_create_kmalloc_pool invokes mempool_create.
8. function mempool_create invokes mempool_create_node.
9. function mempool_create_node invokes mempool_init_node.
10. function mempool_init_node invokes kmalloc_array_node.
11. function kmalloc_array_node invokes __must_check_overflow.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __must_check_overflow.

————————————————————————————————These prompts belong to Node: 【down_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_write in the linux kenrel source code.
## The down_write function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes process_vma_walk_lock.
6. function process_vma_walk_lock invokes vma_start_write.
7. function vma_start_write invokes down_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_write.

————————————————————————————————These prompts belong to Node: 【__xas_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function __xas_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __xas_next in the linux kenrel source code.
## The __xas_next function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_mapping.
14. function folio_migrate_mapping invokes xas_next.
15. function xas_next invokes __xas_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __xas_next.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock in the linux kenrel source code.
## The _raw_spin_lock function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes task_lock.
6. function task_lock invokes _raw_spin_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock.

————————————————————————————————These prompts belong to Node: 【percpu_counter_add_batch】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_counter_add_batch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_counter_add_batch in the linux kenrel source code.
## The percpu_counter_add_batch function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes vm_unacct_memory.
7. function vm_unacct_memory invokes vm_acct_memory.
8. function vm_acct_memory invokes percpu_counter_add_batch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_counter_add_batch.

————————————————————————————————These prompts belong to Node: 【__init_waitqueue_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_waitqueue_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_waitqueue_head in the linux kenrel source code.
## The __init_waitqueue_head function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes setup_swap_extents.
5. function setup_swap_extents invokes sio_pool_init.
6. function sio_pool_init invokes mempool_create_kmalloc_pool.
7. function mempool_create_kmalloc_pool invokes mempool_create.
8. function mempool_create invokes mempool_create_node.
9. function mempool_create_node invokes mempool_init_node.
10. function mempool_init_node invokes __init_waitqueue_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_waitqueue_head.

————————————————————————————————These prompts belong to Node: 【xas_pause】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_pause, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_pause in the linux kenrel source code.
## The xas_pause function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes xas_pause.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_pause.

————————————————————————————————These prompts belong to Node: 【__bad_copy_from】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_from, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_from in the linux kenrel source code.
## The __bad_copy_from function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes __bad_copy_from.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_from.

————————————————————————————————These prompts belong to Node: 【__bad_copy_to】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_to, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_to in the linux kenrel source code.
## The __bad_copy_to function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes __bad_copy_to.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_to.

————————————————————————————————These prompts belong to Node: 【_copy_from_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_from_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_from_user in the linux kenrel source code.
## The _copy_from_user function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes _copy_from_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_from_user.

————————————————————————————————These prompts belong to Node: 【_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_to_user in the linux kenrel source code.
## The _copy_to_user function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes _copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_to_user.

————————————————————————————————These prompts belong to Node: 【folio_pgoff】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_pgoff, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_pgoff in the linux kenrel source code.
## The folio_pgoff function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes folio_pgoff.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_pgoff.

————————————————————————————————These prompts belong to Node: 【cond_resched_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function cond_resched_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cond_resched_rcu in the linux kenrel source code.
## The cond_resched_rcu function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes cond_resched_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cond_resched_rcu.

————————————————————————————————These prompts belong to Node: 【xa_to_value】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_to_value, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_to_value in the linux kenrel source code.
## The xa_to_value function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes radix_to_swp_entry.
5. function radix_to_swp_entry invokes xa_to_value.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_to_value.

————————————————————————————————These prompts belong to Node: 【is_file_shm_hugepages】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_file_shm_hugepages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_file_shm_hugepages in the linux kenrel source code.
## The is_file_shm_hugepages function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes is_file_hugepages.
4. function is_file_hugepages invokes is_file_shm_hugepages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_file_shm_hugepages.

————————————————————————————————These prompts belong to Node: 【__fdget】at below.—————————————————————————————————— 
# Now I have a kernel internal function __fdget, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __fdget in the linux kenrel source code.
## The __fdget function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes fdget.
4. function fdget invokes __fdget.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __fdget.

————————————————————————————————These prompts belong to Node: 【__to_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function __to_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __to_fd in the linux kenrel source code.
## The __to_fd function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes fdget.
4. function fdget invokes __to_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __to_fd.

————————————————————————————————These prompts belong to Node: 【poison_element】at below.—————————————————————————————————— 
# Now I have a kernel internal function poison_element, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: poison_element in the linux kenrel source code.
## The poison_element function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes setup_swap_extents.
5. function setup_swap_extents invokes sio_pool_init.
6. function sio_pool_init invokes mempool_create_kmalloc_pool.
7. function mempool_create_kmalloc_pool invokes mempool_create.
8. function mempool_create invokes mempool_create_node.
9. function mempool_create_node invokes mempool_init_node.
10. function mempool_init_node invokes poison_element.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: poison_element.

————————————————————————————————These prompts belong to Node: 【numa_node_id】at below.—————————————————————————————————— 
# Now I have a kernel internal function numa_node_id, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: numa_node_id in the linux kenrel source code.
## The numa_node_id function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes interleave_nid.
15. function interleave_nid invokes numa_node_id.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: numa_node_id.

————————————————————————————————These prompts belong to Node: 【alloc_pages_preferred_many】at below.—————————————————————————————————— 
# Now I have a kernel internal function alloc_pages_preferred_many, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alloc_pages_preferred_many in the linux kenrel source code.
## The alloc_pages_preferred_many function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes alloc_pages_preferred_many.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alloc_pages_preferred_many.

————————————————————————————————These prompts belong to Node: 【page_to_nid】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_to_nid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_to_nid in the linux kenrel source code.
## The page_to_nid function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes page_to_nid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_to_nid.

————————————————————————————————These prompts belong to Node: 【__count_numa_event】at below.—————————————————————————————————— 
# Now I have a kernel internal function __count_numa_event, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __count_numa_event in the linux kenrel source code.
## The __count_numa_event function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes __count_numa_event.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __count_numa_event.

————————————————————————————————These prompts belong to Node: 【gfp_zone】at below.—————————————————————————————————— 
# Now I have a kernel internal function gfp_zone, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: gfp_zone in the linux kenrel source code.
## The gfp_zone function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes gfp_zone.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: gfp_zone.

————————————————————————————————These prompts belong to Node: 【__bitmap_intersects】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_intersects, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_intersects in the linux kenrel source code.
## The __bitmap_intersects function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes apply_policy_zone.
15. function apply_policy_zone invokes __nodes_intersects.
16. function __nodes_intersects invokes bitmap_intersects.
17. function bitmap_intersects invokes __bitmap_intersects.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_intersects.

————————————————————————————————These prompts belong to Node: 【mpol_needs_cond_ref】at below.—————————————————————————————————— 
# Now I have a kernel internal function mpol_needs_cond_ref, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mpol_needs_cond_ref in the linux kenrel source code.
## The mpol_needs_cond_ref function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes mpol_cond_put.
6. function mpol_cond_put invokes mpol_needs_cond_ref.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mpol_needs_cond_ref.

————————————————————————————————These prompts belong to Node: 【__get_vma_policy】at below.—————————————————————————————————— 
# Now I have a kernel internal function __get_vma_policy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __get_vma_policy in the linux kenrel source code.
## The __get_vma_policy function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes get_vma_policy.
6. function get_vma_policy invokes __get_vma_policy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __get_vma_policy.

————————————————————————————————These prompts belong to Node: 【mpol_store_user_nodemask】at below.—————————————————————————————————— 
# Now I have a kernel internal function mpol_store_user_nodemask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mpol_store_user_nodemask in the linux kenrel source code.
## The mpol_store_user_nodemask function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes mpol_rebind_policy.
6. function mpol_rebind_policy invokes mpol_store_user_nodemask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mpol_store_user_nodemask.

————————————————————————————————These prompts belong to Node: 【bitmap_onto】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_onto, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_onto in the linux kenrel source code.
## The bitmap_onto function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes mpol_set_nodemask.
6. function mpol_set_nodemask invokes mpol_relative_nodemask.
7. function mpol_relative_nodemask invokes __nodes_onto.
8. function __nodes_onto invokes bitmap_onto.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_onto.

————————————————————————————————These prompts belong to Node: 【bitmap_fold】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_fold, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_fold in the linux kenrel source code.
## The bitmap_fold function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes mpol_set_nodemask.
6. function mpol_set_nodemask invokes mpol_relative_nodemask.
7. function mpol_relative_nodemask invokes __nodes_fold.
8. function __nodes_fold invokes bitmap_fold.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_fold.

————————————————————————————————These prompts belong to Node: 【__bitmap_and】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_and, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_and in the linux kenrel source code.
## The __bitmap_and function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes mpol_set_nodemask.
6. function mpol_set_nodemask invokes __nodes_and.
7. function __nodes_and invokes bitmap_and.
8. function bitmap_and invokes __bitmap_and.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_and.

————————————————————————————————These prompts belong to Node: 【bitmap_zero】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_zero, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_zero in the linux kenrel source code.
## The bitmap_zero function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes get_nodes.
5. function get_nodes invokes __nodes_clear.
6. function __nodes_clear invokes bitmap_zero.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_zero.

————————————————————————————————These prompts belong to Node: 【__bitmap_equal】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_equal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_equal in the linux kenrel source code.
## The __bitmap_equal function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes mpol_rebind_policy.
6. function mpol_rebind_policy invokes __nodes_equal.
7. function __nodes_equal invokes bitmap_equal.
8. function bitmap_equal invokes __bitmap_equal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_equal.

————————————————————————————————These prompts belong to Node: 【mmap_assert_write_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmap_assert_write_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmap_assert_write_locked in the linux kenrel source code.
## The mmap_assert_write_locked function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes vma_start_write.
4. function vma_start_write invokes __is_vma_write_locked.
5. function __is_vma_write_locked invokes mmap_assert_write_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmap_assert_write_locked.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_start_locking】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_start_locking, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_start_locking in the linux kenrel source code.
## The __mmap_lock_trace_start_locking function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mmap_write_lock.
4. function mmap_write_lock invokes __mmap_lock_trace_start_locking.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_start_locking.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_acquire_returned】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_acquire_returned, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_acquire_returned in the linux kenrel source code.
## The __mmap_lock_trace_acquire_returned function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mmap_write_lock.
4. function mmap_write_lock invokes __mmap_lock_trace_acquire_returned.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_acquire_returned.

————————————————————————————————These prompts belong to Node: 【bitmap_bitremap】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_bitremap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_bitremap in the linux kenrel source code.
## The bitmap_bitremap function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes do_migrate_pages.
5. function do_migrate_pages invokes __node_remap.
6. function __node_remap invokes bitmap_bitremap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_bitremap.

————————————————————————————————These prompts belong to Node: 【IS_ERR】at below.—————————————————————————————————— 
# Now I have a kernel internal function IS_ERR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: IS_ERR in the linux kenrel source code.
## The IS_ERR function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes IS_ERR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: IS_ERR.

————————————————————————————————These prompts belong to Node: 【PTR_ERR】at below.—————————————————————————————————— 
# Now I have a kernel internal function PTR_ERR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PTR_ERR in the linux kenrel source code.
## The PTR_ERR function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes PTR_ERR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PTR_ERR.

————————————————————————————————These prompts belong to Node: 【vma_assert_write_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_assert_write_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_assert_write_locked in the linux kenrel source code.
## The vma_assert_write_locked function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_replace_policy.
5. function vma_replace_policy invokes vma_assert_write_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_assert_write_locked.

————————————————————————————————These prompts belong to Node: 【anon_vma_name】at below.—————————————————————————————————— 
# Now I have a kernel internal function anon_vma_name, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: anon_vma_name in the linux kenrel source code.
## The anon_vma_name function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes anon_vma_name.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: anon_vma_name.

————————————————————————————————These prompts belong to Node: 【ERR_PTR】at below.—————————————————————————————————— 
# Now I have a kernel internal function ERR_PTR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ERR_PTR in the linux kenrel source code.
## The ERR_PTR function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes ERR_PTR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ERR_PTR.

————————————————————————————————These prompts belong to Node: 【current_cpuset_is_being_rebound】at below.—————————————————————————————————— 
# Now I have a kernel internal function current_cpuset_is_being_rebound, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: current_cpuset_is_being_rebound in the linux kenrel source code.
## The current_cpuset_is_being_rebound function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes current_cpuset_is_being_rebound.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: current_cpuset_is_being_rebound.

————————————————————————————————These prompts belong to Node: 【cpuset_mems_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_mems_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_mems_allowed in the linux kenrel source code.
## The cpuset_mems_allowed function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes cpuset_mems_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_mems_allowed.

————————————————————————————————These prompts belong to Node: 【sanitize_mpol_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function sanitize_mpol_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sanitize_mpol_flags in the linux kenrel source code.
## The sanitize_mpol_flags function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes sanitize_mpol_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sanitize_mpol_flags.

————————————————————————————————These prompts belong to Node: 【PageKsm】at below.—————————————————————————————————— 
# Now I have a kernel internal function PageKsm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PageKsm in the linux kenrel source code.
## The PageKsm function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes PageKsm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PageKsm.

————————————————————————————————These prompts belong to Node: 【mas_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_init in the linux kenrel source code.
## The mas_init function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes vma_iter_init.
6. function vma_iter_init invokes mas_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_init.

————————————————————————————————These prompts belong to Node: 【compat_get_bitmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function compat_get_bitmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: compat_get_bitmap in the linux kenrel source code.
## The compat_get_bitmap function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes get_nodes.
5. function get_nodes invokes get_bitmap.
6. function get_bitmap invokes compat_get_bitmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: compat_get_bitmap.

————————————————————————————————These prompts belong to Node: 【in_x32_syscall】at below.—————————————————————————————————— 
# Now I have a kernel internal function in_x32_syscall, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: in_x32_syscall in the linux kenrel source code.
## The in_x32_syscall function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes get_nodes.
5. function get_nodes invokes get_bitmap.
6. function get_bitmap invokes in_compat_syscall.
7. function in_compat_syscall invokes in_32bit_syscall.
8. function in_32bit_syscall invokes in_x32_syscall.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: in_x32_syscall.

————————————————————————————————These prompts belong to Node: 【find_task_by_vpid】at below.—————————————————————————————————— 
# Now I have a kernel internal function find_task_by_vpid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: find_task_by_vpid in the linux kenrel source code.
## The find_task_by_vpid function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes find_task_by_vpid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: find_task_by_vpid.

————————————————————————————————These prompts belong to Node: 【__might_resched】at below.—————————————————————————————————— 
# Now I have a kernel internal function __might_resched, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __might_resched in the linux kenrel source code.
## The __might_resched function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes __might_resched.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __might_resched.

————————————————————————————————These prompts belong to Node: 【folio_batch_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_batch_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_batch_init in the linux kenrel source code.
## The folio_batch_init function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes folio_batch_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_batch_init.

————————————————————————————————These prompts belong to Node: 【folio_batch_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_batch_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_batch_count in the linux kenrel source code.
## The folio_batch_count function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_find_swap_entries.
7. function shmem_find_swap_entries invokes folio_batch_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_batch_count.

————————————————————————————————These prompts belong to Node: 【__list_del_entry_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del_entry_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del_entry_valid in the linux kenrel source code.
## The __list_del_entry_valid function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes list_del_init.
6. function list_del_init invokes __list_del_entry.
7. function __list_del_entry invokes __list_del_entry_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del_entry_valid.

————————————————————————————————These prompts belong to Node: 【__list_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del in the linux kenrel source code.
## The __list_del function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes list_del_init.
6. function list_del_init invokes __list_del_entry.
7. function __list_del_entry invokes __list_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del.

————————————————————————————————These prompts belong to Node: 【get_random_u】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_random_u, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_random_u in the linux kenrel source code.
## The get_random_u function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes get_random_u32_inclusive.
4. function get_random_u32_inclusive invokes get_random_u32_below.
5. function get_random_u32_below invokes get_random_u.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_random_u.

————————————————————————————————These prompts belong to Node: 【strlen】at below.—————————————————————————————————— 
# Now I have a kernel internal function strlen, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strlen in the linux kenrel source code.
## The strlen function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes secretmem_file_create.
4. function secretmem_file_create invokes strlen.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strlen.

————————————————————————————————These prompts belong to Node: 【wake_up_var】at below.—————————————————————————————————— 
# Now I have a kernel internal function wake_up_var, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wake_up_var in the linux kenrel source code.
## The wake_up_var function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes wake_up_var.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wake_up_var.

————————————————————————————————These prompts belong to Node: 【folio_batch_space】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_batch_space, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_batch_space in the linux kenrel source code.
## The folio_batch_space function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_find_swap_entries.
7. function shmem_find_swap_entries invokes folio_batch_add.
8. function folio_batch_add invokes folio_batch_space.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_batch_space.

————————————————————————————————These prompts belong to Node: 【mtree_load】at below.—————————————————————————————————— 
# Now I have a kernel internal function mtree_load, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mtree_load in the linux kenrel source code.
## The mtree_load function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes vma_lookup.
5. function vma_lookup invokes mtree_load.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mtree_load.

————————————————————————————————These prompts belong to Node: 【native_pmd_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_pmd_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_pmd_val in the linux kenrel source code.
## The native_pmd_val function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pmd_none.
19. function pmd_none invokes native_pmd_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_pmd_val.

————————————————————————————————These prompts belong to Node: 【paravirt_alloc_pte】at below.—————————————————————————————————— 
# Now I have a kernel internal function paravirt_alloc_pte, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: paravirt_alloc_pte in the linux kenrel source code.
## The paravirt_alloc_pte function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pmd_populate_kernel.
19. function pmd_populate_kernel invokes paravirt_alloc_pte.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: paravirt_alloc_pte.

————————————————————————————————These prompts belong to Node: 【native_make_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_make_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_make_pmd in the linux kenrel source code.
## The native_make_pmd function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pmd_populate_kernel.
19. function pmd_populate_kernel invokes native_make_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_make_pmd.

————————————————————————————————These prompts belong to Node: 【native_set_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_set_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_set_pmd in the linux kenrel source code.
## The native_set_pmd function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pmd_populate_kernel.
19. function pmd_populate_kernel invokes native_set_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_set_pmd.

————————————————————————————————These prompts belong to Node: 【virt_to_ptdesc】at below.—————————————————————————————————— 
# Now I have a kernel internal function virt_to_ptdesc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: virt_to_ptdesc in the linux kenrel source code.
## The virt_to_ptdesc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pte_free_kernel.
19. function pte_free_kernel invokes virt_to_ptdesc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: virt_to_ptdesc.

————————————————————————————————These prompts belong to Node: 【pagetable_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function pagetable_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pagetable_alloc in the linux kenrel source code.
## The pagetable_alloc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pte_alloc_one_kernel.
19. function pte_alloc_one_kernel invokes __pte_alloc_one_kernel.
20. function __pte_alloc_one_kernel invokes pagetable_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pagetable_alloc.

————————————————————————————————These prompts belong to Node: 【folio_address】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_address, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_address in the linux kenrel source code.
## The folio_address function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes __pte_alloc_kernel.
18. function __pte_alloc_kernel invokes pte_alloc_one_kernel.
19. function pte_alloc_one_kernel invokes __pte_alloc_one_kernel.
20. function __pte_alloc_one_kernel invokes ptdesc_address.
21. function ptdesc_address invokes folio_address.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_address.

————————————————————————————————These prompts belong to Node: 【arch_sync_kernel_mappings】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_sync_kernel_mappings, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_sync_kernel_mappings in the linux kenrel source code.
## The arch_sync_kernel_mappings function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes arch_sync_kernel_mappings.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_sync_kernel_mappings.

————————————————————————————————These prompts belong to Node: 【vma_is_anonymous】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_anonymous, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_anonymous in the linux kenrel source code.
## The vma_is_anonymous function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes can_do_mincore.
5. function can_do_mincore invokes vma_is_anonymous.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_anonymous.

————————————————————————————————These prompts belong to Node: 【file_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_inode in the linux kenrel source code.
## The file_inode function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes can_do_mincore.
5. function can_do_mincore invokes file_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_inode.

————————————————————————————————These prompts belong to Node: 【inode_owner_or_capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_owner_or_capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_owner_or_capable in the linux kenrel source code.
## The inode_owner_or_capable function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes can_do_mincore.
5. function can_do_mincore invokes inode_owner_or_capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_owner_or_capable.

————————————————————————————————These prompts belong to Node: 【inode_permission】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_permission, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_permission in the linux kenrel source code.
## The inode_permission function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes can_do_mincore.
5. function can_do_mincore invokes file_permission.
6. function file_permission invokes inode_permission.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_permission.

————————————————————————————————These prompts belong to Node: 【mnt_idmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_idmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_idmap in the linux kenrel source code.
## The mnt_idmap function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes can_do_mincore.
5. function can_do_mincore invokes file_permission.
6. function file_permission invokes file_mnt_idmap.
7. function file_mnt_idmap invokes mnt_idmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_idmap.

————————————————————————————————These prompts belong to Node: 【task_rlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_rlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_rlimit in the linux kenrel source code.
## The task_rlimit function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes can_do_mlock.
5. function can_do_mlock invokes rlimit.
6. function rlimit invokes task_rlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_rlimit.

————————————————————————————————These prompts belong to Node: 【local_lock_acquire】at below.—————————————————————————————————— 
# Now I have a kernel internal function local_lock_acquire, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: local_lock_acquire in the linux kenrel source code.
## The local_lock_acquire function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes local_lock_acquire.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: local_lock_acquire.

————————————————————————————————These prompts belong to Node: 【local_lock_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function local_lock_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: local_lock_release in the linux kenrel source code.
## The local_lock_release function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes local_lock_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: local_lock_release.

————————————————————————————————These prompts belong to Node: 【folio_batch_reinit】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_batch_reinit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_batch_reinit in the linux kenrel source code.
## The folio_batch_reinit function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes folio_batch_reinit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_batch_reinit.

————————————————————————————————These prompts belong to Node: 【__count_vm_events】at below.—————————————————————————————————— 
# Now I have a kernel internal function __count_vm_events, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __count_vm_events in the linux kenrel source code.
## The __count_vm_events function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes __count_vm_events.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __count_vm_events.

————————————————————————————————These prompts belong to Node: 【lru_gen_del_folio】at below.—————————————————————————————————— 
# Now I have a kernel internal function lru_gen_del_folio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lru_gen_del_folio in the linux kenrel source code.
## The lru_gen_del_folio function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes lru_gen_del_folio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lru_gen_del_folio.

————————————————————————————————These prompts belong to Node: 【lruvec_pgdat】at below.—————————————————————————————————— 
# Now I have a kernel internal function lruvec_pgdat, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lruvec_pgdat in the linux kenrel source code.
## The lruvec_pgdat function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes folio_lruvec_relock_irq.
11. function folio_lruvec_relock_irq invokes folio_matches_lruvec.
12. function folio_matches_lruvec invokes lruvec_pgdat.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lruvec_pgdat.

————————————————————————————————These prompts belong to Node: 【lru_gen_add_folio】at below.—————————————————————————————————— 
# Now I have a kernel internal function lru_gen_add_folio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lru_gen_add_folio in the linux kenrel source code.
## The lru_gen_add_folio function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes lru_gen_add_folio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lru_gen_add_folio.

————————————————————————————————These prompts belong to Node: 【lruvec_memcg】at below.—————————————————————————————————— 
# Now I have a kernel internal function lruvec_memcg, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lruvec_memcg in the linux kenrel source code.
## The lruvec_memcg function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes folio_lruvec_relock_irq.
11. function folio_lruvec_relock_irq invokes folio_matches_lruvec.
12. function folio_matches_lruvec invokes lruvec_memcg.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lruvec_memcg.

————————————————————————————————These prompts belong to Node: 【folio_memcg】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_memcg, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_memcg in the linux kenrel source code.
## The folio_memcg function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes lru_add_drain.
7. function lru_add_drain invokes mlock_drain_local.
8. function mlock_drain_local invokes mlock_folio_batch.
9. function mlock_folio_batch invokes __mlock_folio.
10. function __mlock_folio invokes folio_lruvec_relock_irq.
11. function folio_lruvec_relock_irq invokes folio_matches_lruvec.
12. function folio_matches_lruvec invokes folio_memcg.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_memcg.

————————————————————————————————These prompts belong to Node: 【__mlock_posix_error_return】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mlock_posix_error_return, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mlock_posix_error_return in the linux kenrel source code.
## The __mlock_posix_error_return function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mlock_posix_error_return.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mlock_posix_error_return.

————————————————————————————————These prompts belong to Node: 【vma_iter_end】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_iter_end, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_iter_end in the linux kenrel source code.
## The vma_iter_end function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes apply_vma_lock_flags.
5. function apply_vma_lock_flags invokes vma_iter_end.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_iter_end.

————————————————————————————————These prompts belong to Node: 【is_vm_hugetlb_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_vm_hugetlb_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_vm_hugetlb_page in the linux kenrel source code.
## The is_vm_hugetlb_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes apply_vma_lock_flags.
5. function apply_vma_lock_flags invokes mlock_fixup.
6. function mlock_fixup invokes is_vm_hugetlb_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_vm_hugetlb_page.

————————————————————————————————These prompts belong to Node: 【vma_is_dax】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_dax, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_dax in the linux kenrel source code.
## The vma_is_dax function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes apply_vma_lock_flags.
5. function apply_vma_lock_flags invokes mlock_fixup.
6. function mlock_fixup invokes vma_is_dax.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_dax.

————————————————————————————————These prompts belong to Node: 【vm_flags_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_flags_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_flags_init in the linux kenrel source code.
## The vm_flags_init function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes apply_vma_lock_flags.
5. function apply_vma_lock_flags invokes mlock_fixup.
6. function mlock_fixup invokes vm_flags_reset.
7. function vm_flags_reset invokes vm_flags_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_flags_init.

————————————————————————————————These prompts belong to Node: 【mas_prev】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_prev, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_prev in the linux kenrel source code.
## The mas_prev function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes vma_prev.
4. function vma_prev invokes mas_prev.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_prev.

————————————————————————————————These prompts belong to Node: 【__wake_up】at below.—————————————————————————————————— 
# Now I have a kernel internal function __wake_up, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __wake_up in the linux kenrel source code.
## The __wake_up function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_end.
8. function mn_itree_inv_end invokes __wake_up.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __wake_up.

————————————————————————————————These prompts belong to Node: 【__cpuhp_setup_state】at below.—————————————————————————————————— 
# Now I have a kernel internal function __cpuhp_setup_state, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __cpuhp_setup_state in the linux kenrel source code.
## The __cpuhp_setup_state function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes enable_swap_slots_cache.
4. function enable_swap_slots_cache invokes cpuhp_setup_state.
5. function cpuhp_setup_state invokes __cpuhp_setup_state.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __cpuhp_setup_state.

————————————————————————————————These prompts belong to Node: 【blk_start_plug】at below.—————————————————————————————————— 
# Now I have a kernel internal function blk_start_plug, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blk_start_plug in the linux kenrel source code.
## The blk_start_plug function is called in the sys_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_madvise invokes __se_sys_madvise.
2. function __se_sys_madvise invokes __do_sys_madvise.
3. function __do_sys_madvise invokes do_madvise.
4. function do_madvise invokes blk_start_plug.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blk_start_plug.

————————————————————————————————These prompts belong to Node: 【blk_finish_plug】at below.—————————————————————————————————— 
# Now I have a kernel internal function blk_finish_plug, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blk_finish_plug in the linux kenrel source code.
## The blk_finish_plug function is called in the sys_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_madvise invokes __se_sys_madvise.
2. function __se_sys_madvise invokes __do_sys_madvise.
3. function __do_sys_madvise invokes do_madvise.
4. function do_madvise invokes blk_finish_plug.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blk_finish_plug.

————————————————————————————————These prompts belong to Node: 【__put_task_struct】at below.—————————————————————————————————— 
# Now I have a kernel internal function __put_task_struct, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __put_task_struct in the linux kenrel source code.
## The __put_task_struct function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes put_task_struct.
5. function put_task_struct invokes __put_task_struct.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __put_task_struct.

————————————————————————————————These prompts belong to Node: 【refcount_warn_saturate】at below.—————————————————————————————————— 
# Now I have a kernel internal function refcount_warn_saturate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: refcount_warn_saturate in the linux kenrel source code.
## The refcount_warn_saturate function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes put_task_struct.
5. function put_task_struct invokes refcount_dec_and_test.
6. function refcount_dec_and_test invokes __refcount_dec_and_test.
7. function __refcount_dec_and_test invokes __refcount_sub_and_test.
8. function __refcount_sub_and_test invokes refcount_warn_saturate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: refcount_warn_saturate.

————————————————————————————————These prompts belong to Node: 【mmu_notifier_range_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmu_notifier_range_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmu_notifier_range_init in the linux kenrel source code.
## The mmu_notifier_range_init function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_range_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmu_notifier_range_init.

————————————————————————————————These prompts belong to Node: 【mmu_notifier_range_blockable】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmu_notifier_range_blockable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmu_notifier_range_blockable in the linux kenrel source code.
## The mmu_notifier_range_blockable function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_end.
5. function mmu_notifier_invalidate_range_end invokes mmu_notifier_range_blockable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmu_notifier_range_blockable.

————————————————————————————————These prompts belong to Node: 【mm_has_notifiers】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_has_notifiers, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_has_notifiers in the linux kenrel source code.
## The mm_has_notifiers function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes mm_has_notifiers.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_has_notifiers.

————————————————————————————————These prompts belong to Node: 【mas_find】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_find, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_find in the linux kenrel source code.
## The mas_find function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes vma_find.
4. function vma_find invokes mas_find.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_find.

————————————————————————————————These prompts belong to Node: 【process_shares_mm】at below.—————————————————————————————————— 
# Now I have a kernel internal function process_shares_mm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: process_shares_mm in the linux kenrel source code.
## The process_shares_mm function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes task_will_free_mem.
4. function task_will_free_mem invokes process_shares_mm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: process_shares_mm.

————————————————————————————————These prompts belong to Node: 【mutex_lock_killable】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_lock_killable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_lock_killable in the linux kenrel source code.
## The mutex_lock_killable function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes mutex_lock_killable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_lock_killable.

————————————————————————————————These prompts belong to Node: 【mutex_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_unlock in the linux kenrel source code.
## The mutex_unlock function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes mutex_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_unlock.

————————————————————————————————These prompts belong to Node: 【blocking_notifier_call_chain】at below.—————————————————————————————————— 
# Now I have a kernel internal function blocking_notifier_call_chain, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blocking_notifier_call_chain in the linux kenrel source code.
## The blocking_notifier_call_chain function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __get_vm_area_node.
9. function __get_vm_area_node invokes alloc_vmap_area.
10. function alloc_vmap_area invokes blocking_notifier_call_chain.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blocking_notifier_call_chain.

————————————————————————————————These prompts belong to Node: 【mutex_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_lock in the linux kenrel source code.
## The mutex_lock function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes mutex_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_lock.

————————————————————————————————These prompts belong to Node: 【__init_work】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_work, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_work in the linux kenrel source code.
## The __init_work function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes __init_work.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_work.

————————————————————————————————These prompts belong to Node: 【queue_work_on】at below.—————————————————————————————————— 
# Now I have a kernel internal function queue_work_on, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: queue_work_on in the linux kenrel source code.
## The queue_work_on function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes queue_work_on.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: queue_work_on.

————————————————————————————————These prompts belong to Node: 【flush_work】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_work, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_work in the linux kenrel source code.
## The flush_work function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes flush_work.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_work.

————————————————————————————————These prompts belong to Node: 【has_bh_in_lru】at below.—————————————————————————————————— 
# Now I have a kernel internal function has_bh_in_lru, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: has_bh_in_lru in the linux kenrel source code.
## The has_bh_in_lru function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes __lru_add_drain_all.
7. function __lru_add_drain_all invokes cpu_needs_drain.
8. function cpu_needs_drain invokes has_bh_in_lru.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: has_bh_in_lru.

————————————————————————————————These prompts belong to Node: 【synchronize_rcu_expedited】at below.—————————————————————————————————— 
# Now I have a kernel internal function synchronize_rcu_expedited, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: synchronize_rcu_expedited in the linux kenrel source code.
## The synchronize_rcu_expedited function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes lru_cache_disable.
6. function lru_cache_disable invokes synchronize_rcu_expedited.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: synchronize_rcu_expedited.

————————————————————————————————These prompts belong to Node: 【same_thread_group】at below.—————————————————————————————————— 
# Now I have a kernel internal function same_thread_group, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: same_thread_group in the linux kenrel source code.
## The same_thread_group function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes task_will_free_mem.
4. function task_will_free_mem invokes same_thread_group.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: same_thread_group.

————————————————————————————————These prompts belong to Node: 【__mmdrop】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmdrop, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmdrop in the linux kenrel source code.
## The __mmdrop function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes mmdrop.
4. function mmdrop invokes __mmdrop.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmdrop.

————————————————————————————————These prompts belong to Node: 【cpuset_print_current_mems_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_print_current_mems_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_print_current_mems_allowed in the linux kenrel source code.
## The cpuset_print_current_mems_allowed function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes warn_alloc.
9. function warn_alloc invokes cpuset_print_current_mems_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_print_current_mems_allowed.

————————————————————————————————These prompts belong to Node: 【cpuset_node_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_node_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_node_allowed in the linux kenrel source code.
## The cpuset_node_allowed function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes cpuset_zone_allowed.
11. function cpuset_zone_allowed invokes __cpuset_zone_allowed.
12. function __cpuset_zone_allowed invokes cpuset_node_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_node_allowed.

————————————————————————————————These prompts belong to Node: 【_find_next_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_next_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_next_bit in the linux kenrel source code.
## The _find_next_bit function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes interleave_nid.
15. function interleave_nid invokes __next_node.
16. function __next_node invokes find_next_bit.
17. function find_next_bit invokes _find_next_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_next_bit.

————————————————————————————————These prompts belong to Node: 【_find_first_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_first_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_first_bit in the linux kenrel source code.
## The _find_first_bit function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes __first_node.
15. function __first_node invokes find_first_bit.
16. function find_first_bit invokes _find_first_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_first_bit.

————————————————————————————————These prompts belong to Node: 【__bitmap_subset】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_subset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_subset in the linux kenrel source code.
## The __bitmap_subset function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes __nodes_subset.
5. function __nodes_subset invokes bitmap_subset.
6. function bitmap_subset invokes __bitmap_subset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_subset.

————————————————————————————————These prompts belong to Node: 【thread_group_leader】at below.—————————————————————————————————— 
# Now I have a kernel internal function thread_group_leader, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: thread_group_leader in the linux kenrel source code.
## The thread_group_leader function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes task_will_free_mem.
4. function task_will_free_mem invokes __task_will_free_mem.
5. function __task_will_free_mem invokes thread_group_empty.
6. function thread_group_empty invokes thread_group_leader.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: thread_group_leader.

————————————————————————————————These prompts belong to Node: 【list_is_last】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_is_last, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_is_last in the linux kenrel source code.
## The list_is_last function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes task_will_free_mem.
4. function task_will_free_mem invokes __task_will_free_mem.
5. function __task_will_free_mem invokes thread_group_empty.
6. function thread_group_empty invokes list_is_last.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_is_last.

————————————————————————————————These prompts belong to Node: 【pidfd_get_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function pidfd_get_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pidfd_get_task in the linux kenrel source code.
## The pidfd_get_task function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes pidfd_get_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pidfd_get_task.

————————————————————————————————These prompts belong to Node: 【down_read_killable】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_read_killable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_read_killable in the linux kenrel source code.
## The down_read_killable function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes mmap_read_lock_killable.
4. function mmap_read_lock_killable invokes down_read_killable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_read_killable.

————————————————————————————————These prompts belong to Node: 【force_page_cache_readahead】at below.—————————————————————————————————— 
# Now I have a kernel internal function force_page_cache_readahead, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: force_page_cache_readahead in the linux kenrel source code.
## The force_page_cache_readahead function is called in the sys_fadvise_ system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fadvise_ invokes __se_sys_fadvise64_.
2. function __se_sys_fadvise64_ invokes __do_sys_fadvise64_.
3. function __do_sys_fadvise64_ invokes ksys_fadvise64_.
4. function ksys_fadvise64_ invokes vfs_fadvise.
5. function vfs_fadvise invokes generic_fadvise.
6. function generic_fadvise invokes force_page_cache_readahead.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: force_page_cache_readahead.

————————————————————————————————These prompts belong to Node: 【fdput】at below.—————————————————————————————————— 
# Now I have a kernel internal function fdput, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fdput in the linux kenrel source code.
## The fdput function is called in the sys_fadvise_ system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fadvise_ invokes __se_sys_fadvise64_.
2. function __se_sys_fadvise64_ invokes __do_sys_fadvise64_.
3. function __do_sys_fadvise64_ invokes ksys_fadvise64_.
4. function ksys_fadvise64_ invokes fdput.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fdput.

————————————————————————————————These prompts belong to Node: 【__warn_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function __warn_printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __warn_printk in the linux kenrel source code.
## The __warn_printk function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes copy_overflow.
4. function copy_overflow invokes __copy_overflow.
5. function __copy_overflow invokes __warn_printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __warn_printk.

————————————————————————————————These prompts belong to Node: 【pagefault_disable】at below.—————————————————————————————————— 
# Now I have a kernel internal function pagefault_disable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pagefault_disable in the linux kenrel source code.
## The pagefault_disable function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes get_freepointer_safe.
7. function get_freepointer_safe invokes copy_from_kernel_nofault.
8. function copy_from_kernel_nofault invokes pagefault_disable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pagefault_disable.

————————————————————————————————These prompts belong to Node: 【pagefault_enable】at below.—————————————————————————————————— 
# Now I have a kernel internal function pagefault_enable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pagefault_enable in the linux kenrel source code.
## The pagefault_enable function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes get_freepointer_safe.
7. function get_freepointer_safe invokes copy_from_kernel_nofault.
8. function copy_from_kernel_nofault invokes pagefault_enable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pagefault_enable.

————————————————————————————————These prompts belong to Node: 【kmsan_unpoison_memory】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_unpoison_memory, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_unpoison_memory in the linux kenrel source code.
## The kmsan_unpoison_memory function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes get_freepointer_safe.
7. function get_freepointer_safe invokes copy_from_kernel_nofault.
8. function copy_from_kernel_nofault invokes kmsan_unpoison_memory.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_unpoison_memory.

————————————————————————————————These prompts belong to Node: 【copy_from_kernel_nofault_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_from_kernel_nofault_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_from_kernel_nofault_allowed in the linux kenrel source code.
## The copy_from_kernel_nofault_allowed function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes get_freepointer_safe.
7. function get_freepointer_safe invokes copy_from_kernel_nofault.
8. function copy_from_kernel_nofault invokes copy_from_kernel_nofault_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_from_kernel_nofault_allowed.

————————————————————————————————These prompts belong to Node: 【strnlen_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function strnlen_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strnlen_user in the linux kenrel source code.
## The strnlen_user function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes strnlen_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strnlen_user.

————————————————————————————————These prompts belong to Node: 【SHMEM_I】at below.—————————————————————————————————— 
# Now I have a kernel internal function SHMEM_I, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: SHMEM_I in the linux kenrel source code.
## The SHMEM_I function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes SHMEM_I.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: SHMEM_I.

————————————————————————————————These prompts belong to Node: 【mapping_gfp_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function mapping_gfp_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mapping_gfp_mask in the linux kenrel source code.
## The mapping_gfp_mask function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes mapping_gfp_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mapping_gfp_mask.

————————————————————————————————These prompts belong to Node: 【count_vm_event】at below.—————————————————————————————————— 
# Now I have a kernel internal function count_vm_event, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: count_vm_event in the linux kenrel source code.
## The count_vm_event function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes count_vm_event.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: count_vm_event.

————————————————————————————————These prompts belong to Node: 【folio_test_pmd_mappable】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_test_pmd_mappable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_test_pmd_mappable in the linux kenrel source code.
## The folio_test_pmd_mappable function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_add_to_page_cache.
9. function shmem_add_to_page_cache invokes folio_test_pmd_mappable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_test_pmd_mappable.

————————————————————————————————These prompts belong to Node: 【SHMEM_SB】at below.—————————————————————————————————— 
# Now I have a kernel internal function SHMEM_SB, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: SHMEM_SB in the linux kenrel source code.
## The SHMEM_SB function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes shmem_recalc_inode.
10. function shmem_recalc_inode invokes shmem_inode_unacct_blocks.
11. function shmem_inode_unacct_blocks invokes SHMEM_SB.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: SHMEM_SB.

————————————————————————————————These prompts belong to Node: 【flush_dcache_folio】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_dcache_folio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_dcache_folio in the linux kenrel source code.
## The flush_dcache_folio function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_replace_folio.
9. function shmem_replace_folio invokes flush_dcache_folio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_dcache_folio.

————————————————————————————————These prompts belong to Node: 【__dquot_free_space】at below.—————————————————————————————————— 
# Now I have a kernel internal function __dquot_free_space, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __dquot_free_space in the linux kenrel source code.
## The __dquot_free_space function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes shmem_recalc_inode.
10. function shmem_recalc_inode invokes shmem_inode_unacct_blocks.
11. function shmem_inode_unacct_blocks invokes dquot_free_block_nodirty.
12. function dquot_free_block_nodirty invokes dquot_free_space_nodirty.
13. function dquot_free_space_nodirty invokes __dquot_free_space.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __dquot_free_space.

————————————————————————————————These prompts belong to Node: 【xa_find】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_find, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_find in the linux kenrel source code.
## The xa_find function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes xa_find.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_find.

————————————————————————————————These prompts belong to Node: 【security_vm_enough_memory_mm】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_vm_enough_memory_mm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_vm_enough_memory_mm in the linux kenrel source code.
## The security_vm_enough_memory_mm function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes security_vm_enough_memory_mm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_vm_enough_memory_mm.

————————————————————————————————These prompts belong to Node: 【folio_throttle_swaprate】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_throttle_swaprate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_throttle_swaprate in the linux kenrel source code.
## The folio_throttle_swaprate function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_add_to_page_cache.
9. function shmem_add_to_page_cache invokes folio_throttle_swaprate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_throttle_swaprate.

————————————————————————————————These prompts belong to Node: 【xas_set_err】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_set_err, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_set_err in the linux kenrel source code.
## The xas_set_err function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_add_to_page_cache.
9. function shmem_add_to_page_cache invokes xas_set_err.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_set_err.

————————————————————————————————These prompts belong to Node: 【count_memcg_event_mm】at below.—————————————————————————————————— 
# Now I have a kernel internal function count_memcg_event_mm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: count_memcg_event_mm in the linux kenrel source code.
## The count_memcg_event_mm function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes count_memcg_event_mm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: count_memcg_event_mm.

————————————————————————————————These prompts belong to Node: 【arch_swap_restore】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_swap_restore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_swap_restore in the linux kenrel source code.
## The arch_swap_restore function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes arch_swap_restore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_swap_restore.

————————————————————————————————These prompts belong to Node: 【__xa_cmpxchg】at below.—————————————————————————————————— 
# Now I have a kernel internal function __xa_cmpxchg, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __xa_cmpxchg in the linux kenrel source code.
## The __xa_cmpxchg function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes xa_cmpxchg_irq.
10. function xa_cmpxchg_irq invokes __xa_cmpxchg.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __xa_cmpxchg.

————————————————————————————————These prompts belong to Node: 【fs_reclaim_acquire】at below.—————————————————————————————————— 
# Now I have a kernel internal function fs_reclaim_acquire, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fs_reclaim_acquire in the linux kenrel source code.
## The fs_reclaim_acquire function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes xa_cmpxchg_irq.
10. function xa_cmpxchg_irq invokes might_alloc.
11. function might_alloc invokes fs_reclaim_acquire.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fs_reclaim_acquire.

————————————————————————————————These prompts belong to Node: 【fs_reclaim_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function fs_reclaim_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fs_reclaim_release in the linux kenrel source code.
## The fs_reclaim_release function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes xa_cmpxchg_irq.
10. function xa_cmpxchg_irq invokes might_alloc.
11. function might_alloc invokes fs_reclaim_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fs_reclaim_release.

————————————————————————————————These prompts belong to Node: 【swp_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function swp_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swp_entry in the linux kenrel source code.
## The swp_entry function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_set_folio_swapin_error.
9. function shmem_set_folio_swapin_error invokes make_poisoned_swp_entry.
10. function make_poisoned_swp_entry invokes make_pte_marker_entry.
11. function make_pte_marker_entry invokes swp_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swp_entry.

————————————————————————————————These prompts belong to Node: 【__ref_is_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function __ref_is_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __ref_is_percpu in the linux kenrel source code.
## The __ref_is_percpu function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes put_swap_device.
9. function put_swap_device invokes percpu_ref_put.
10. function percpu_ref_put invokes percpu_ref_put_many.
11. function percpu_ref_put_many invokes __ref_is_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __ref_is_percpu.

————————————————————————————————These prompts belong to Node: 【xa_mk_value】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_mk_value, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_mk_value in the linux kenrel source code.
## The xa_mk_value function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_confirm_swap.
9. function shmem_confirm_swap invokes swp_to_radix_entry.
10. function swp_to_radix_entry invokes xa_mk_value.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_mk_value.

————————————————————————————————These prompts belong to Node: 【swp_offset】at below.—————————————————————————————————— 
# Now I have a kernel internal function swp_offset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swp_offset in the linux kenrel source code.
## The swp_offset function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes is_poisoned_swp_entry.
9. function is_poisoned_swp_entry invokes pte_marker_get.
10. function pte_marker_get invokes swp_offset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swp_offset.

————————————————————————————————These prompts belong to Node: 【swp_type】at below.—————————————————————————————————— 
# Now I have a kernel internal function swp_type, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swp_type in the linux kenrel source code.
## The swp_type function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_find_swap_entries.
7. function shmem_find_swap_entries invokes swp_type.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swp_type.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_migrate】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_migrate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_migrate in the linux kenrel source code.
## The mem_cgroup_migrate function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_replace_folio.
9. function shmem_replace_folio invokes mem_cgroup_migrate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_migrate.

————————————————————————————————These prompts belong to Node: 【encoded_page_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function encoded_page_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: encoded_page_ptr in the linux kenrel source code.
## The encoded_page_ptr function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes encoded_page_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: encoded_page_ptr.

————————————————————————————————These prompts belong to Node: 【is_huge_zero_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_huge_zero_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_huge_zero_page in the linux kenrel source code.
## The is_huge_zero_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes is_huge_zero_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_huge_zero_page.

————————————————————————————————These prompts belong to Node: 【free_zone_device_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_zone_device_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_zone_device_page in the linux kenrel source code.
## The free_zone_device_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes free_zone_device_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_zone_device_page.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_uncharge_list】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_uncharge_list, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_uncharge_list in the linux kenrel source code.
## The mem_cgroup_uncharge_list function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes mem_cgroup_uncharge_list.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_uncharge_list.

————————————————————————————————These prompts belong to Node: 【count_vm_events】at below.—————————————————————————————————— 
# Now I have a kernel internal function count_vm_events, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: count_vm_events in the linux kenrel source code.
## The count_vm_events function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes __folio_put_large.
20. function __folio_put_large invokes __page_cache_release.
21. function __page_cache_release invokes count_vm_events.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: count_vm_events.

————————————————————————————————These prompts belong to Node: 【put_devmap_managed_page_refs】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_devmap_managed_page_refs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_devmap_managed_page_refs in the linux kenrel source code.
## The put_devmap_managed_page_refs function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes put_devmap_managed_page.
20. function put_devmap_managed_page invokes put_devmap_managed_page_refs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_devmap_managed_page_refs.

————————————————————————————————These prompts belong to Node: 【is_zone_device_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_zone_device_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_zone_device_page in the linux kenrel source code.
## The is_zone_device_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_activate.
15. function folio_activate invokes folio_batch_add_and_move.
16. function folio_batch_add_and_move invokes folio_batch_move_lru.
17. function folio_batch_move_lru invokes folios_put.
18. function folios_put invokes release_pages.
19. function release_pages invokes folio_is_zone_device.
20. function folio_is_zone_device invokes is_zone_device_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_zone_device_page.

————————————————————————————————These prompts belong to Node: 【lru_gen_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function lru_gen_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lru_gen_enabled in the linux kenrel source code.
## The lru_gen_enabled function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes lru_gen_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lru_gen_enabled.

————————————————————————————————These prompts belong to Node: 【folio_inc_refs】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_inc_refs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_inc_refs in the linux kenrel source code.
## The folio_inc_refs function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_inc_refs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_inc_refs.

————————————————————————————————These prompts belong to Node: 【folio_test_idle】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_test_idle, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_test_idle in the linux kenrel source code.
## The folio_test_idle function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_test_idle.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_test_idle.

————————————————————————————————These prompts belong to Node: 【folio_clear_idle】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_clear_idle, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_clear_idle in the linux kenrel source code.
## The folio_clear_idle function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes folio_clear_idle.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_clear_idle.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_uncharge】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_uncharge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_uncharge in the linux kenrel source code.
## The mem_cgroup_uncharge function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes unpin_user_page.
13. function unpin_user_page invokes gup_put_folio.
14. function gup_put_folio invokes folio_put_refs.
15. function folio_put_refs invokes __folio_put.
16. function __folio_put invokes __folio_put_small.
17. function __folio_put_small invokes mem_cgroup_uncharge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_uncharge.

————————————————————————————————These prompts belong to Node: 【cpus_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpus_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpus_read_lock in the linux kenrel source code.
## The cpus_read_lock function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes cpus_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpus_read_lock.

————————————————————————————————These prompts belong to Node: 【cpus_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpus_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpus_read_unlock in the linux kenrel source code.
## The cpus_read_unlock function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes cpus_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpus_read_unlock.

————————————————————————————————These prompts belong to Node: 【memchr_inv】at below.—————————————————————————————————— 
# Now I have a kernel internal function memchr_inv, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memchr_inv in the linux kenrel source code.
## The memchr_inv function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes slab_pad_check.
12. function slab_pad_check invokes memchr_inv.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memchr_inv.

————————————————————————————————These prompts belong to Node: 【kmemleak_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_free in the linux kenrel source code.
## The kmemleak_free function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes kfree.
6. function kfree invokes free_large_kmalloc.
7. function free_large_kmalloc invokes kmemleak_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_free.

————————————————————————————————These prompts belong to Node: 【kmsan_kfree_large】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_kfree_large, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_kfree_large in the linux kenrel source code.
## The kmsan_kfree_large function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes kfree.
6. function kfree invokes free_large_kmalloc.
7. function free_large_kmalloc invokes kmsan_kfree_large.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_kfree_large.

————————————————————————————————These prompts belong to Node: 【size_index_elem】at below.—————————————————————————————————— 
# Now I have a kernel internal function size_index_elem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: size_index_elem in the linux kenrel source code.
## The size_index_elem function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes __kmalloc.
6. function __kmalloc invokes kmalloc_slab.
7. function kmalloc_slab invokes size_index_elem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: size_index_elem.

————————————————————————————————These prompts belong to Node: 【kmemleak_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_alloc in the linux kenrel source code.
## The kmemleak_alloc function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes kmalloc_large.
6. function kmalloc_large invokes __kmalloc_large_node.
7. function __kmalloc_large_node invokes kmemleak_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_alloc.

————————————————————————————————These prompts belong to Node: 【kmsan_kmalloc_large】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_kmalloc_large, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_kmalloc_large in the linux kenrel source code.
## The kmsan_kmalloc_large function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes kmalloc_large.
6. function kmalloc_large invokes __kmalloc_large_node.
7. function __kmalloc_large_node invokes kmsan_kmalloc_large.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_kmalloc_large.

————————————————————————————————These prompts belong to Node: 【strcpy】at below.—————————————————————————————————— 
# Now I have a kernel internal function strcpy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strcpy in the linux kenrel source code.
## The strcpy function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes strcpy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strcpy.

————————————————————————————————These prompts belong to Node: 【slab_is_available】at below.—————————————————————————————————— 
# Now I have a kernel internal function slab_is_available, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: slab_is_available in the linux kenrel source code.
## The slab_is_available function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_create_chunk.
6. function pcpu_create_chunk invokes pcpu_alloc_chunk.
7. function pcpu_alloc_chunk invokes pcpu_mem_zalloc.
8. function pcpu_mem_zalloc invokes slab_is_available.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: slab_is_available.

————————————————————————————————These prompts belong to Node: 【wait_for_completion】at below.—————————————————————————————————— 
# Now I have a kernel internal function wait_for_completion, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wait_for_completion in the linux kenrel source code.
## The wait_for_completion function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes wait_for_completion.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wait_for_completion.

————————————————————————————————These prompts belong to Node: 【call_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function call_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: call_rcu in the linux kenrel source code.
## The call_rcu function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes call_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: call_rcu.

————————————————————————————————These prompts belong to Node: 【__init_swait_queue_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_swait_queue_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_swait_queue_head in the linux kenrel source code.
## The __init_swait_queue_head function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes init_completion.
5. function init_completion invokes __init_swait_queue_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_swait_queue_head.

————————————————————————————————These prompts belong to Node: 【populated_zone】at below.—————————————————————————————————— 
# Now I have a kernel internal function populated_zone, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: populated_zone in the linux kenrel source code.
## The populated_zone function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes warn_alloc.
9. function warn_alloc invokes warn_alloc_show_mem.
10. function warn_alloc_show_mem invokes __show_mem.
11. function __show_mem invokes show_free_areas.
12. function show_free_areas invokes populated_zone.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: populated_zone.

————————————————————————————————These prompts belong to Node: 【is_highmem_idx】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_highmem_idx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_highmem_idx in the linux kenrel source code.
## The is_highmem_idx function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes warn_alloc.
9. function warn_alloc invokes warn_alloc_show_mem.
10. function warn_alloc_show_mem invokes __show_mem.
11. function __show_mem invokes is_highmem.
12. function is_highmem invokes is_highmem_idx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_highmem_idx.

————————————————————————————————These prompts belong to Node: 【__rb_insert_augmented】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rb_insert_augmented, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rb_insert_augmented in the linux kenrel source code.
## The __rb_insert_augmented function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_insert_augmented.
10. function rb_insert_augmented invokes __rb_insert_augmented.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rb_insert_augmented.

————————————————————————————————These prompts belong to Node: 【rb_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_next in the linux kenrel source code.
## The rb_next function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes discard_swap.
4. function discard_swap invokes next_se.
5. function next_se invokes rb_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_next.

————————————————————————————————These prompts belong to Node: 【__rb_erase_color】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rb_erase_color, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rb_erase_color in the linux kenrel source code.
## The __rb_erase_color function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes __rb_erase_color.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rb_erase_color.

————————————————————————————————These prompts belong to Node: 【parent_mem_cgroup】at below.—————————————————————————————————— 
# Now I have a kernel internal function parent_mem_cgroup, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: parent_mem_cgroup in the linux kenrel source code.
## The parent_mem_cgroup function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes workingset_activation.
15. function workingset_activation invokes workingset_age_nonresident.
16. function workingset_age_nonresident invokes parent_lruvec.
17. function parent_lruvec invokes parent_mem_cgroup.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: parent_mem_cgroup.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_lruvec】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_lruvec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_lruvec in the linux kenrel source code.
## The mem_cgroup_lruvec function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes workingset_test_recent.
5. function workingset_test_recent invokes mem_cgroup_lruvec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_lruvec.

————————————————————————————————These prompts belong to Node: 【lru_gen_test_recent】at below.—————————————————————————————————— 
# Now I have a kernel internal function lru_gen_test_recent, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lru_gen_test_recent in the linux kenrel source code.
## The lru_gen_test_recent function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes workingset_test_recent.
5. function workingset_test_recent invokes lru_gen_test_recent.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lru_gen_test_recent.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_from_id】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_from_id, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_from_id in the linux kenrel source code.
## The mem_cgroup_from_id function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes workingset_test_recent.
5. function workingset_test_recent invokes mem_cgroup_from_id.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_from_id.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_disabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_disabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_disabled in the linux kenrel source code.
## The mem_cgroup_disabled function is called in the sys_cachestat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_cachestat invokes __se_sys_cachestat.
2. function __se_sys_cachestat invokes __do_sys_cachestat.
3. function __do_sys_cachestat invokes filemap_cachestat.
4. function filemap_cachestat invokes workingset_test_recent.
5. function workingset_test_recent invokes mem_cgroup_disabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_disabled.

————————————————————————————————These prompts belong to Node: 【rcu_read_lock_held】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_read_lock_held, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_read_lock_held in the linux kenrel source code.
## The rcu_read_lock_held function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes mark_page_accessed.
13. function mark_page_accessed invokes folio_mark_accessed.
14. function folio_mark_accessed invokes workingset_activation.
15. function workingset_activation invokes folio_memcg_rcu.
16. function folio_memcg_rcu invokes rcu_read_lock_held.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_read_lock_held.

————————————————————————————————These prompts belong to Node: 【print_hex_dump】at below.—————————————————————————————————— 
# Now I have a kernel internal function print_hex_dump, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: print_hex_dump in the linux kenrel source code.
## The print_hex_dump function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes print_trailer.
12. function print_trailer invokes print_section.
13. function print_section invokes print_hex_dump.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: print_hex_dump.

————————————————————————————————These prompts belong to Node: 【is_valid_gup_args】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_valid_gup_args, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_valid_gup_args in the linux kenrel source code.
## The is_valid_gup_args function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes pin_user_pages_remote.
7. function pin_user_pages_remote invokes is_valid_gup_args.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_valid_gup_args.

————————————————————————————————These prompts belong to Node: 【mmap_assert_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmap_assert_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmap_assert_locked in the linux kenrel source code.
## The mmap_assert_locked function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes mmap_assert_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmap_assert_locked.

————————————————————————————————These prompts belong to Node: 【memalloc_pin_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_pin_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_pin_save in the linux kenrel source code.
## The memalloc_pin_save function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes pin_user_pages_remote.
7. function pin_user_pages_remote invokes __gup_longterm_locked.
8. function __gup_longterm_locked invokes memalloc_pin_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_pin_save.

————————————————————————————————These prompts belong to Node: 【memalloc_pin_restore】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_pin_restore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_pin_restore in the linux kenrel source code.
## The memalloc_pin_restore function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes pin_user_pages_remote.
7. function pin_user_pages_remote invokes __gup_longterm_locked.
8. function __gup_longterm_locked invokes memalloc_pin_restore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_pin_restore.

————————————————————————————————These prompts belong to Node: 【migrate_device_coherent_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function migrate_device_coherent_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: migrate_device_coherent_page in the linux kenrel source code.
## The migrate_device_coherent_page function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes pin_user_pages_remote.
7. function pin_user_pages_remote invokes __gup_longterm_locked.
8. function __gup_longterm_locked invokes check_and_migrate_movable_pages.
9. function check_and_migrate_movable_pages invokes migrate_longterm_unpinnable_pages.
10. function migrate_longterm_unpinnable_pages invokes migrate_device_coherent_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: migrate_device_coherent_page.

————————————————————————————————These prompts belong to Node: 【sanity_check_pinned_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function sanity_check_pinned_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sanity_check_pinned_pages in the linux kenrel source code.
## The sanity_check_pinned_pages function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes unpin_user_page.
13. function unpin_user_page invokes sanity_check_pinned_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sanity_check_pinned_pages.

————————————————————————————————These prompts belong to Node: 【is_zero_pfn】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_zero_pfn, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_zero_pfn in the linux kenrel source code.
## The is_zero_pfn function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes get_gate_page.
8. function get_gate_page invokes try_grab_page.
9. function try_grab_page invokes is_zero_page.
10. function is_zero_page invokes is_zero_pfn.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_zero_pfn.

————————————————————————————————These prompts belong to Node: 【in_gate_area】at below.—————————————————————————————————— 
# Now I have a kernel internal function in_gate_area, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: in_gate_area in the linux kenrel source code.
## The in_gate_area function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes in_gate_area.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: in_gate_area.

————————————————————————————————These prompts belong to Node: 【flush_anon_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_anon_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_anon_page in the linux kenrel source code.
## The flush_anon_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes flush_anon_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_anon_page.

————————————————————————————————These prompts belong to Node: 【flush_dcache_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_dcache_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_dcache_page in the linux kenrel source code.
## The flush_dcache_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes flush_dcache_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_dcache_page.

————————————————————————————————These prompts belong to Node: 【rb_erase】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_erase, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_erase in the linux kenrel source code.
## The rb_erase function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_erase.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_erase.

————————————————————————————————These prompts belong to Node: 【vsnprintf】at below.—————————————————————————————————— 
# Now I have a kernel internal function vsnprintf, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vsnprintf in the linux kenrel source code.
## The vsnprintf function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes slab_pad_check.
12. function slab_pad_check invokes slab_err.
13. function slab_err invokes vsnprintf.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vsnprintf.

————————————————————————————————These prompts belong to Node: 【rb_insert_color】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_insert_color, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_insert_color in the linux kenrel source code.
## The rb_insert_color function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_insert_color.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_insert_color.

————————————————————————————————These prompts belong to Node: 【__bitmap_weight】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_weight, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_weight in the linux kenrel source code.
## The __bitmap_weight function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes interleave_nid.
15. function interleave_nid invokes __nodes_weight.
16. function __nodes_weight invokes __bitmap_weight.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_weight.

————————————————————————————————These prompts belong to Node: 【_find_last_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_last_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_last_bit in the linux kenrel source code.
## The _find_last_bit function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes find_last_bit.
7. function find_last_bit invokes _find_last_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_last_bit.

————————————————————————————————These prompts belong to Node: 【kmemleak_free_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_free_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_free_percpu in the linux kenrel source code.
## The kmemleak_free_percpu function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes kmemleak_free_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_free_percpu.

————————————————————————————————These prompts belong to Node: 【pcpu_memcg_free_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_memcg_free_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_memcg_free_hook in the linux kenrel source code.
## The pcpu_memcg_free_hook function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_memcg_free_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_memcg_free_hook.

————————————————————————————————These prompts belong to Node: 【pcpu_should_reclaim_chunk】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_should_reclaim_chunk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_should_reclaim_chunk in the linux kenrel source code.
## The pcpu_should_reclaim_chunk function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_should_reclaim_chunk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_should_reclaim_chunk.

————————————————————————————————These prompts belong to Node: 【pcpu_stats_chunk_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_stats_chunk_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_stats_chunk_alloc in the linux kenrel source code.
## The pcpu_stats_chunk_alloc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_create_chunk.
6. function pcpu_create_chunk invokes pcpu_stats_chunk_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_stats_chunk_alloc.

————————————————————————————————These prompts belong to Node: 【pcpu_chunk_nr_blocks】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_chunk_nr_blocks, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_chunk_nr_blocks in the linux kenrel source code.
## The pcpu_chunk_nr_blocks function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_chunk_refresh_hint.
7. function pcpu_chunk_refresh_hint invokes pcpu_next_md_free_region.
8. function pcpu_next_md_free_region invokes pcpu_chunk_nr_blocks.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_chunk_nr_blocks.

————————————————————————————————These prompts belong to Node: 【pcpu_init_md_block】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_init_md_block, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_init_md_block in the linux kenrel source code.
## The pcpu_init_md_block function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_create_chunk.
6. function pcpu_create_chunk invokes pcpu_alloc_chunk.
7. function pcpu_alloc_chunk invokes pcpu_init_md_blocks.
8. function pcpu_init_md_blocks invokes pcpu_init_md_block.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_init_md_block.

————————————————————————————————These prompts belong to Node: 【pcpu_nr_pages_to_map_bits】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_nr_pages_to_map_bits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_nr_pages_to_map_bits in the linux kenrel source code.
## The pcpu_nr_pages_to_map_bits function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_chunk_map_bits.
6. function pcpu_chunk_map_bits invokes pcpu_nr_pages_to_map_bits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_nr_pages_to_map_bits.

————————————————————————————————These prompts belong to Node: 【__bitmap_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_set in the linux kenrel source code.
## The __bitmap_set function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_alloc_area.
6. function pcpu_alloc_area invokes __bitmap_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_set.

————————————————————————————————These prompts belong to Node: 【pcpu_update_empty_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_update_empty_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_update_empty_pages in the linux kenrel source code.
## The pcpu_update_empty_pages function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_update_empty_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_update_empty_pages.

————————————————————————————————These prompts belong to Node: 【flush_cache_vmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_cache_vmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_cache_vmap in the linux kenrel source code.
## The flush_cache_vmap function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_populate_chunk.
6. function pcpu_populate_chunk invokes pcpu_post_map_flush.
7. function pcpu_post_map_flush invokes flush_cache_vmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_cache_vmap.

————————————————————————————————These prompts belong to Node: 【pcpu_unit_page_offset】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_unit_page_offset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_unit_page_offset in the linux kenrel source code.
## The pcpu_unit_page_offset function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_chunk_addr.
6. function pcpu_chunk_addr invokes pcpu_unit_page_offset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_unit_page_offset.

————————————————————————————————These prompts belong to Node: 【pcpu_page_idx】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_page_idx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_page_idx in the linux kenrel source code.
## The pcpu_page_idx function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_populate_chunk.
6. function pcpu_populate_chunk invokes pcpu_alloc_pages.
7. function pcpu_alloc_pages invokes pcpu_page_idx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_page_idx.

————————————————————————————————These prompts belong to Node: 【__pcpu_map_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pcpu_map_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pcpu_map_pages in the linux kenrel source code.
## The __pcpu_map_pages function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_populate_chunk.
6. function pcpu_populate_chunk invokes pcpu_map_pages.
7. function pcpu_map_pages invokes __pcpu_map_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pcpu_map_pages.

————————————————————————————————These prompts belong to Node: 【pcpu_set_page_chunk】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_set_page_chunk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_set_page_chunk in the linux kenrel source code.
## The pcpu_set_page_chunk function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_populate_chunk.
6. function pcpu_populate_chunk invokes pcpu_map_pages.
7. function pcpu_map_pages invokes pcpu_set_page_chunk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_set_page_chunk.

————————————————————————————————These prompts belong to Node: 【flush_tlb_kernel_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_tlb_kernel_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_tlb_kernel_range in the linux kenrel source code.
## The flush_tlb_kernel_range function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes flush_tlb_kernel_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_tlb_kernel_range.

————————————————————————————————These prompts belong to Node: 【cpu_to_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpu_to_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpu_to_node in the linux kenrel source code.
## The cpu_to_node function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_populate_chunk.
6. function pcpu_populate_chunk invokes pcpu_alloc_pages.
7. function pcpu_alloc_pages invokes cpu_to_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpu_to_node.

————————————————————————————————These prompts belong to Node: 【_find_next_zero_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_next_zero_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_next_zero_bit in the linux kenrel source code.
## The _find_next_zero_bit function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_find_block_fit.
6. function pcpu_find_block_fit invokes pcpu_is_populated.
7. function pcpu_is_populated invokes find_next_zero_bit.
8. function find_next_zero_bit invokes _find_next_zero_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_next_zero_bit.

————————————————————————————————These prompts belong to Node: 【__pcpu_size_to_slot】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pcpu_size_to_slot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pcpu_size_to_slot in the linux kenrel source code.
## The __pcpu_size_to_slot function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_chunk_slot.
6. function pcpu_chunk_slot invokes pcpu_size_to_slot.
7. function pcpu_size_to_slot invokes __pcpu_size_to_slot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pcpu_size_to_slot.

————————————————————————————————These prompts belong to Node: 【__bitmap_clear】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_clear, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_clear in the linux kenrel source code.
## The __bitmap_clear function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes __bitmap_clear.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_clear.

————————————————————————————————These prompts belong to Node: 【pcpu_stats_area_dealloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_stats_area_dealloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_stats_area_dealloc in the linux kenrel source code.
## The pcpu_stats_area_dealloc function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_stats_area_dealloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_stats_area_dealloc.

————————————————————————————————These prompts belong to Node: 【pcpu_off_to_block_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_off_to_block_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_off_to_block_index in the linux kenrel source code.
## The pcpu_off_to_block_index function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_off_to_block_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_off_to_block_index.

————————————————————————————————These prompts belong to Node: 【pcpu_off_to_block_off】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_off_to_block_off, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_off_to_block_off in the linux kenrel source code.
## The pcpu_off_to_block_off function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_off_to_block_off.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_off_to_block_off.

————————————————————————————————These prompts belong to Node: 【pcpu_index_alloc_map】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_index_alloc_map, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_index_alloc_map in the linux kenrel source code.
## The pcpu_index_alloc_map function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_index_alloc_map.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_index_alloc_map.

————————————————————————————————These prompts belong to Node: 【pcpu_block_update】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_block_update, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_block_update in the linux kenrel source code.
## The pcpu_block_update function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_block_update.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_block_update.

————————————————————————————————These prompts belong to Node: 【pcpu_block_off_to_off】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_block_off_to_off, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_block_off_to_off in the linux kenrel source code.
## The pcpu_block_off_to_off function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_free_area.
5. function pcpu_free_area invokes pcpu_block_update_hint_free.
6. function pcpu_block_update_hint_free invokes pcpu_block_off_to_off.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_block_off_to_off.

————————————————————————————————These prompts belong to Node: 【pcpu_addr_in_chunk】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_addr_in_chunk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_addr_in_chunk in the linux kenrel source code.
## The pcpu_addr_in_chunk function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_chunk_addr_search.
5. function pcpu_chunk_addr_search invokes pcpu_addr_in_chunk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_addr_in_chunk.

————————————————————————————————These prompts belong to Node: 【pcpu_addr_to_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_addr_to_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_addr_to_page in the linux kenrel source code.
## The pcpu_addr_to_page function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_chunk_addr_search.
5. function pcpu_chunk_addr_search invokes pcpu_addr_to_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_addr_to_page.

————————————————————————————————These prompts belong to Node: 【pcpu_get_page_chunk】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_get_page_chunk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_get_page_chunk in the linux kenrel source code.
## The pcpu_get_page_chunk function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes free_percpu.
4. function free_percpu invokes pcpu_chunk_addr_search.
5. function pcpu_chunk_addr_search invokes pcpu_get_page_chunk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_get_page_chunk.

————————————————————————————————These prompts belong to Node: 【current_gfp_context】at below.—————————————————————————————————— 
# Now I have a kernel internal function current_gfp_context, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: current_gfp_context in the linux kenrel source code.
## The current_gfp_context function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes current_gfp_context.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: current_gfp_context.

————————————————————————————————These prompts belong to Node: 【is_power_of_】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_power_of_, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_power_of_ in the linux kenrel source code.
## The is_power_of_ function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes is_power_of_.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_power_of_.

————————————————————————————————These prompts belong to Node: 【pcpu_memcg_pre_alloc_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_memcg_pre_alloc_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_memcg_pre_alloc_hook in the linux kenrel source code.
## The pcpu_memcg_pre_alloc_hook function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_memcg_pre_alloc_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_memcg_pre_alloc_hook.

————————————————————————————————These prompts belong to Node: 【pcpu_memcg_post_alloc_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_memcg_post_alloc_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_memcg_post_alloc_hook in the linux kenrel source code.
## The pcpu_memcg_post_alloc_hook function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_memcg_post_alloc_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_memcg_post_alloc_hook.

————————————————————————————————These prompts belong to Node: 【pcpu_stats_area_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_stats_area_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_stats_area_alloc in the linux kenrel source code.
## The pcpu_stats_area_alloc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_stats_area_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_stats_area_alloc.

————————————————————————————————These prompts belong to Node: 【kmemleak_alloc_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_alloc_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_alloc_percpu in the linux kenrel source code.
## The kmemleak_alloc_percpu function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes kmemleak_alloc_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_alloc_percpu.

————————————————————————————————These prompts belong to Node: 【pcpu_region_overlap】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_region_overlap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_region_overlap in the linux kenrel source code.
## The pcpu_region_overlap function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_alloc_area.
6. function pcpu_alloc_area invokes pcpu_block_update_hint_alloc.
7. function pcpu_block_update_hint_alloc invokes pcpu_region_overlap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_region_overlap.

————————————————————————————————These prompts belong to Node: 【pcpu_check_block_hint】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_check_block_hint, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_check_block_hint in the linux kenrel source code.
## The pcpu_check_block_hint function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_find_block_fit.
6. function pcpu_find_block_fit invokes pcpu_check_block_hint.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_check_block_hint.

————————————————————————————————These prompts belong to Node: 【pcpu_next_hint】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcpu_next_hint, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcpu_next_hint in the linux kenrel source code.
## The pcpu_next_hint function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes __alloc_percpu.
4. function __alloc_percpu invokes pcpu_alloc.
5. function pcpu_alloc invokes pcpu_find_block_fit.
6. function pcpu_find_block_fit invokes pcpu_next_hint.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcpu_next_hint.

————————————————————————————————These prompts belong to Node: 【__pti_set_user_pgtbl】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pti_set_user_pgtbl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pti_set_user_pgtbl in the linux kenrel source code.
## The __pti_set_user_pgtbl function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes pgd_none_or_clear_bad.
8. function pgd_none_or_clear_bad invokes pgd_clear_bad.
9. function pgd_clear_bad invokes native_pgd_clear.
10. function native_pgd_clear invokes native_set_pgd.
11. function native_set_pgd invokes pti_set_user_pgtbl.
12. function pti_set_user_pgtbl invokes __pti_set_user_pgtbl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pti_set_user_pgtbl.

————————————————————————————————These prompts belong to Node: 【vm_area_page_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_page_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_page_order in the linux kenrel source code.
## The vm_area_page_order function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes vm_area_page_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_page_order.

————————————————————————————————These prompts belong to Node: 【get_vm_area_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_vm_area_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_vm_area_size in the linux kenrel source code.
## The get_vm_area_size function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes get_vm_area_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_vm_area_size.

————————————————————————————————These prompts belong to Node: 【debug_check_no_locks_freed】at below.—————————————————————————————————— 
# Now I have a kernel internal function debug_check_no_locks_freed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: debug_check_no_locks_freed in the linux kenrel source code.
## The debug_check_no_locks_freed function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes debug_check_no_locks_freed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: debug_check_no_locks_freed.

————————————————————————————————These prompts belong to Node: 【debug_check_no_obj_freed】at below.—————————————————————————————————— 
# Now I have a kernel internal function debug_check_no_obj_freed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: debug_check_no_obj_freed in the linux kenrel source code.
## The debug_check_no_obj_freed function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes debug_check_no_obj_freed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: debug_check_no_obj_freed.

————————————————————————————————These prompts belong to Node: 【flush_cache_vunmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_cache_vunmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_cache_vunmap in the linux kenrel source code.
## The flush_cache_vunmap function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes flush_cache_vunmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_cache_vunmap.

————————————————————————————————These prompts belong to Node: 【debug_pagealloc_enabled_static】at below.—————————————————————————————————— 
# Now I have a kernel internal function debug_pagealloc_enabled_static, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: debug_pagealloc_enabled_static in the linux kenrel source code.
## The debug_pagealloc_enabled_static function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes debug_pagealloc_enabled_static.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: debug_pagealloc_enabled_static.

————————————————————————————————These prompts belong to Node: 【lazy_max_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function lazy_max_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lazy_max_pages in the linux kenrel source code.
## The lazy_max_pages function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes lazy_max_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lazy_max_pages.

————————————————————————————————These prompts belong to Node: 【__rb_change_child】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rb_change_child, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rb_change_child in the linux kenrel source code.
## The __rb_change_child function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes __rb_change_child.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rb_change_child.

————————————————————————————————These prompts belong to Node: 【rb_set_parent】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_set_parent, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_set_parent in the linux kenrel source code.
## The rb_set_parent function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_set_parent.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_set_parent.

————————————————————————————————These prompts belong to Node: 【rb_set_parent_color】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_set_parent_color, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_set_parent_color in the linux kenrel source code.
## The rb_set_parent_color function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_set_parent_color.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_set_parent_color.

————————————————————————————————These prompts belong to Node: 【rb_link_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_link_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_link_node in the linux kenrel source code.
## The rb_link_node function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes free_vmap_area_noflush.
9. function free_vmap_area_noflush invokes rb_link_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_link_node.

————————————————————————————————These prompts belong to Node: 【__cond_resched_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __cond_resched_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __cond_resched_lock in the linux kenrel source code.
## The __cond_resched_lock function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes __purge_vmap_area_lazy.
9. function __purge_vmap_area_lazy invokes __cond_resched_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __cond_resched_lock.

————————————————————————————————These prompts belong to Node: 【free_vmap_area_rb_augment_cb_compute_max】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_vmap_area_rb_augment_cb_compute_max, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_vmap_area_rb_augment_cb_compute_max in the linux kenrel source code.
## The free_vmap_area_rb_augment_cb_compute_max function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes __purge_vmap_area_lazy.
9. function __purge_vmap_area_lazy invokes free_vmap_area_rb_augment_cb_propagate.
10. function free_vmap_area_rb_augment_cb_propagate invokes free_vmap_area_rb_augment_cb_compute_max.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_vmap_area_rb_augment_cb_compute_max.

————————————————————————————————These prompts belong to Node: 【list_replace】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_replace, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_replace in the linux kenrel source code.
## The list_replace function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes __purge_vmap_area_lazy.
9. function __purge_vmap_area_lazy invokes list_replace_init.
10. function list_replace_init invokes list_replace.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_replace.

————————————————————————————————These prompts belong to Node: 【kmsan_vunmap_range_noflush】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_vunmap_range_noflush, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_vunmap_range_noflush in the linux kenrel source code.
## The kmsan_vunmap_range_noflush function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes kmsan_vunmap_range_noflush.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_vunmap_range_noflush.

————————————————————————————————These prompts belong to Node: 【pgd_offset_pgd】at below.—————————————————————————————————— 
# Now I have a kernel internal function pgd_offset_pgd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pgd_offset_pgd in the linux kenrel source code.
## The pgd_offset_pgd function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes pgd_offset_pgd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pgd_offset_pgd.

————————————————————————————————These prompts belong to Node: 【p4d_clear_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function p4d_clear_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: p4d_clear_huge in the linux kenrel source code.
## The p4d_clear_huge function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes p4d_clear_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: p4d_clear_huge.

————————————————————————————————These prompts belong to Node: 【pud_clear_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_clear_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_clear_huge in the linux kenrel source code.
## The pud_clear_huge function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes pud_clear_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_clear_huge.

————————————————————————————————These prompts belong to Node: 【pmd_clear_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_clear_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_clear_huge in the linux kenrel source code.
## The pmd_clear_huge function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes pmd_clear_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_clear_huge.

————————————————————————————————These prompts belong to Node: 【pte_none】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_none, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_none in the linux kenrel source code.
## The pte_none function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes vunmap_pte_range.
14. function vunmap_pte_range invokes pte_none.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_none.

————————————————————————————————These prompts belong to Node: 【native_pte_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_pte_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_pte_val in the linux kenrel source code.
## The native_pte_val function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes vunmap_pte_range.
14. function vunmap_pte_range invokes pte_present.
15. function pte_present invokes pte_flags.
16. function pte_flags invokes native_pte_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_pte_val.

————————————————————————————————These prompts belong to Node: 【page_table_check_pte_clear】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_table_check_pte_clear, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_table_check_pte_clear in the linux kenrel source code.
## The page_table_check_pte_clear function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes vunmap_pte_range.
14. function vunmap_pte_range invokes ptep_get_and_clear.
15. function ptep_get_and_clear invokes page_table_check_pte_clear.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_table_check_pte_clear.

————————————————————————————————These prompts belong to Node: 【native_make_pte】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_make_pte, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_make_pte in the linux kenrel source code.
## The native_make_pte function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes vunmap_pte_range.
14. function vunmap_pte_range invokes ptep_get_and_clear.
15. function ptep_get_and_clear invokes native_ptep_get_and_clear.
16. function native_ptep_get_and_clear invokes native_make_pte.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_make_pte.

————————————————————————————————These prompts belong to Node: 【pte_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_index in the linux kenrel source code.
## The pte_index function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes vunmap_pte_range.
14. function vunmap_pte_range invokes pte_offset_kernel.
15. function pte_offset_kernel invokes pte_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_index.

————————————————————————————————These prompts belong to Node: 【pmd_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_index in the linux kenrel source code.
## The pmd_index function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes vunmap_pmd_range.
13. function vunmap_pmd_range invokes pmd_offset.
14. function pmd_offset invokes pmd_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_index.

————————————————————————————————These prompts belong to Node: 【native_pud_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_pud_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_pud_val in the linux kenrel source code.
## The native_pud_val function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes pud_bad.
13. function pud_bad invokes pud_flags.
14. function pud_flags invokes native_pud_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_pud_val.

————————————————————————————————These prompts belong to Node: 【pud_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_index in the linux kenrel source code.
## The pud_index function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes vunmap_pud_range.
12. function vunmap_pud_range invokes pud_offset.
13. function pud_offset invokes pud_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_index.

————————————————————————————————These prompts belong to Node: 【native_p4d_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_p4d_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_p4d_val in the linux kenrel source code.
## The native_p4d_val function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes p4d_bad.
12. function p4d_bad invokes p4d_flags.
13. function p4d_flags invokes native_p4d_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_p4d_val.

————————————————————————————————These prompts belong to Node: 【p4d_pfn_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function p4d_pfn_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: p4d_pfn_mask in the linux kenrel source code.
## The p4d_pfn_mask function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes p4d_bad.
12. function p4d_bad invokes p4d_flags.
13. function p4d_flags invokes p4d_flags_mask.
14. function p4d_flags_mask invokes p4d_pfn_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: p4d_pfn_mask.

————————————————————————————————These prompts belong to Node: 【p4d_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function p4d_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: p4d_index in the linux kenrel source code.
## The p4d_index function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes vunmap_p4d_range.
11. function vunmap_p4d_range invokes p4d_offset.
12. function p4d_offset invokes p4d_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: p4d_index.

————————————————————————————————These prompts belong to Node: 【native_pgd_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_pgd_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_pgd_val in the linux kenrel source code.
## The native_pgd_val function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes remove_vm_area.
7. function remove_vm_area invokes free_unmap_vmap_area.
8. function free_unmap_vmap_area invokes vunmap_range_noflush.
9. function vunmap_range_noflush invokes __vunmap_range_noflush.
10. function __vunmap_range_noflush invokes pgd_bad.
11. function pgd_bad invokes pgd_flags.
12. function pgd_flags invokes native_pgd_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_pgd_val.

————————————————————————————————These prompts belong to Node: 【ptep_get】at below.—————————————————————————————————— 
# Now I have a kernel internal function ptep_get, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ptep_get in the linux kenrel source code.
## The ptep_get function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes ptep_get.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ptep_get.

————————————————————————————————These prompts belong to Node: 【__pte_needs_invert】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pte_needs_invert, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pte_needs_invert in the linux kenrel source code.
## The __pte_needs_invert function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes set_ptes.
18. function set_ptes invokes pte_next_pfn.
19. function pte_next_pfn invokes __pte_needs_invert.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pte_needs_invert.

————————————————————————————————These prompts belong to Node: 【arch_vmap_pmd_supported】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_pmd_supported, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_pmd_supported in the linux kenrel source code.
## The arch_vmap_pmd_supported function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes arch_vmap_pmd_supported.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_pmd_supported.

————————————————————————————————These prompts belong to Node: 【arch_vmap_pte_supported_shift】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_pte_supported_shift, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_pte_supported_shift in the linux kenrel source code.
## The arch_vmap_pte_supported_shift function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes arch_vmap_pte_supported_shift.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_pte_supported_shift.

————————————————————————————————These prompts belong to Node: 【schedule_timeout_uninterruptible】at below.—————————————————————————————————— 
# Now I have a kernel internal function schedule_timeout_uninterruptible, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: schedule_timeout_uninterruptible in the linux kenrel source code.
## The schedule_timeout_uninterruptible function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes schedule_timeout_uninterruptible.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: schedule_timeout_uninterruptible.

————————————————————————————————These prompts belong to Node: 【arch_vmap_pgprot_tagged】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_pgprot_tagged, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_pgprot_tagged in the linux kenrel source code.
## The arch_vmap_pgprot_tagged function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes arch_vmap_pgprot_tagged.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_pgprot_tagged.

————————————————————————————————These prompts belong to Node: 【want_init_on_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function want_init_on_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: want_init_on_free in the linux kenrel source code.
## The want_init_on_free function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes want_init_on_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: want_init_on_free.

————————————————————————————————These prompts belong to Node: 【want_init_on_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function want_init_on_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: want_init_on_alloc in the linux kenrel source code.
## The want_init_on_alloc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes want_init_on_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: want_init_on_alloc.

————————————————————————————————These prompts belong to Node: 【clear_vm_uninitialized_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function clear_vm_uninitialized_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: clear_vm_uninitialized_flag in the linux kenrel source code.
## The clear_vm_uninitialized_flag function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes clear_vm_uninitialized_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: clear_vm_uninitialized_flag.

————————————————————————————————These prompts belong to Node: 【kmemleak_vmalloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_vmalloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_vmalloc in the linux kenrel source code.
## The kmemleak_vmalloc function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes kmemleak_vmalloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_vmalloc.

————————————————————————————————These prompts belong to Node: 【set_vm_area_page_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_vm_area_page_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_vm_area_page_order in the linux kenrel source code.
## The set_vm_area_page_order function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes set_vm_area_page_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_vm_area_page_order.

————————————————————————————————These prompts belong to Node: 【mod_memcg_page_state】at below.—————————————————————————————————— 
# Now I have a kernel internal function mod_memcg_page_state, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mod_memcg_page_state in the linux kenrel source code.
## The mod_memcg_page_state function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes mod_memcg_page_state.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mod_memcg_page_state.

————————————————————————————————These prompts belong to Node: 【memalloc_nofs_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_nofs_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_nofs_save in the linux kenrel source code.
## The memalloc_nofs_save function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes memalloc_nofs_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_nofs_save.

————————————————————————————————These prompts belong to Node: 【memalloc_noio_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_noio_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_noio_save in the linux kenrel source code.
## The memalloc_noio_save function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes memalloc_noio_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_noio_save.

————————————————————————————————These prompts belong to Node: 【memalloc_nofs_restore】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_nofs_restore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_nofs_restore in the linux kenrel source code.
## The memalloc_nofs_restore function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes memalloc_nofs_restore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_nofs_restore.

————————————————————————————————These prompts belong to Node: 【memalloc_noio_restore】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_noio_restore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_noio_restore in the linux kenrel source code.
## The memalloc_noio_restore function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes memalloc_noio_restore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_noio_restore.

————————————————————————————————These prompts belong to Node: 【set_area_direct_map】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_area_direct_map, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_area_direct_map in the linux kenrel source code.
## The set_area_direct_map function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes set_area_direct_map.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_area_direct_map.

————————————————————————————————These prompts belong to Node: 【xa_find_after】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_find_after, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_find_after in the linux kenrel source code.
## The xa_find_after function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes xa_find_after.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_find_after.

————————————————————————————————These prompts belong to Node: 【addr_to_vb_idx】at below.—————————————————————————————————— 
# Now I have a kernel internal function addr_to_vb_idx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: addr_to_vb_idx in the linux kenrel source code.
## The addr_to_vb_idx function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes free_purged_blocks.
9. function free_purged_blocks invokes free_vmap_block.
10. function free_vmap_block invokes addr_to_vb_idx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: addr_to_vb_idx.

————————————————————————————————These prompts belong to Node: 【xa_erase】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_erase, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_erase in the linux kenrel source code.
## The xa_erase function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes free_purged_blocks.
9. function free_purged_blocks invokes free_vmap_block.
10. function free_vmap_block invokes xa_erase.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_erase.

————————————————————————————————These prompts belong to Node: 【kvfree_call_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kvfree_call_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kvfree_call_rcu in the linux kenrel source code.
## The kvfree_call_rcu function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vm_reset_perms.
7. function vm_reset_perms invokes _vm_unmap_aliases.
8. function _vm_unmap_aliases invokes free_purged_blocks.
9. function free_purged_blocks invokes free_vmap_block.
10. function free_vmap_block invokes kvfree_call_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kvfree_call_rcu.

————————————————————————————————These prompts belong to Node: 【llist_add_batch】at below.—————————————————————————————————— 
# Now I have a kernel internal function llist_add_batch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: llist_add_batch in the linux kenrel source code.
## The llist_add_batch function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes exit_swap_address_space.
4. function exit_swap_address_space invokes kvfree.
5. function kvfree invokes vfree.
6. function vfree invokes vfree_atomic.
7. function vfree_atomic invokes llist_add.
8. function llist_add invokes llist_add_batch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: llist_add_batch.

————————————————————————————————These prompts belong to Node: 【kmsan_vmap_pages_range_noflush】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_vmap_pages_range_noflush, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_vmap_pages_range_noflush in the linux kenrel source code.
## The kmsan_vmap_pages_range_noflush function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes kmsan_vmap_pages_range_noflush.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_vmap_pages_range_noflush.

————————————————————————————————These prompts belong to Node: 【arch_vmap_pte_range_map_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_pte_range_map_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_pte_range_map_size in the linux kenrel source code.
## The arch_vmap_pte_range_map_size function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes arch_vmap_pte_range_map_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_pte_range_map_size.

————————————————————————————————These prompts belong to Node: 【page_table_check_ptes_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_table_check_ptes_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_table_check_ptes_set in the linux kenrel source code.
## The page_table_check_ptes_set function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes set_ptes.
18. function set_ptes invokes page_table_check_ptes_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_table_check_ptes_set.

————————————————————————————————These prompts belong to Node: 【native_set_pte】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_set_pte, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_set_pte in the linux kenrel source code.
## The native_set_pte function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes set_ptes.
18. function set_ptes invokes native_set_pte.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_set_pte.

————————————————————————————————These prompts belong to Node: 【massage_pgprot】at below.—————————————————————————————————— 
# Now I have a kernel internal function massage_pgprot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: massage_pgprot in the linux kenrel source code.
## The massage_pgprot function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_pte_range.
17. function vmap_pte_range invokes pfn_pte.
18. function pfn_pte invokes check_pgprot.
19. function check_pgprot invokes massage_pgprot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: massage_pgprot.

————————————————————————————————These prompts belong to Node: 【pmd_free_pte_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_free_pte_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_free_pte_page in the linux kenrel source code.
## The pmd_free_pte_page function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_try_huge_pmd.
17. function vmap_try_huge_pmd invokes pmd_free_pte_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_free_pte_page.

————————————————————————————————These prompts belong to Node: 【pmd_set_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_set_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_set_huge in the linux kenrel source code.
## The pmd_set_huge function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_pmd_range.
16. function vmap_pmd_range invokes vmap_try_huge_pmd.
17. function vmap_try_huge_pmd invokes pmd_set_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_set_huge.

————————————————————————————————These prompts belong to Node: 【arch_vmap_pud_supported】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_pud_supported, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_pud_supported in the linux kenrel source code.
## The arch_vmap_pud_supported function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_try_huge_pud.
16. function vmap_try_huge_pud invokes arch_vmap_pud_supported.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_pud_supported.

————————————————————————————————These prompts belong to Node: 【pud_free_pmd_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_free_pmd_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_free_pmd_page in the linux kenrel source code.
## The pud_free_pmd_page function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_try_huge_pud.
16. function vmap_try_huge_pud invokes pud_free_pmd_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_free_pmd_page.

————————————————————————————————These prompts belong to Node: 【pud_set_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_set_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_set_huge in the linux kenrel source code.
## The pud_set_huge function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_pud_range.
15. function vmap_pud_range invokes vmap_try_huge_pud.
16. function vmap_try_huge_pud invokes pud_set_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_set_huge.

————————————————————————————————These prompts belong to Node: 【arch_vmap_p4d_supported】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_vmap_p4d_supported, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_vmap_p4d_supported in the linux kenrel source code.
## The arch_vmap_p4d_supported function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_try_huge_p4d.
15. function vmap_try_huge_p4d invokes arch_vmap_p4d_supported.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_vmap_p4d_supported.

————————————————————————————————These prompts belong to Node: 【p4d_free_pud_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function p4d_free_pud_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: p4d_free_pud_page in the linux kenrel source code.
## The p4d_free_pud_page function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_try_huge_p4d.
15. function vmap_try_huge_p4d invokes p4d_free_pud_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: p4d_free_pud_page.

————————————————————————————————These prompts belong to Node: 【p4d_set_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function p4d_set_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: p4d_set_huge in the linux kenrel source code.
## The p4d_set_huge function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_range_noflush.
13. function vmap_range_noflush invokes vmap_p4d_range.
14. function vmap_p4d_range invokes vmap_try_huge_p4d.
15. function vmap_try_huge_p4d invokes p4d_set_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: p4d_set_huge.

————————————————————————————————These prompts belong to Node: 【pfn_to_section_nr】at below.—————————————————————————————————— 
# Now I have a kernel internal function pfn_to_section_nr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pfn_to_section_nr in the linux kenrel source code.
## The pfn_to_section_nr function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_small_pages_range_noflush.
13. function vmap_small_pages_range_noflush invokes vmap_pages_p4d_range.
14. function vmap_pages_p4d_range invokes vmap_pages_pud_range.
15. function vmap_pages_pud_range invokes vmap_pages_pmd_range.
16. function vmap_pages_pmd_range invokes vmap_pages_pte_range.
17. function vmap_pages_pte_range invokes pfn_valid.
18. function pfn_valid invokes pfn_to_section_nr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pfn_to_section_nr.

————————————————————————————————These prompts belong to Node: 【valid_section】at below.—————————————————————————————————— 
# Now I have a kernel internal function valid_section, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: valid_section in the linux kenrel source code.
## The valid_section function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_small_pages_range_noflush.
13. function vmap_small_pages_range_noflush invokes vmap_pages_p4d_range.
14. function vmap_pages_p4d_range invokes vmap_pages_pud_range.
15. function vmap_pages_pud_range invokes vmap_pages_pmd_range.
16. function vmap_pages_pmd_range invokes vmap_pages_pte_range.
17. function vmap_pages_pte_range invokes pfn_valid.
18. function pfn_valid invokes valid_section.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: valid_section.

————————————————————————————————These prompts belong to Node: 【early_section】at below.—————————————————————————————————— 
# Now I have a kernel internal function early_section, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: early_section in the linux kenrel source code.
## The early_section function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_small_pages_range_noflush.
13. function vmap_small_pages_range_noflush invokes vmap_pages_p4d_range.
14. function vmap_pages_p4d_range invokes vmap_pages_pud_range.
15. function vmap_pages_pud_range invokes vmap_pages_pmd_range.
16. function vmap_pages_pmd_range invokes vmap_pages_pte_range.
17. function vmap_pages_pte_range invokes pfn_valid.
18. function pfn_valid invokes early_section.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: early_section.

————————————————————————————————These prompts belong to Node: 【subsection_map_index】at below.—————————————————————————————————— 
# Now I have a kernel internal function subsection_map_index, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: subsection_map_index in the linux kenrel source code.
## The subsection_map_index function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_small_pages_range_noflush.
13. function vmap_small_pages_range_noflush invokes vmap_pages_p4d_range.
14. function vmap_pages_p4d_range invokes vmap_pages_pud_range.
15. function vmap_pages_pud_range invokes vmap_pages_pmd_range.
16. function vmap_pages_pmd_range invokes vmap_pages_pte_range.
17. function vmap_pages_pte_range invokes pfn_valid.
18. function pfn_valid invokes pfn_section_valid.
19. function pfn_section_valid invokes subsection_map_index.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: subsection_map_index.

————————————————————————————————These prompts belong to Node: 【__nr_to_section】at below.—————————————————————————————————— 
# Now I have a kernel internal function __nr_to_section, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __nr_to_section in the linux kenrel source code.
## The __nr_to_section function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __vmalloc_area_node.
9. function __vmalloc_area_node invokes vmap_pages_range.
10. function vmap_pages_range invokes vmap_pages_range_noflush.
11. function vmap_pages_range_noflush invokes __vmap_pages_range_noflush.
12. function __vmap_pages_range_noflush invokes vmap_small_pages_range_noflush.
13. function vmap_small_pages_range_noflush invokes vmap_pages_p4d_range.
14. function vmap_pages_p4d_range invokes vmap_pages_pud_range.
15. function vmap_pages_pud_range invokes vmap_pages_pmd_range.
16. function vmap_pages_pmd_range invokes vmap_pages_pte_range.
17. function vmap_pages_pte_range invokes pfn_valid.
18. function pfn_valid invokes __pfn_to_section.
19. function __pfn_to_section invokes __nr_to_section.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __nr_to_section.

————————————————————————————————These prompts belong to Node: 【setup_vmalloc_vm_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function setup_vmalloc_vm_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: setup_vmalloc_vm_locked in the linux kenrel source code.
## The setup_vmalloc_vm_locked function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __get_vm_area_node.
9. function __get_vm_area_node invokes setup_vmalloc_vm.
10. function setup_vmalloc_vm invokes setup_vmalloc_vm_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: setup_vmalloc_vm_locked.

————————————————————————————————These prompts belong to Node: 【kmemleak_scan_area】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_scan_area, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_scan_area in the linux kenrel source code.
## The kmemleak_scan_area function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __get_vm_area_node.
9. function __get_vm_area_node invokes alloc_vmap_area.
10. function alloc_vmap_area invokes kmemleak_scan_area.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_scan_area.

————————————————————————————————These prompts belong to Node: 【__printk_ratelimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function __printk_ratelimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __printk_ratelimit in the linux kenrel source code.
## The __printk_ratelimit function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __get_vm_area_node.
9. function __get_vm_area_node invokes alloc_vmap_area.
10. function alloc_vmap_area invokes __printk_ratelimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __printk_ratelimit.

————————————————————————————————These prompts belong to Node: 【fls_long】at below.—————————————————————————————————— 
# Now I have a kernel internal function fls_long, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fls_long in the linux kenrel source code.
## The fls_long function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes __get_vm_area_node.
9. function __get_vm_area_node invokes get_count_order_long.
10. function get_count_order_long invokes fls_long.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fls_long.

————————————————————————————————These prompts belong to Node: 【rb_prev】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_prev, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_prev in the linux kenrel source code.
## The rb_prev function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_swapin_cluster.
9. function shmem_swapin_cluster invokes shmem_get_pgoff_policy.
10. function shmem_get_pgoff_policy invokes mpol_shared_policy_lookup.
11. function mpol_shared_policy_lookup invokes sp_lookup.
12. function sp_lookup invokes rb_prev.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_prev.

————————————————————————————————These prompts belong to Node: 【import_iovec】at below.—————————————————————————————————— 
# Now I have a kernel internal function import_iovec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: import_iovec in the linux kenrel source code.
## The import_iovec function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes import_iovec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: import_iovec.

————————————————————————————————These prompts belong to Node: 【iov_iter_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_count in the linux kenrel source code.
## The iov_iter_count function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes iov_iter_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_count.

————————————————————————————————These prompts belong to Node: 【iovec_from_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function iovec_from_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iovec_from_user in the linux kenrel source code.
## The iovec_from_user function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes iovec_from_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iovec_from_user.

————————————————————————————————These prompts belong to Node: 【find_get_task_by_vpid】at below.—————————————————————————————————— 
# Now I have a kernel internal function find_get_task_by_vpid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: find_get_task_by_vpid in the linux kenrel source code.
## The find_get_task_by_vpid function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes find_get_task_by_vpid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: find_get_task_by_vpid.

————————————————————————————————These prompts belong to Node: 【mm_access】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_access, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_access in the linux kenrel source code.
## The mm_access function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes mm_access.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_access.

————————————————————————————————These prompts belong to Node: 【copy_page_from_iter】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_page_from_iter, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_page_from_iter in the linux kenrel source code.
## The copy_page_from_iter function is called in the sys_process_vm_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_vm_readv invokes __se_sys_process_vm_readv.
2. function __se_sys_process_vm_readv invokes __do_sys_process_vm_readv.
3. function __do_sys_process_vm_readv invokes process_vm_rw.
4. function process_vm_rw invokes process_vm_rw_core.
5. function process_vm_rw_core invokes process_vm_rw_single_vec.
6. function process_vm_rw_single_vec invokes process_vm_rw_pages.
7. function process_vm_rw_pages invokes copy_page_from_iter.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_page_from_iter.

————————————————————————————————These prompts belong to Node: 【pcp_allowed_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function pcp_allowed_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pcp_allowed_order in the linux kenrel source code.
## The pcp_allowed_order function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes pcp_allowed_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pcp_allowed_order.

————————————————————————————————These prompts belong to Node: 【kmsan_free_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_free_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_free_page in the linux kenrel source code.
## The kmsan_free_page function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes kmsan_free_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_free_page.

————————————————————————————————These prompts belong to Node: 【PageHWPoison】at below.—————————————————————————————————— 
# Now I have a kernel internal function PageHWPoison, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PageHWPoison in the linux kenrel source code.
## The PageHWPoison function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes PageHWPoison.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PageHWPoison.

————————————————————————————————These prompts belong to Node: 【memcg_kmem_online】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcg_kmem_online, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcg_kmem_online in the linux kenrel source code.
## The memcg_kmem_online function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes memcg_kmem_online.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcg_kmem_online.

————————————————————————————————These prompts belong to Node: 【PageMemcgKmem】at below.—————————————————————————————————— 
# Now I have a kernel internal function PageMemcgKmem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PageMemcgKmem in the linux kenrel source code.
## The PageMemcgKmem function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes PageMemcgKmem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PageMemcgKmem.

————————————————————————————————These prompts belong to Node: 【__memcg_kmem_uncharge_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function __memcg_kmem_uncharge_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __memcg_kmem_uncharge_page in the linux kenrel source code.
## The __memcg_kmem_uncharge_page function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes __memcg_kmem_uncharge_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __memcg_kmem_uncharge_page.

————————————————————————————————These prompts belong to Node: 【reset_page_owner】at below.—————————————————————————————————— 
# Now I have a kernel internal function reset_page_owner, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: reset_page_owner in the linux kenrel source code.
## The reset_page_owner function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes reset_page_owner.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: reset_page_owner.

————————————————————————————————These prompts belong to Node: 【page_table_check_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_table_check_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_table_check_free in the linux kenrel source code.
## The page_table_check_free function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes page_table_check_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_table_check_free.

————————————————————————————————These prompts belong to Node: 【is_check_pages_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_check_pages_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_check_pages_enabled in the linux kenrel source code.
## The is_check_pages_enabled function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes free_tail_page_prepare.
9. function free_tail_page_prepare invokes is_check_pages_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_check_pages_enabled.

————————————————————————————————These prompts belong to Node: 【page_cpupid_reset_last】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_cpupid_reset_last, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_cpupid_reset_last in the linux kenrel source code.
## The page_cpupid_reset_last function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes page_cpupid_reset_last.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_cpupid_reset_last.

————————————————————————————————These prompts belong to Node: 【PageHighMem】at below.—————————————————————————————————— 
# Now I have a kernel internal function PageHighMem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PageHighMem in the linux kenrel source code.
## The PageHighMem function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes PageHighMem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PageHighMem.

————————————————————————————————These prompts belong to Node: 【kernel_poison_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function kernel_poison_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kernel_poison_pages in the linux kenrel source code.
## The kernel_poison_pages function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes kernel_poison_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kernel_poison_pages.

————————————————————————————————These prompts belong to Node: 【arch_free_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_free_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_free_page in the linux kenrel source code.
## The arch_free_page function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes arch_free_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_free_page.

————————————————————————————————These prompts belong to Node: 【debug_pagealloc_unmap_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function debug_pagealloc_unmap_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: debug_pagealloc_unmap_pages in the linux kenrel source code.
## The debug_pagealloc_unmap_pages function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes debug_pagealloc_unmap_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: debug_pagealloc_unmap_pages.

————————————————————————————————These prompts belong to Node: 【has_isolate_pageblock】at below.—————————————————————————————————— 
# Now I have a kernel internal function has_isolate_pageblock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: has_isolate_pageblock in the linux kenrel source code.
## The has_isolate_pageblock function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes has_isolate_pageblock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: has_isolate_pageblock.

————————————————————————————————These prompts belong to Node: 【is_migrate_isolate】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_migrate_isolate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_migrate_isolate in the linux kenrel source code.
## The is_migrate_isolate function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes is_migrate_isolate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_migrate_isolate.

————————————————————————————————These prompts belong to Node: 【task_capc】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_capc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_capc in the linux kenrel source code.
## The task_capc function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes task_capc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_capc.

————————————————————————————————These prompts belong to Node: 【__mod_zone_freepage_state】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mod_zone_freepage_state, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mod_zone_freepage_state in the linux kenrel source code.
## The __mod_zone_freepage_state function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes __mod_zone_freepage_state.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mod_zone_freepage_state.

————————————————————————————————These prompts belong to Node: 【migratetype_is_mergeable】at below.—————————————————————————————————— 
# Now I have a kernel internal function migratetype_is_mergeable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: migratetype_is_mergeable in the linux kenrel source code.
## The migratetype_is_mergeable function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes migratetype_is_mergeable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: migratetype_is_mergeable.

————————————————————————————————These prompts belong to Node: 【page_is_guard】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_is_guard, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_is_guard in the linux kenrel source code.
## The page_is_guard function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes find_buddy_page_pfn.
10. function find_buddy_page_pfn invokes page_is_buddy.
11. function page_is_buddy invokes page_is_guard.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_is_guard.

————————————————————————————————These prompts belong to Node: 【clear_page_guard】at below.—————————————————————————————————— 
# Now I have a kernel internal function clear_page_guard, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: clear_page_guard in the linux kenrel source code.
## The clear_page_guard function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes clear_page_guard.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: clear_page_guard.

————————————————————————————————These prompts belong to Node: 【is_shuffle_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_shuffle_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_shuffle_order in the linux kenrel source code.
## The is_shuffle_order function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes is_shuffle_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_shuffle_order.

————————————————————————————————These prompts belong to Node: 【shuffle_pick_tail】at below.—————————————————————————————————— 
# Now I have a kernel internal function shuffle_pick_tail, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: shuffle_pick_tail in the linux kenrel source code.
## The shuffle_pick_tail function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes shuffle_pick_tail.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: shuffle_pick_tail.

————————————————————————————————These prompts belong to Node: 【page_reporting_notify_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_reporting_notify_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_reporting_notify_free in the linux kenrel source code.
## The page_reporting_notify_free function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes page_reporting_notify_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_reporting_notify_free.

————————————————————————————————These prompts belong to Node: 【set_page_private】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_page_private, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_page_private in the linux kenrel source code.
## The set_page_private function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes del_page_from_free_list.
10. function del_page_from_free_list invokes set_page_private.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_page_private.

————————————————————————————————These prompts belong to Node: 【__find_buddy_pfn】at below.—————————————————————————————————— 
# Now I have a kernel internal function __find_buddy_pfn, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __find_buddy_pfn in the linux kenrel source code.
## The __find_buddy_pfn function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes find_buddy_page_pfn.
10. function find_buddy_page_pfn invokes __find_buddy_pfn.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __find_buddy_pfn.

————————————————————————————————These prompts belong to Node: 【buddy_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function buddy_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: buddy_order in the linux kenrel source code.
## The buddy_order function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes find_buddy_page_pfn.
10. function find_buddy_page_pfn invokes page_is_buddy.
11. function page_is_buddy invokes buddy_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: buddy_order.

————————————————————————————————These prompts belong to Node: 【page_zone_id】at below.—————————————————————————————————— 
# Now I have a kernel internal function page_zone_id, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: page_zone_id in the linux kenrel source code.
## The page_zone_id function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_one_page.
8. function free_one_page invokes __free_one_page.
9. function __free_one_page invokes find_buddy_page_pfn.
10. function find_buddy_page_pfn invokes page_is_buddy.
11. function page_is_buddy invokes page_zone_id.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: page_zone_id.

————————————————————————————————These prompts belong to Node: 【pfn_to_bitidx】at below.—————————————————————————————————— 
# Now I have a kernel internal function pfn_to_bitidx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pfn_to_bitidx in the linux kenrel source code.
## The pfn_to_bitidx function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes get_pfnblock_flags_mask.
9. function get_pfnblock_flags_mask invokes pfn_to_bitidx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pfn_to_bitidx.

————————————————————————————————These prompts belong to Node: 【section_to_usemap】at below.—————————————————————————————————— 
# Now I have a kernel internal function section_to_usemap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: section_to_usemap in the linux kenrel source code.
## The section_to_usemap function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes get_pfnblock_flags_mask.
9. function get_pfnblock_flags_mask invokes get_pageblock_bitmap.
10. function get_pageblock_bitmap invokes section_to_usemap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: section_to_usemap.

————————————————————————————————These prompts belong to Node: 【__get_free_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function __get_free_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __get_free_pages in the linux kenrel source code.
## The __get_free_pages function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes __get_free_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __get_free_pages.

————————————————————————————————These prompts belong to Node: 【tsk_is_oom_victim】at below.—————————————————————————————————— 
# Now I have a kernel internal function tsk_is_oom_victim, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: tsk_is_oom_victim in the linux kenrel source code.
## The tsk_is_oom_victim function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes pfmemalloc_match.
9. function pfmemalloc_match invokes gfp_pfmemalloc_allowed.
10. function gfp_pfmemalloc_allowed invokes __gfp_pfmemalloc_flags.
11. function __gfp_pfmemalloc_flags invokes oom_reserves_allowed.
12. function oom_reserves_allowed invokes tsk_is_oom_victim.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: tsk_is_oom_victim.

————————————————————————————————These prompts belong to Node: 【__nodemask_pr_numnodes】at below.—————————————————————————————————— 
# Now I have a kernel internal function __nodemask_pr_numnodes, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __nodemask_pr_numnodes in the linux kenrel source code.
## The __nodemask_pr_numnodes function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes warn_alloc.
9. function warn_alloc invokes __nodemask_pr_numnodes.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __nodemask_pr_numnodes.

————————————————————————————————These prompts belong to Node: 【__nodemask_pr_bits】at below.—————————————————————————————————— 
# Now I have a kernel internal function __nodemask_pr_bits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __nodemask_pr_bits in the linux kenrel source code.
## The __nodemask_pr_bits function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes kvzalloc.
5. function kvzalloc invokes kvmalloc.
6. function kvmalloc invokes kvmalloc_node.
7. function kvmalloc_node invokes __vmalloc_node_range.
8. function __vmalloc_node_range invokes warn_alloc.
9. function warn_alloc invokes __nodemask_pr_bits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __nodemask_pr_bits.

————————————————————————————————These prompts belong to Node: 【cpuset_nodemask_valid_mems_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_nodemask_valid_mems_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_nodemask_valid_mems_allowed in the linux kenrel source code.
## The cpuset_nodemask_valid_mems_allowed function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes alloc_pages.
12. function alloc_pages invokes alloc_pages_mpol.
13. function alloc_pages_mpol invokes policy_nodemask.
14. function policy_nodemask invokes cpuset_nodemask_valid_mems_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_nodemask_valid_mems_allowed.

————————————————————————————————These prompts belong to Node: 【madvise_behavior_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function madvise_behavior_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: madvise_behavior_valid in the linux kenrel source code.
## The madvise_behavior_valid function is called in the sys_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_madvise invokes __se_sys_madvise.
2. function __se_sys_madvise invokes __do_sys_madvise.
3. function __do_sys_madvise invokes do_madvise.
4. function do_madvise invokes madvise_behavior_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: madvise_behavior_valid.

————————————————————————————————These prompts belong to Node: 【madvise_need_mmap_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function madvise_need_mmap_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: madvise_need_mmap_write in the linux kenrel source code.
## The madvise_need_mmap_write function is called in the sys_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_madvise invokes __se_sys_madvise.
2. function __se_sys_madvise invokes __do_sys_madvise.
3. function __do_sys_madvise invokes do_madvise.
4. function do_madvise invokes madvise_need_mmap_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: madvise_need_mmap_write.

————————————————————————————————These prompts belong to Node: 【madvise_walk_vmas】at below.—————————————————————————————————— 
# Now I have a kernel internal function madvise_walk_vmas, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: madvise_walk_vmas in the linux kenrel source code.
## The madvise_walk_vmas function is called in the sys_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_madvise invokes __se_sys_madvise.
2. function __se_sys_madvise invokes __do_sys_madvise.
3. function __do_sys_madvise invokes do_madvise.
4. function do_madvise invokes madvise_walk_vmas.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: madvise_walk_vmas.

————————————————————————————————These prompts belong to Node: 【is_pci_p2pdma_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_pci_p2pdma_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_pci_p2pdma_page in the linux kenrel source code.
## The is_pci_p2pdma_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes get_gate_page.
8. function get_gate_page invokes try_grab_page.
9. function try_grab_page invokes is_pci_p2pdma_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_pci_p2pdma_page.

————————————————————————————————These prompts belong to Node: 【vm_fault_to_errno】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_fault_to_errno, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_fault_to_errno in the linux kenrel source code.
## The vm_fault_to_errno function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes faultin_page.
8. function faultin_page invokes vm_fault_to_errno.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_fault_to_errno.

————————————————————————————————These prompts belong to Node: 【pud_devmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_devmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_devmap in the linux kenrel source code.
## The pud_devmap function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes pud_devmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_devmap.

————————————————————————————————These prompts belong to Node: 【follow_devmap_pud】at below.—————————————————————————————————— 
# Now I have a kernel internal function follow_devmap_pud, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: follow_devmap_pud in the linux kenrel source code.
## The follow_devmap_pud function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_devmap_pud.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: follow_devmap_pud.

————————————————————————————————These prompts belong to Node: 【pmd_devmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_devmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_devmap in the linux kenrel source code.
## The pmd_devmap function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmd_devmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_devmap.

————————————————————————————————These prompts belong to Node: 【follow_devmap_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function follow_devmap_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: follow_devmap_pmd in the linux kenrel source code.
## The follow_devmap_pmd function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_devmap_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: follow_devmap_pmd.

————————————————————————————————These prompts belong to Node: 【pmd_trans_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_trans_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_trans_huge in the linux kenrel source code.
## The pmd_trans_huge function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmd_trans_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_trans_huge.

————————————————————————————————These prompts belong to Node: 【pmd_protnone】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_protnone, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_protnone in the linux kenrel source code.
## The pmd_protnone function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmd_protnone.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_protnone.

————————————————————————————————These prompts belong to Node: 【follow_trans_huge_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function follow_trans_huge_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: follow_trans_huge_pmd in the linux kenrel source code.
## The follow_trans_huge_pmd function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_trans_huge_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: follow_trans_huge_pmd.

————————————————————————————————These prompts belong to Node: 【vma_is_accessible】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_accessible, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_accessible in the linux kenrel source code.
## The vma_is_accessible function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes vma_is_accessible.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_accessible.

————————————————————————————————These prompts belong to Node: 【pte_offset_map_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_offset_map_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_offset_map_lock in the linux kenrel source code.
## The pte_offset_map_lock function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes pte_offset_map_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_offset_map_lock.

————————————————————————————————These prompts belong to Node: 【pte_protnone】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_protnone, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_protnone in the linux kenrel source code.
## The pte_protnone function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes pte_protnone.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_protnone.

————————————————————————————————These prompts belong to Node: 【get_dev_pagemap】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_dev_pagemap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_dev_pagemap in the linux kenrel source code.
## The get_dev_pagemap function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes get_dev_pagemap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_dev_pagemap.

————————————————————————————————These prompts belong to Node: 【arch_make_page_accessible】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_make_page_accessible, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_make_page_accessible in the linux kenrel source code.
## The arch_make_page_accessible function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes arch_make_page_accessible.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_make_page_accessible.

————————————————————————————————These prompts belong to Node: 【is_cow_mapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_cow_mapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_cow_mapping in the linux kenrel source code.
## The is_cow_mapping function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes is_cow_mapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_cow_mapping.

————————————————————————————————These prompts belong to Node: 【pte_same】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_same, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_same in the linux kenrel source code.
## The pte_same function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes follow_pfn_pte.
13. function follow_pfn_pte invokes pte_same.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_same.

————————————————————————————————These prompts belong to Node: 【update_mmu_cache】at below.—————————————————————————————————— 
# Now I have a kernel internal function update_mmu_cache, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: update_mmu_cache in the linux kenrel source code.
## The update_mmu_cache function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes follow_pfn_pte.
13. function follow_pfn_pte invokes update_mmu_cache.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: update_mmu_cache.

————————————————————————————————These prompts belong to Node: 【mksaveddirty_shift】at below.—————————————————————————————————— 
# Now I have a kernel internal function mksaveddirty_shift, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mksaveddirty_shift in the linux kenrel source code.
## The mksaveddirty_shift function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes follow_pfn_pte.
13. function follow_pfn_pte invokes pte_mkdirty.
14. function pte_mkdirty invokes pte_mksaveddirty.
15. function pte_mksaveddirty invokes mksaveddirty_shift.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mksaveddirty_shift.

————————————————————————————————These prompts belong to Node: 【vma_soft_dirty_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_soft_dirty_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_soft_dirty_enabled in the linux kenrel source code.
## The vma_soft_dirty_enabled function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes can_follow_write_pte.
13. function can_follow_write_pte invokes vma_soft_dirty_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_soft_dirty_enabled.

————————————————————————————————These prompts belong to Node: 【userfaultfd_pte_wp】at below.—————————————————————————————————— 
# Now I have a kernel internal function userfaultfd_pte_wp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: userfaultfd_pte_wp in the linux kenrel source code.
## The userfaultfd_pte_wp function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes follow_page_pte.
12. function follow_page_pte invokes can_follow_write_pte.
13. function can_follow_write_pte invokes userfaultfd_pte_wp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: userfaultfd_pte_wp.

————————————————————————————————These prompts belong to Node: 【ptlock_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function ptlock_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ptlock_ptr in the linux kenrel source code.
## The ptlock_ptr function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmd_lock.
12. function pmd_lock invokes pmd_lockptr.
13. function pmd_lockptr invokes ptlock_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ptlock_ptr.

————————————————————————————————These prompts belong to Node: 【pmd_pgtable_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_pgtable_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_pgtable_page in the linux kenrel source code.
## The pmd_pgtable_page function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmd_lock.
12. function pmd_lock invokes pmd_lockptr.
13. function pmd_lockptr invokes pmd_ptdesc.
14. function pmd_ptdesc invokes pmd_pgtable_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_pgtable_page.

————————————————————————————————These prompts belong to Node: 【pmdp_get】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmdp_get, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmdp_get in the linux kenrel source code.
## The pmdp_get function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes follow_pmd_mask.
11. function follow_pmd_mask invokes pmdp_get_lockless.
12. function pmdp_get_lockless invokes pmdp_get.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmdp_get.

————————————————————————————————These prompts belong to Node: 【pud_lockptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_lockptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_lockptr in the linux kenrel source code.
## The pud_lockptr function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes follow_page_mask.
8. function follow_page_mask invokes follow_p4d_mask.
9. function follow_p4d_mask invokes follow_pud_mask.
10. function follow_pud_mask invokes pud_lock.
11. function pud_lock invokes pud_lockptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_lockptr.

————————————————————————————————These prompts belong to Node: 【vma_is_fsdax】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_fsdax, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_fsdax in the linux kenrel source code.
## The vma_is_fsdax function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes vma_is_fsdax.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_fsdax.

————————————————————————————————These prompts belong to Node: 【vma_is_foreign】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_foreign, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_foreign in the linux kenrel source code.
## The vma_is_foreign function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes arch_vma_access_permitted.
9. function arch_vma_access_permitted invokes vma_is_foreign.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_foreign.

————————————————————————————————These prompts belong to Node: 【vma_pkey】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_pkey, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_pkey in the linux kenrel source code.
## The vma_pkey function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes arch_vma_access_permitted.
9. function arch_vma_access_permitted invokes vma_pkey.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_pkey.

————————————————————————————————These prompts belong to Node: 【__pkru_allows_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pkru_allows_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pkru_allows_read in the linux kenrel source code.
## The __pkru_allows_read function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes arch_vma_access_permitted.
9. function arch_vma_access_permitted invokes __pkru_allows_pkey.
10. function __pkru_allows_pkey invokes __pkru_allows_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pkru_allows_read.

————————————————————————————————These prompts belong to Node: 【__pkru_allows_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pkru_allows_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pkru_allows_write in the linux kenrel source code.
## The __pkru_allows_write function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes arch_vma_access_permitted.
9. function arch_vma_access_permitted invokes __pkru_allows_pkey.
10. function __pkru_allows_pkey invokes __pkru_allows_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pkru_allows_write.

————————————————————————————————These prompts belong to Node: 【rdpkru】at below.—————————————————————————————————— 
# Now I have a kernel internal function rdpkru, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rdpkru in the linux kenrel source code.
## The rdpkru function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes arch_vma_access_permitted.
9. function arch_vma_access_permitted invokes __pkru_allows_pkey.
10. function __pkru_allows_pkey invokes read_pkru.
11. function read_pkru invokes rdpkru.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rdpkru.

————————————————————————————————These prompts belong to Node: 【get_gate_vma】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_gate_vma, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_gate_vma in the linux kenrel source code.
## The get_gate_vma function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes get_gate_page.
8. function get_gate_page invokes get_gate_vma.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_gate_vma.

————————————————————————————————These prompts belong to Node: 【task_pid_nr】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_pid_nr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_pid_nr in the linux kenrel source code.
## The task_pid_nr function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes gup_vma_lookup.
8. function gup_vma_lookup invokes task_pid_nr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_pid_nr.

————————————————————————————————These prompts belong to Node: 【gup_fast_permitted】at below.—————————————————————————————————— 
# Now I have a kernel internal function gup_fast_permitted, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: gup_fast_permitted in the linux kenrel source code.
## The gup_fast_permitted function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_fast_permitted.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: gup_fast_permitted.

————————————————————————————————These prompts belong to Node: 【__seqprop_sequence】at below.—————————————————————————————————— 
# Now I have a kernel internal function __seqprop_sequence, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __seqprop_sequence in the linux kenrel source code.
## The __seqprop_sequence function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes __seqprop_sequence.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __seqprop_sequence.

————————————————————————————————These prompts belong to Node: 【__seqprop_const_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function __seqprop_const_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __seqprop_const_ptr in the linux kenrel source code.
## The __seqprop_const_ptr function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes __seqprop_const_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __seqprop_const_ptr.

————————————————————————————————These prompts belong to Node: 【pud_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_huge in the linux kenrel source code.
## The pud_huge function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes pud_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_huge.

————————————————————————————————These prompts belong to Node: 【pmd_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmd_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmd_huge in the linux kenrel source code.
## The pmd_huge function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes gup_pmd_range.
13. function gup_pmd_range invokes pmd_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmd_huge.

————————————————————————————————These prompts belong to Node: 【pte_flags_pkey】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_flags_pkey, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_flags_pkey in the linux kenrel source code.
## The pte_flags_pkey function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes gup_huge_pud.
13. function gup_huge_pud invokes pud_access_permitted.
14. function pud_access_permitted invokes __pte_access_permitted.
15. function __pte_access_permitted invokes pte_flags_pkey.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_flags_pkey.

————————————————————————————————These prompts belong to Node: 【__gup_device_huge_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function __gup_device_huge_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __gup_device_huge_pmd in the linux kenrel source code.
## The __gup_device_huge_pmd function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes gup_pmd_range.
13. function gup_pmd_range invokes gup_huge_pmd.
14. function gup_huge_pmd invokes __gup_device_huge_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __gup_device_huge_pmd.

————————————————————————————————These prompts belong to Node: 【record_subpages】at below.—————————————————————————————————— 
# Now I have a kernel internal function record_subpages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: record_subpages in the linux kenrel source code.
## The record_subpages function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes gup_huge_pud.
13. function gup_huge_pud invokes record_subpages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: record_subpages.

————————————————————————————————These prompts belong to Node: 【__gup_device_huge_pud】at below.—————————————————————————————————— 
# Now I have a kernel internal function __gup_device_huge_pud, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __gup_device_huge_pud in the linux kenrel source code.
## The __gup_device_huge_pud function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes do_get_mempolicy.
5. function do_get_mempolicy invokes lookup_node.
6. function lookup_node invokes get_user_pages_fast.
7. function get_user_pages_fast invokes internal_get_user_pages_fast.
8. function internal_get_user_pages_fast invokes lockless_pages_from_mm.
9. function lockless_pages_from_mm invokes gup_pgd_range.
10. function gup_pgd_range invokes gup_p4d_range.
11. function gup_p4d_range invokes gup_pud_range.
12. function gup_pud_range invokes gup_huge_pud.
13. function gup_huge_pud invokes __gup_device_huge_pud.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __gup_device_huge_pud.

————————————————————————————————These prompts belong to Node: 【ptrace_may_access】at below.—————————————————————————————————— 
# Now I have a kernel internal function ptrace_may_access, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ptrace_may_access in the linux kenrel source code.
## The ptrace_may_access function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes ptrace_may_access.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ptrace_may_access.

————————————————————————————————These prompts belong to Node: 【security_task_movememory】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_task_movememory, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_task_movememory in the linux kenrel source code.
## The security_task_movememory function is called in the sys_migrate_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_migrate_pages invokes __se_sys_migrate_pages.
2. function __se_sys_migrate_pages invokes __do_sys_migrate_pages.
3. function __do_sys_migrate_pages invokes kernel_migrate_pages.
4. function kernel_migrate_pages invokes security_task_movememory.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_task_movememory.

————————————————————————————————These prompts belong to Node: 【might_fault】at below.—————————————————————————————————— 
# Now I have a kernel internal function might_fault, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: might_fault in the linux kenrel source code.
## The might_fault function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes might_fault.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: might_fault.

————————————————————————————————These prompts belong to Node: 【kmsan_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_copy_to_user in the linux kenrel source code.
## The kmsan_copy_to_user function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes kmsan_copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_copy_to_user.

————————————————————————————————These prompts belong to Node: 【compat_put_bitmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function compat_put_bitmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: compat_put_bitmap in the linux kenrel source code.
## The compat_put_bitmap function is called in the sys_get_mempolicy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_get_mempolicy invokes __se_sys_get_mempolicy.
2. function __se_sys_get_mempolicy invokes __do_sys_get_mempolicy.
3. function __do_sys_get_mempolicy invokes kernel_get_mempolicy.
4. function kernel_get_mempolicy invokes copy_nodes_to_user.
5. function copy_nodes_to_user invokes compat_put_bitmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: compat_put_bitmap.

————————————————————————————————These prompts belong to Node: 【_raw_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_lock in the linux kenrel source code.
## The _raw_read_lock function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_swapin_cluster.
9. function shmem_swapin_cluster invokes shmem_get_pgoff_policy.
10. function shmem_get_pgoff_policy invokes mpol_shared_policy_lookup.
11. function mpol_shared_policy_lookup invokes _raw_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_lock.

————————————————————————————————These prompts belong to Node: 【_raw_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_unlock in the linux kenrel source code.
## The _raw_read_unlock function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes shmem_unuse.
5. function shmem_unuse invokes shmem_unuse_inode.
6. function shmem_unuse_inode invokes shmem_unuse_swap_entries.
7. function shmem_unuse_swap_entries invokes shmem_swapin_folio.
8. function shmem_swapin_folio invokes shmem_swapin_cluster.
9. function shmem_swapin_cluster invokes shmem_get_pgoff_policy.
10. function shmem_get_pgoff_policy invokes mpol_shared_policy_lookup.
11. function mpol_shared_policy_lookup invokes _raw_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_unlock.

————————————————————————————————These prompts belong to Node: 【mn_itree_is_invalidating】at below.—————————————————————————————————— 
# Now I have a kernel internal function mn_itree_is_invalidating, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mn_itree_is_invalidating in the linux kenrel source code.
## The mn_itree_is_invalidating function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_end.
8. function mn_itree_inv_end invokes mn_itree_is_invalidating.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mn_itree_is_invalidating.

————————————————————————————————These prompts belong to Node: 【interval_tree_remove】at below.—————————————————————————————————— 
# Now I have a kernel internal function interval_tree_remove, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: interval_tree_remove in the linux kenrel source code.
## The interval_tree_remove function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_end.
8. function mn_itree_inv_end invokes interval_tree_remove.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: interval_tree_remove.

————————————————————————————————These prompts belong to Node: 【__hlist_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __hlist_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __hlist_del in the linux kenrel source code.
## The __hlist_del function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_end.
8. function mn_itree_inv_end invokes hlist_del.
9. function hlist_del invokes __hlist_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __hlist_del.

————————————————————————————————These prompts belong to Node: 【interval_tree_insert】at below.—————————————————————————————————— 
# Now I have a kernel internal function interval_tree_insert, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: interval_tree_insert in the linux kenrel source code.
## The interval_tree_insert function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_end.
8. function mn_itree_inv_end invokes interval_tree_insert.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: interval_tree_insert.

————————————————————————————————These prompts belong to Node: 【srcu_check_nmi_safety】at below.—————————————————————————————————— 
# Now I have a kernel internal function srcu_check_nmi_safety, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: srcu_check_nmi_safety in the linux kenrel source code.
## The srcu_check_nmi_safety function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_hlist_invalidate_range_start.
7. function mn_hlist_invalidate_range_start invokes srcu_read_lock.
8. function srcu_read_lock invokes srcu_check_nmi_safety.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: srcu_check_nmi_safety.

————————————————————————————————These prompts belong to Node: 【__srcu_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __srcu_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __srcu_read_unlock in the linux kenrel source code.
## The __srcu_read_unlock function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_hlist_invalidate_range_start.
7. function mn_hlist_invalidate_range_start invokes srcu_read_unlock.
8. function srcu_read_unlock invokes __srcu_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __srcu_read_unlock.

————————————————————————————————These prompts belong to Node: 【__srcu_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __srcu_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __srcu_read_lock in the linux kenrel source code.
## The __srcu_read_lock function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_hlist_invalidate_range_start.
7. function mn_hlist_invalidate_range_start invokes srcu_read_lock.
8. function srcu_read_lock invokes __srcu_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __srcu_read_lock.

————————————————————————————————These prompts belong to Node: 【hlist_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_empty in the linux kenrel source code.
## The hlist_empty function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes hlist_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_empty.

————————————————————————————————These prompts belong to Node: 【userfaultfd_unmap_complete】at below.—————————————————————————————————— 
# Now I have a kernel internal function userfaultfd_unmap_complete, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: userfaultfd_unmap_complete in the linux kenrel source code.
## The userfaultfd_unmap_complete function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes userfaultfd_unmap_complete.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: userfaultfd_unmap_complete.

————————————————————————————————These prompts belong to Node: 【vma_adjust_trans_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_adjust_trans_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_adjust_trans_huge in the linux kenrel source code.
## The vma_adjust_trans_huge function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_adjust_trans_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_adjust_trans_huge.

————————————————————————————————These prompts belong to Node: 【khugepaged_enter_vma】at below.—————————————————————————————————— 
# Now I have a kernel internal function khugepaged_enter_vma, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: khugepaged_enter_vma in the linux kenrel source code.
## The khugepaged_enter_vma function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes khugepaged_enter_vma.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: khugepaged_enter_vma.

————————————————————————————————These prompts belong to Node: 【vm_area_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_alloc in the linux kenrel source code.
## The vm_area_alloc function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes vm_area_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_alloc.

————————————————————————————————These prompts belong to Node: 【vma_set_anonymous】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_set_anonymous, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_set_anonymous in the linux kenrel source code.
## The vma_set_anonymous function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes vma_set_anonymous.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_set_anonymous.

————————————————————————————————These prompts belong to Node: 【vm_get_page_prot】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_get_page_prot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_get_page_prot in the linux kenrel source code.
## The vm_get_page_prot function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes vm_get_page_prot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_get_page_prot.

————————————————————————————————These prompts belong to Node: 【ksm_add_vma】at below.—————————————————————————————————— 
# Now I have a kernel internal function ksm_add_vma, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ksm_add_vma in the linux kenrel source code.
## The ksm_add_vma function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes ksm_add_vma.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ksm_add_vma.

————————————————————————————————These prompts belong to Node: 【perf_event_mmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function perf_event_mmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: perf_event_mmap in the linux kenrel source code.
## The perf_event_mmap function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes perf_event_mmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: perf_event_mmap.

————————————————————————————————These prompts belong to Node: 【vm_area_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_free in the linux kenrel source code.
## The vm_area_free function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes vm_area_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_free.

————————————————————————————————These prompts belong to Node: 【__mas_set_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mas_set_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mas_set_range in the linux kenrel source code.
## The __mas_set_range function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_iter_set.
8. function vma_iter_set invokes mas_set.
9. function mas_set invokes mas_set_range.
10. function mas_set_range invokes __mas_set_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mas_set_range.

————————————————————————————————These prompts belong to Node: 【mas_store_gfp】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_store_gfp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_store_gfp in the linux kenrel source code.
## The mas_store_gfp function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes mas_store_gfp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_store_gfp.

————————————————————————————————These prompts belong to Node: 【mas_is_err】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_is_err, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_is_err in the linux kenrel source code.
## The mas_is_err function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes vma_iter_clear_gfp.
6. function vma_iter_clear_gfp invokes mas_is_err.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_is_err.

————————————————————————————————These prompts belong to Node: 【mas_pause】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_pause, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_pause in the linux kenrel source code.
## The mas_pause function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes vma_iter_store.
9. function vma_iter_store invokes vma_iter_invalidate.
10. function vma_iter_invalidate invokes mas_pause.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_pause.

————————————————————————————————These prompts belong to Node: 【mas_next_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_next_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_next_range in the linux kenrel source code.
## The mas_next_range function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes vma_iter_next_range.
5. function vma_iter_next_range invokes mas_next_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_next_range.

————————————————————————————————These prompts belong to Node: 【flush_dcache_mmap_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_dcache_mmap_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_dcache_mmap_unlock in the linux kenrel source code.
## The flush_dcache_mmap_unlock function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes flush_dcache_mmap_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_dcache_mmap_unlock.

————————————————————————————————These prompts belong to Node: 【anon_vma_interval_tree_post_update_vma】at below.—————————————————————————————————— 
# Now I have a kernel internal function anon_vma_interval_tree_post_update_vma, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: anon_vma_interval_tree_post_update_vma in the linux kenrel source code.
## The anon_vma_interval_tree_post_update_vma function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes anon_vma_interval_tree_post_update_vma.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: anon_vma_interval_tree_post_update_vma.

————————————————————————————————These prompts belong to Node: 【uprobe_mmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function uprobe_mmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: uprobe_mmap in the linux kenrel source code.
## The uprobe_mmap function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes uprobe_mmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: uprobe_mmap.

————————————————————————————————These prompts belong to Node: 【flush_dcache_mmap_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_dcache_mmap_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_dcache_mmap_lock in the linux kenrel source code.
## The flush_dcache_mmap_lock function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes __remove_shared_vm_struct.
9. function __remove_shared_vm_struct invokes flush_dcache_mmap_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_dcache_mmap_lock.

————————————————————————————————These prompts belong to Node: 【is_shared_maywrite】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_shared_maywrite, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_shared_maywrite in the linux kenrel source code.
## The is_shared_maywrite function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes __remove_shared_vm_struct.
9. function __remove_shared_vm_struct invokes vma_is_shared_maywrite.
10. function vma_is_shared_maywrite invokes is_shared_maywrite.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_shared_maywrite.

————————————————————————————————These prompts belong to Node: 【mas_store_prealloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_store_prealloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_store_prealloc in the linux kenrel source code.
## The mas_store_prealloc function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_complete.
8. function vma_complete invokes vma_iter_store.
9. function vma_iter_store invokes mas_store_prealloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_store_prealloc.

————————————————————————————————These prompts belong to Node: 【anon_vma_interval_tree_pre_update_vma】at below.—————————————————————————————————— 
# Now I have a kernel internal function anon_vma_interval_tree_pre_update_vma, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: anon_vma_interval_tree_pre_update_vma in the linux kenrel source code.
## The anon_vma_interval_tree_pre_update_vma function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_prepare.
8. function vma_prepare invokes anon_vma_interval_tree_pre_update_vma.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: anon_vma_interval_tree_pre_update_vma.

————————————————————————————————These prompts belong to Node: 【init_multi_vma_prep】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_multi_vma_prep, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_multi_vma_prep in the linux kenrel source code.
## The init_multi_vma_prep function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes init_multi_vma_prep.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_multi_vma_prep.

————————————————————————————————These prompts belong to Node: 【mas_preallocate】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_preallocate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_preallocate in the linux kenrel source code.
## The mas_preallocate function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes vma_iter_prealloc.
8. function vma_iter_prealloc invokes mas_preallocate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_preallocate.

————————————————————————————————These prompts belong to Node: 【vma_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_pages in the linux kenrel source code.
## The vma_pages function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes can_vma_merge_after.
8. function can_vma_merge_after invokes vma_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_pages.

————————————————————————————————These prompts belong to Node: 【is_mergeable_vm_userfaultfd_ctx】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_mergeable_vm_userfaultfd_ctx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_mergeable_vm_userfaultfd_ctx in the linux kenrel source code.
## The is_mergeable_vm_userfaultfd_ctx function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes can_vma_merge_after.
8. function can_vma_merge_after invokes is_mergeable_vma.
9. function is_mergeable_vma invokes is_mergeable_vm_userfaultfd_ctx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_mergeable_vm_userfaultfd_ctx.

————————————————————————————————These prompts belong to Node: 【anon_vma_name_eq】at below.—————————————————————————————————— 
# Now I have a kernel internal function anon_vma_name_eq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: anon_vma_name_eq in the linux kenrel source code.
## The anon_vma_name_eq function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes can_vma_merge_after.
8. function can_vma_merge_after invokes is_mergeable_vma.
9. function is_mergeable_vma invokes anon_vma_name_eq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: anon_vma_name_eq.

————————————————————————————————These prompts belong to Node: 【is_data_mapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_data_mapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_data_mapping in the linux kenrel source code.
## The is_data_mapping function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes vm_stat_account.
7. function vm_stat_account invokes is_data_mapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_data_mapping.

————————————————————————————————These prompts belong to Node: 【task_rlimit_max】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_rlimit_max, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_rlimit_max in the linux kenrel source code.
## The task_rlimit_max function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_brk_flags.
4. function do_brk_flags invokes may_expand_vm.
5. function may_expand_vm invokes rlimit_max.
6. function rlimit_max invokes task_rlimit_max.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_rlimit_max.

————————————————————————————————These prompts belong to Node: 【arch_unmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_unmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_unmap in the linux kenrel source code.
## The arch_unmap function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes arch_unmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_unmap.

————————————————————————————————These prompts belong to Node: 【userfaultfd_unmap_prep】at below.—————————————————————————————————— 
# Now I have a kernel internal function userfaultfd_unmap_prep, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: userfaultfd_unmap_prep in the linux kenrel source code.
## The userfaultfd_unmap_prep function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes userfaultfd_unmap_prep.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: userfaultfd_unmap_prep.

————————————————————————————————These prompts belong to Node: 【vma_iter_addr】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_iter_addr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_iter_addr in the linux kenrel source code.
## The vma_iter_addr function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes vma_iter_addr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_iter_addr.

————————————————————————————————These prompts belong to Node: 【__mt_destroy】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mt_destroy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mt_destroy in the linux kenrel source code.
## The __mt_destroy function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes __mt_destroy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mt_destroy.

————————————————————————————————These prompts belong to Node: 【update_hiwater_vm】at below.—————————————————————————————————— 
# Now I have a kernel internal function update_hiwater_vm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: update_hiwater_vm in the linux kenrel source code.
## The update_hiwater_vm function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes update_hiwater_vm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: update_hiwater_vm.

————————————————————————————————These prompts belong to Node: 【__vm_area_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function __vm_area_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __vm_area_free in the linux kenrel source code.
## The __vm_area_free function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes remove_vma.
7. function remove_vma invokes __vm_area_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __vm_area_free.

————————————————————————————————These prompts belong to Node: 【is_exec_mapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_exec_mapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_exec_mapping in the linux kenrel source code.
## The is_exec_mapping function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes vm_stat_account.
7. function vm_stat_account invokes is_exec_mapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_exec_mapping.

————————————————————————————————These prompts belong to Node: 【is_stack_mapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_stack_mapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_stack_mapping in the linux kenrel source code.
## The is_stack_mapping function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes remove_mt.
6. function remove_mt invokes vm_stat_account.
7. function vm_stat_account invokes is_stack_mapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_stack_mapping.

————————————————————————————————These prompts belong to Node: 【percpu_counter_read_positive】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_counter_read_positive, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_counter_read_positive in the linux kenrel source code.
## The percpu_counter_read_positive function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes unmap_region.
6. function unmap_region invokes update_hiwater_rss.
7. function update_hiwater_rss invokes get_mm_rss.
8. function get_mm_rss invokes get_mm_counter.
9. function get_mm_counter invokes percpu_counter_read_positive.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_counter_read_positive.

————————————————————————————————These prompts belong to Node: 【mas_prev_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_prev_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_prev_range in the linux kenrel source code.
## The mas_prev_range function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes vma_iter_prev_range.
6. function vma_iter_prev_range invokes mas_prev_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_prev_range.

————————————————————————————————These prompts belong to Node: 【vm_area_dup】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_dup, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_dup in the linux kenrel source code.
## The vm_area_dup function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes split_vma.
7. function split_vma invokes __split_vma.
8. function __split_vma invokes vm_area_dup.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_dup.

————————————————————————————————These prompts belong to Node: 【mas_destroy】at below.—————————————————————————————————— 
# Now I have a kernel internal function mas_destroy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mas_destroy in the linux kenrel source code.
## The mas_destroy function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes split_vma.
7. function split_vma invokes __split_vma.
8. function __split_vma invokes vma_iter_free.
9. function vma_iter_free invokes mas_destroy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mas_destroy.

————————————————————————————————These prompts belong to Node: 【mt_external_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mt_external_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mt_external_lock in the linux kenrel source code.
## The mt_external_lock function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes do_vma_munmap.
4. function do_vma_munmap invokes do_vmi_align_munmap.
5. function do_vmi_align_munmap invokes mt_init_flags.
6. function mt_init_flags invokes mt_external_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mt_external_lock.

————————————————————————————————These prompts belong to Node: 【security_mmap_addr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_mmap_addr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_mmap_addr in the linux kenrel source code.
## The security_mmap_addr function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes check_brk_limits.
4. function check_brk_limits invokes get_unmapped_area.
5. function get_unmapped_area invokes security_mmap_addr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_mmap_addr.

————————————————————————————————These prompts belong to Node: 【mt_find】at below.—————————————————————————————————— 
# Now I have a kernel internal function mt_find, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mt_find in the linux kenrel source code.
## The mt_find function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes find_vma.
6. function find_vma invokes mt_find.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mt_find.

————————————————————————————————These prompts belong to Node: 【vma_is_shared_writable】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_shared_writable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_shared_writable in the linux kenrel source code.
## The vma_is_shared_writable function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes writable_file_mapping_allowed.
9. function writable_file_mapping_allowed invokes vma_needs_dirty_tracking.
10. function vma_needs_dirty_tracking invokes vma_is_shared_writable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_shared_writable.

————————————————————————————————These prompts belong to Node: 【vm_ops_needs_writenotify】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_ops_needs_writenotify, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_ops_needs_writenotify in the linux kenrel source code.
## The vm_ops_needs_writenotify function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes writable_file_mapping_allowed.
9. function writable_file_mapping_allowed invokes vma_needs_dirty_tracking.
10. function vma_needs_dirty_tracking invokes vm_ops_needs_writenotify.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_ops_needs_writenotify.

————————————————————————————————These prompts belong to Node: 【userfaultfd_wp】at below.—————————————————————————————————— 
# Now I have a kernel internal function userfaultfd_wp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: userfaultfd_wp in the linux kenrel source code.
## The userfaultfd_wp function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes mmap_region.
5. function mmap_region invokes vma_set_page_prot.
6. function vma_set_page_prot invokes vma_wants_writenotify.
7. function vma_wants_writenotify invokes userfaultfd_wp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: userfaultfd_wp.

————————————————————————————————These prompts belong to Node: 【pgprot_modify】at below.—————————————————————————————————— 
# Now I have a kernel internal function pgprot_modify, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pgprot_modify in the linux kenrel source code.
## The pgprot_modify function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes mmap_region.
5. function mmap_region invokes vma_set_page_prot.
6. function vma_set_page_prot invokes vm_pgprot_modify.
7. function vm_pgprot_modify invokes pgprot_modify.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pgprot_modify.

————————————————————————————————These prompts belong to Node: 【check_data_rlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_data_rlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_data_rlimit in the linux kenrel source code.
## The check_data_rlimit function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes check_data_rlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_data_rlimit.

————————————————————————————————These prompts belong to Node: 【stack_guard_start_gap】at below.—————————————————————————————————— 
# Now I have a kernel internal function stack_guard_start_gap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stack_guard_start_gap in the linux kenrel source code.
## The stack_guard_start_gap function is called in the sys_brk system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_brk invokes __se_sys_brk.
2. function __se_sys_brk invokes __do_sys_brk.
3. function __do_sys_brk invokes vm_start_gap.
4. function vm_start_gap invokes stack_guard_start_gap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stack_guard_start_gap.

————————————————————————————————These prompts belong to Node: 【path_noexec】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_noexec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_noexec in the linux kenrel source code.
## The path_noexec function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes path_noexec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_noexec.

————————————————————————————————These prompts belong to Node: 【round_hint_to_min】at below.—————————————————————————————————— 
# Now I have a kernel internal function round_hint_to_min, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: round_hint_to_min in the linux kenrel source code.
## The round_hint_to_min function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes round_hint_to_min.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: round_hint_to_min.

————————————————————————————————These prompts belong to Node: 【calc_vm_prot_bits】at below.—————————————————————————————————— 
# Now I have a kernel internal function calc_vm_prot_bits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: calc_vm_prot_bits in the linux kenrel source code.
## The calc_vm_prot_bits function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes calc_vm_prot_bits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: calc_vm_prot_bits.

————————————————————————————————These prompts belong to Node: 【calc_vm_flag_bits】at below.—————————————————————————————————— 
# Now I have a kernel internal function calc_vm_flag_bits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: calc_vm_flag_bits in the linux kenrel source code.
## The calc_vm_flag_bits function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes calc_vm_flag_bits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: calc_vm_flag_bits.

————————————————————————————————These prompts belong to Node: 【call_mmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function call_mmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: call_mmap in the linux kenrel source code.
## The call_mmap function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes mmap_region.
5. function mmap_region invokes call_mmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: call_mmap.

————————————————————————————————These prompts belong to Node: 【arch_validate_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_validate_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_validate_flags in the linux kenrel source code.
## The arch_validate_flags function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes mmap_region.
5. function mmap_region invokes arch_validate_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_validate_flags.

————————————————————————————————These prompts belong to Node: 【file_mmap_size_max】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_mmap_size_max, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_mmap_size_max in the linux kenrel source code.
## The file_mmap_size_max function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes file_mmap_ok.
5. function file_mmap_ok invokes file_mmap_size_max.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_mmap_size_max.

————————————————————————————————These prompts belong to Node: 【__execute_only_pkey】at below.—————————————————————————————————— 
# Now I have a kernel internal function __execute_only_pkey, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __execute_only_pkey in the linux kenrel source code.
## The __execute_only_pkey function is called in the sys_remap_file_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_remap_file_pages invokes __se_sys_remap_file_pages.
2. function __se_sys_remap_file_pages invokes __do_sys_remap_file_pages.
3. function __do_sys_remap_file_pages invokes do_mmap.
4. function do_mmap invokes execute_only_pkey.
5. function execute_only_pkey invokes __execute_only_pkey.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __execute_only_pkey.

————————————————————————————————These prompts belong to Node: 【fget】at below.—————————————————————————————————— 
# Now I have a kernel internal function fget, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fget in the linux kenrel source code.
## The fget function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes fget.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fget.

————————————————————————————————These prompts belong to Node: 【huge_page_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function huge_page_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: huge_page_size in the linux kenrel source code.
## The huge_page_size function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes huge_page_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: huge_page_size.

————————————————————————————————These prompts belong to Node: 【hstate_sizelog】at below.—————————————————————————————————— 
# Now I have a kernel internal function hstate_sizelog, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hstate_sizelog in the linux kenrel source code.
## The hstate_sizelog function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes hstate_sizelog.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hstate_sizelog.

————————————————————————————————These prompts belong to Node: 【hugetlb_file_setup】at below.—————————————————————————————————— 
# Now I have a kernel internal function hugetlb_file_setup, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hugetlb_file_setup in the linux kenrel source code.
## The hugetlb_file_setup function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes hugetlb_file_setup.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hugetlb_file_setup.

————————————————————————————————These prompts belong to Node: 【HUGETLBFS_SB】at below.—————————————————————————————————— 
# Now I have a kernel internal function HUGETLBFS_SB, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: HUGETLBFS_SB in the linux kenrel source code.
## The HUGETLBFS_SB function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes hstate_file.
5. function hstate_file invokes hstate_inode.
6. function hstate_inode invokes HUGETLBFS_SB.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: HUGETLBFS_SB.

————————————————————————————————These prompts belong to Node: 【__audit_mmap_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_mmap_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_mmap_fd in the linux kenrel source code.
## The __audit_mmap_fd function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes audit_mmap_fd.
5. function audit_mmap_fd invokes __audit_mmap_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_mmap_fd.

————————————————————————————————These prompts belong to Node: 【audit_context】at below.—————————————————————————————————— 
# Now I have a kernel internal function audit_context, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: audit_context in the linux kenrel source code.
## The audit_context function is called in the sys_mmap_pgoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mmap_pgoff invokes __se_sys_mmap_pgoff.
2. function __se_sys_mmap_pgoff invokes __do_sys_mmap_pgoff.
3. function __do_sys_mmap_pgoff invokes ksys_mmap_pgoff.
4. function ksys_mmap_pgoff invokes audit_mmap_fd.
5. function audit_mmap_fd invokes audit_dummy_context.
6. function audit_dummy_context invokes audit_context.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: audit_context.

————————————————————————————————These prompts belong to Node: 【tlb_get_unmap_shift】at below.—————————————————————————————————— 
# Now I have a kernel internal function tlb_get_unmap_shift, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: tlb_get_unmap_shift in the linux kenrel source code.
## The tlb_get_unmap_shift function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes tlb_finish_mmu.
5. function tlb_finish_mmu invokes tlb_flush_mmu.
6. function tlb_flush_mmu invokes tlb_flush_mmu_tlbonly.
7. function tlb_flush_mmu_tlbonly invokes tlb_flush.
8. function tlb_flush invokes tlb_get_unmap_shift.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: tlb_get_unmap_shift.

————————————————————————————————These prompts belong to Node: 【tlb_table_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function tlb_table_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: tlb_table_init in the linux kenrel source code.
## The tlb_table_init function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes tlb_gather_mmu.
5. function tlb_gather_mmu invokes __tlb_gather_mmu.
6. function __tlb_gather_mmu invokes tlb_table_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: tlb_table_init.

————————————————————————————————These prompts belong to Node: 【is_swap_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_swap_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_swap_pmd in the linux kenrel source code.
## The is_swap_pmd function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes is_swap_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_swap_pmd.

————————————————————————————————These prompts belong to Node: 【__split_huge_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function __split_huge_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __split_huge_pmd in the linux kenrel source code.
## The __split_huge_pmd function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes __split_huge_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __split_huge_pmd.

————————————————————————————————These prompts belong to Node: 【change_huge_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function change_huge_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: change_huge_pmd in the linux kenrel source code.
## The change_huge_pmd function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_huge_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: change_huge_pmd.

————————————————————————————————These prompts belong to Node: 【tlb_change_page_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function tlb_change_page_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: tlb_change_page_size in the linux kenrel source code.
## The tlb_change_page_size function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes tlb_change_page_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: tlb_change_page_size.

————————————————————————————————These prompts belong to Node: 【folio_test_ksm】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_test_ksm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_test_ksm in the linux kenrel source code.
## The folio_test_ksm function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes folio_test_ksm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_test_ksm.

————————————————————————————————These prompts belong to Node: 【is_writable_device_private_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_writable_device_private_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_writable_device_private_entry in the linux kenrel source code.
## The is_writable_device_private_entry function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes is_writable_device_private_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_writable_device_private_entry.

————————————————————————————————These prompts belong to Node: 【is_writable_device_exclusive_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_writable_device_exclusive_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_writable_device_exclusive_entry in the linux kenrel source code.
## The is_writable_device_exclusive_entry function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes is_writable_device_exclusive_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_writable_device_exclusive_entry.

————————————————————————————————These prompts belong to Node: 【userfaultfd_wp_unpopulated】at below.—————————————————————————————————— 
# Now I have a kernel internal function userfaultfd_wp_unpopulated, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: userfaultfd_wp_unpopulated in the linux kenrel source code.
## The userfaultfd_wp_unpopulated function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes pgtable_populate_needed.
8. function pgtable_populate_needed invokes userfaultfd_wp_use_markers.
9. function userfaultfd_wp_use_markers invokes userfaultfd_wp_unpopulated.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: userfaultfd_wp_unpopulated.

————————————————————————————————These prompts belong to Node: 【__tlb_adjust_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function __tlb_adjust_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __tlb_adjust_range in the linux kenrel source code.
## The __tlb_adjust_range function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes tlb_flush_pte_range.
12. function tlb_flush_pte_range invokes __tlb_adjust_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __tlb_adjust_range.

————————————————————————————————These prompts belong to Node: 【pte_flags_need_flush】at below.—————————————————————————————————— 
# Now I have a kernel internal function pte_flags_need_flush, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pte_flags_need_flush in the linux kenrel source code.
## The pte_flags_need_flush function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes pte_needs_flush.
12. function pte_needs_flush invokes pte_flags_need_flush.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pte_flags_need_flush.

————————————————————————————————These prompts belong to Node: 【clear_saveddirty_shift】at below.—————————————————————————————————— 
# Now I have a kernel internal function clear_saveddirty_shift, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: clear_saveddirty_shift in the linux kenrel source code.
## The clear_saveddirty_shift function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes change_p4d_range.
8. function change_p4d_range invokes change_pud_range.
9. function change_pud_range invokes change_pmd_range.
10. function change_pmd_range invokes change_pte_range.
11. function change_pte_range invokes pte_modify.
12. function pte_modify invokes pte_clear_saveddirty.
13. function pte_clear_saveddirty invokes clear_saveddirty_shift.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: clear_saveddirty_shift.

————————————————————————————————These prompts belong to Node: 【flush_cache_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_cache_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_cache_range in the linux kenrel source code.
## The flush_cache_range function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes change_protection.
6. function change_protection invokes change_protection_range.
7. function change_protection_range invokes tlb_start_vma.
8. function tlb_start_vma invokes flush_cache_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_cache_range.

————————————————————————————————These prompts belong to Node: 【arch_has_pfn_modify_check】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_has_pfn_modify_check, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_has_pfn_modify_check in the linux kenrel source code.
## The arch_has_pfn_modify_check function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes arch_has_pfn_modify_check.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_has_pfn_modify_check.

————————————————————————————————These prompts belong to Node: 【vma_wants_manual_pte_write_upgrade】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_wants_manual_pte_write_upgrade, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_wants_manual_pte_write_upgrade in the linux kenrel source code.
## The vma_wants_manual_pte_write_upgrade function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mprotect_fixup.
5. function mprotect_fixup invokes vma_wants_manual_pte_write_upgrade.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_wants_manual_pte_write_upgrade.

————————————————————————————————These prompts belong to Node: 【arch_validate_prot】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_validate_prot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_validate_prot in the linux kenrel source code.
## The arch_validate_prot function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes arch_validate_prot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_validate_prot.

————————————————————————————————These prompts belong to Node: 【mm_pkey_is_allocated】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_pkey_is_allocated, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_pkey_is_allocated in the linux kenrel source code.
## The mm_pkey_is_allocated function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes mm_pkey_is_allocated.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_pkey_is_allocated.

————————————————————————————————These prompts belong to Node: 【security_file_mprotect】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_mprotect, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_mprotect in the linux kenrel source code.
## The security_file_mprotect function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes security_file_mprotect.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_mprotect.

————————————————————————————————These prompts belong to Node: 【__arch_override_mprotect_pkey】at below.—————————————————————————————————— 
# Now I have a kernel internal function __arch_override_mprotect_pkey, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __arch_override_mprotect_pkey in the linux kenrel source code.
## The __arch_override_mprotect_pkey function is called in the sys_mprotect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mprotect invokes __se_sys_mprotect.
2. function __se_sys_mprotect invokes __do_sys_mprotect.
3. function __do_sys_mprotect invokes do_mprotect_pkey.
4. function do_mprotect_pkey invokes arch_override_mprotect_pkey.
5. function arch_override_mprotect_pkey invokes __arch_override_mprotect_pkey.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __arch_override_mprotect_pkey.

————————————————————————————————These prompts belong to Node: 【mm_pkey_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_pkey_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_pkey_alloc in the linux kenrel source code.
## The mm_pkey_alloc function is called in the sys_pkey_alloc system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pkey_alloc invokes __se_sys_pkey_alloc.
2. function __se_sys_pkey_alloc invokes __do_sys_pkey_alloc.
3. function __do_sys_pkey_alloc invokes mm_pkey_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_pkey_alloc.

————————————————————————————————These prompts belong to Node: 【arch_set_user_pkey_access】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_set_user_pkey_access, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_set_user_pkey_access in the linux kenrel source code.
## The arch_set_user_pkey_access function is called in the sys_pkey_alloc system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pkey_alloc invokes __se_sys_pkey_alloc.
2. function __se_sys_pkey_alloc invokes __do_sys_pkey_alloc.
3. function __do_sys_pkey_alloc invokes arch_set_user_pkey_access.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_set_user_pkey_access.

————————————————————————————————These prompts belong to Node: 【pud_trans_huge】at below.—————————————————————————————————— 
# Now I have a kernel internal function pud_trans_huge, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pud_trans_huge in the linux kenrel source code.
## The pud_trans_huge function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes pud_trans_huge.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pud_trans_huge.

————————————————————————————————These prompts belong to Node: 【move_soft_dirty_pte】at below.—————————————————————————————————— 
# Now I have a kernel internal function move_soft_dirty_pte, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: move_soft_dirty_pte in the linux kenrel source code.
## The move_soft_dirty_pte function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_ptes.
6. function move_ptes invokes move_soft_dirty_pte.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: move_soft_dirty_pte.

————————————————————————————————These prompts belong to Node: 【huge_page_shift】at below.—————————————————————————————————— 
# Now I have a kernel internal function huge_page_shift, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: huge_page_shift in the linux kenrel source code.
## The huge_page_shift function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_pgt_entry.
6. function move_pgt_entry invokes move_normal_pmd.
7. function move_normal_pmd invokes huge_page_shift.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: huge_page_shift.

————————————————————————————————These prompts belong to Node: 【arch_supports_page_table_move】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_supports_page_table_move, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_supports_page_table_move in the linux kenrel source code.
## The arch_supports_page_table_move function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_pgt_entry.
6. function move_pgt_entry invokes move_normal_pmd.
7. function move_normal_pmd invokes arch_supports_page_table_move.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_supports_page_table_move.

————————————————————————————————These prompts belong to Node: 【paravirt_alloc_pmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function paravirt_alloc_pmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: paravirt_alloc_pmd in the linux kenrel source code.
## The paravirt_alloc_pmd function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_pgt_entry.
6. function move_pgt_entry invokes move_normal_pud.
7. function move_normal_pud invokes pud_populate.
8. function pud_populate invokes paravirt_alloc_pmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: paravirt_alloc_pmd.

————————————————————————————————These prompts belong to Node: 【native_make_pud】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_make_pud, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_make_pud in the linux kenrel source code.
## The native_make_pud function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_pgt_entry.
6. function move_pgt_entry invokes move_normal_pud.
7. function move_normal_pud invokes native_pud_clear.
8. function native_pud_clear invokes native_make_pud.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_make_pud.

————————————————————————————————These prompts belong to Node: 【native_set_pud】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_set_pud, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_set_pud in the linux kenrel source code.
## The native_set_pud function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes move_pgt_entry.
6. function move_pgt_entry invokes move_normal_pud.
7. function move_normal_pud invokes native_pud_clear.
8. function native_pud_clear invokes native_set_pud.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_set_pud.

————————————————————————————————These prompts belong to Node: 【can_align_down】at below.—————————————————————————————————— 
# Now I have a kernel internal function can_align_down, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: can_align_down in the linux kenrel source code.
## The can_align_down function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes move_page_tables.
5. function move_page_tables invokes try_realign_addr.
6. function try_realign_addr invokes can_align_down.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: can_align_down.

————————————————————————————————These prompts belong to Node: 【huge_page_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function huge_page_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: huge_page_mask in the linux kenrel source code.
## The huge_page_mask function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes huge_page_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: huge_page_mask.

————————————————————————————————These prompts belong to Node: 【vma_expandable】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_expandable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_expandable in the linux kenrel source code.
## The vma_expandable function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes vma_expandable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_expandable.

————————————————————————————————These prompts belong to Node: 【mremap_userfaultfd_complete】at below.—————————————————————————————————— 
# Now I have a kernel internal function mremap_userfaultfd_complete, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mremap_userfaultfd_complete in the linux kenrel source code.
## The mremap_userfaultfd_complete function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes mremap_userfaultfd_complete.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mremap_userfaultfd_complete.

————————————————————————————————These prompts belong to Node: 【ksm_madvise】at below.—————————————————————————————————— 
# Now I have a kernel internal function ksm_madvise, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ksm_madvise in the linux kenrel source code.
## The ksm_madvise function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes ksm_madvise.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ksm_madvise.

————————————————————————————————These prompts belong to Node: 【mremap_userfaultfd_prep】at below.—————————————————————————————————— 
# Now I have a kernel internal function mremap_userfaultfd_prep, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mremap_userfaultfd_prep in the linux kenrel source code.
## The mremap_userfaultfd_prep function is called in the sys_mremap system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mremap invokes __se_sys_mremap.
2. function __se_sys_mremap invokes __do_sys_mremap.
3. function __do_sys_mremap invokes move_vma.
4. function move_vma invokes mremap_userfaultfd_prep.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mremap_userfaultfd_prep.

————————————————————————————————These prompts belong to Node: 【walk_page_test】at below.—————————————————————————————————— 
# Now I have a kernel internal function walk_page_test, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: walk_page_test in the linux kenrel source code.
## The walk_page_test function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes walk_page_test.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: walk_page_test.

————————————————————————————————These prompts belong to Node: 【real_depth】at below.—————————————————————————————————— 
# Now I have a kernel internal function real_depth, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: real_depth in the linux kenrel source code.
## The real_depth function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes real_depth.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: real_depth.

————————————————————————————————These prompts belong to Node: 【walk_pte_range_inner】at below.—————————————————————————————————— 
# Now I have a kernel internal function walk_pte_range_inner, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: walk_pte_range_inner in the linux kenrel source code.
## The walk_pte_range_inner function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes walk_pte_range_inner.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: walk_pte_range_inner.

————————————————————————————————These prompts belong to Node: 【hugetlb_walk】at below.—————————————————————————————————— 
# Now I have a kernel internal function hugetlb_walk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hugetlb_walk in the linux kenrel source code.
## The hugetlb_walk function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_hugetlb_range.
7. function walk_hugetlb_range invokes hugetlb_walk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hugetlb_walk.

————————————————————————————————These prompts belong to Node: 【native_make_pgd】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_make_pgd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_make_pgd in the linux kenrel source code.
## The native_make_pgd function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes pgd_none_or_clear_bad.
8. function pgd_none_or_clear_bad invokes pgd_clear_bad.
9. function pgd_clear_bad invokes native_pgd_clear.
10. function native_pgd_clear invokes native_make_pgd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_make_pgd.

————————————————————————————————These prompts belong to Node: 【native_make_p4d】at below.—————————————————————————————————— 
# Now I have a kernel internal function native_make_p4d, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: native_make_p4d in the linux kenrel source code.
## The native_make_p4d function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes p4d_none_or_clear_bad.
9. function p4d_none_or_clear_bad invokes p4d_clear_bad.
10. function p4d_clear_bad invokes native_p4d_clear.
11. function native_p4d_clear invokes native_make_p4d.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: native_make_p4d.

————————————————————————————————These prompts belong to Node: 【pmdp_get_lockless_start】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmdp_get_lockless_start, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmdp_get_lockless_start in the linux kenrel source code.
## The pmdp_get_lockless_start function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes pte_offset_map.
12. function pte_offset_map invokes __pte_offset_map.
13. function __pte_offset_map invokes pmdp_get_lockless_start.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmdp_get_lockless_start.

————————————————————————————————These prompts belong to Node: 【pmdp_get_lockless_end】at below.—————————————————————————————————— 
# Now I have a kernel internal function pmdp_get_lockless_end, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pmdp_get_lockless_end in the linux kenrel source code.
## The pmdp_get_lockless_end function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes pte_offset_map.
12. function pte_offset_map invokes __pte_offset_map.
13. function __pte_offset_map invokes pmdp_get_lockless_end.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pmdp_get_lockless_end.

————————————————————————————————These prompts belong to Node: 【is_pmd_migration_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_pmd_migration_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_pmd_migration_entry in the linux kenrel source code.
## The is_pmd_migration_entry function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes do_mincore.
4. function do_mincore invokes walk_page_range.
5. function walk_page_range invokes __walk_page_range.
6. function __walk_page_range invokes walk_pgd_range.
7. function walk_pgd_range invokes walk_p4d_range.
8. function walk_p4d_range invokes walk_pud_range.
9. function walk_pud_range invokes walk_pmd_range.
10. function walk_pmd_range invokes walk_pte_range.
11. function walk_pte_range invokes pte_offset_map.
12. function pte_offset_map invokes __pte_offset_map.
13. function __pte_offset_map invokes is_pmd_migration_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_pmd_migration_entry.

————————————————————————————————These prompts belong to Node: 【vma_pgoff_address】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_pgoff_address, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_pgoff_address in the linux kenrel source code.
## The vma_pgoff_address function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes page_address_in_vma.
6. function page_address_in_vma invokes vma_address.
7. function vma_address invokes vma_pgoff_address.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_pgoff_address.

————————————————————————————————These prompts belong to Node: 【PageTransTail】at below.—————————————————————————————————— 
# Now I have a kernel internal function PageTransTail, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PageTransTail in the linux kenrel source code.
## The PageTransTail function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes page_address_in_vma.
6. function page_address_in_vma invokes vma_address.
7. function vma_address invokes page_to_pgoff.
8. function page_to_pgoff invokes PageTransTail.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PageTransTail.

————————————————————————————————These prompts belong to Node: 【arch_tlbbatch_flush】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_tlbbatch_flush, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_tlbbatch_flush in the linux kenrel source code.
## The arch_tlbbatch_flush function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes try_to_unmap_flush.
10. function try_to_unmap_flush invokes arch_tlbbatch_flush.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_tlbbatch_flush.

————————————————————————————————These prompts belong to Node: 【kmap_local_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmap_local_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmap_local_page in the linux kenrel source code.
## The kmap_local_page function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes kernel_init_pages.
9. function kernel_init_pages invokes clear_highpage_kasan_tagged.
10. function clear_highpage_kasan_tagged invokes kmap_local_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmap_local_page.

————————————————————————————————These prompts belong to Node: 【__kunmap_local】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kunmap_local, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kunmap_local in the linux kenrel source code.
## The __kunmap_local function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes kernel_init_pages.
9. function kernel_init_pages invokes clear_highpage_kasan_tagged.
10. function clear_highpage_kasan_tagged invokes __kunmap_local.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kunmap_local.

————————————————————————————————These prompts belong to Node: 【print_modules】at below.—————————————————————————————————— 
# Now I have a kernel internal function print_modules, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: print_modules in the linux kenrel source code.
## The print_modules function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes free_tail_page_prepare.
9. function free_tail_page_prepare invokes bad_page.
10. function bad_page invokes print_modules.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: print_modules.

————————————————————————————————These prompts belong to Node: 【get_pcppage_migratetype】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_pcppage_migratetype, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_pcppage_migratetype in the linux kenrel source code.
## The get_pcppage_migratetype function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes get_pcppage_migratetype.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_pcppage_migratetype.

————————————————————————————————These prompts belong to Node: 【order_to_pindex】at below.—————————————————————————————————— 
# Now I have a kernel internal function order_to_pindex, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: order_to_pindex in the linux kenrel source code.
## The order_to_pindex function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_commit.
8. function free_unref_page_commit invokes order_to_pindex.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: order_to_pindex.

————————————————————————————————These prompts belong to Node: 【nr_pcp_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function nr_pcp_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: nr_pcp_free in the linux kenrel source code.
## The nr_pcp_free function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_commit.
8. function free_unref_page_commit invokes nr_pcp_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: nr_pcp_free.

————————————————————————————————These prompts belong to Node: 【__zone_watermark_unusable_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function __zone_watermark_unusable_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __zone_watermark_unusable_free in the linux kenrel source code.
## The __zone_watermark_unusable_free function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_commit.
8. function free_unref_page_commit invokes zone_watermark_ok.
9. function zone_watermark_ok invokes __zone_watermark_ok.
10. function __zone_watermark_ok invokes __zone_watermark_unusable_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __zone_watermark_unusable_free.

————————————————————————————————These prompts belong to Node: 【pindex_to_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function pindex_to_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pindex_to_order in the linux kenrel source code.
## The pindex_to_order function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_commit.
8. function free_unref_page_commit invokes free_pcppages_bulk.
9. function free_pcppages_bulk invokes pindex_to_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pindex_to_order.

————————————————————————————————These prompts belong to Node: 【set_pcppage_migratetype】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_pcppage_migratetype, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_pcppage_migratetype in the linux kenrel source code.
## The set_pcppage_migratetype function is called in the sys_mincore system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mincore invokes __se_sys_mincore.
2. function __se_sys_mincore invokes __do_sys_mincore.
3. function __do_sys_mincore invokes free_pages.
4. function free_pages invokes __free_pages.
5. function __free_pages invokes free_the_page.
6. function free_the_page invokes free_unref_page.
7. function free_unref_page invokes free_unref_page_prepare.
8. function free_unref_page_prepare invokes set_pcppage_migratetype.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_pcppage_migratetype.

————————————————————————————————These prompts belong to Node: 【process_madvise_behavior_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function process_madvise_behavior_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: process_madvise_behavior_valid in the linux kenrel source code.
## The process_madvise_behavior_valid function is called in the sys_process_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_madvise invokes __se_sys_process_madvise.
2. function __se_sys_process_madvise invokes __do_sys_process_madvise.
3. function __do_sys_process_madvise invokes process_madvise_behavior_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: process_madvise_behavior_valid.

————————————————————————————————These prompts belong to Node: 【IS_ERR_OR_NULL】at below.—————————————————————————————————— 
# Now I have a kernel internal function IS_ERR_OR_NULL, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: IS_ERR_OR_NULL in the linux kenrel source code.
## The IS_ERR_OR_NULL function is called in the sys_process_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_madvise invokes __se_sys_process_madvise.
2. function __se_sys_process_madvise invokes __do_sys_process_madvise.
3. function __do_sys_process_madvise invokes IS_ERR_OR_NULL.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: IS_ERR_OR_NULL.

————————————————————————————————These prompts belong to Node: 【iter_iov】at below.—————————————————————————————————— 
# Now I have a kernel internal function iter_iov, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iter_iov in the linux kenrel source code.
## The iter_iov function is called in the sys_process_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_madvise invokes __se_sys_process_madvise.
2. function __se_sys_process_madvise invokes __do_sys_process_madvise.
3. function __do_sys_process_madvise invokes iter_iov.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iter_iov.

————————————————————————————————These prompts belong to Node: 【iov_iter_advance】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_advance, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_advance in the linux kenrel source code.
## The iov_iter_advance function is called in the sys_process_madvise system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_madvise invokes __se_sys_process_madvise.
2. function __se_sys_process_madvise invokes __do_sys_process_madvise.
3. function __do_sys_process_madvise invokes iov_iter_advance.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_advance.

————————————————————————————————These prompts belong to Node: 【xas_set_update】at below.—————————————————————————————————— 
# Now I have a kernel internal function xas_set_update, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xas_set_update in the linux kenrel source code.
## The xas_set_update function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes swap_range_free.
9. function swap_range_free invokes clear_shadow_from_swap_cache.
10. function clear_shadow_from_swap_cache invokes xas_set_update.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xas_set_update.

————————————————————————————————These prompts belong to Node: 【xa_init_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_init_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_init_flags in the linux kenrel source code.
## The xa_init_flags function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes init_swap_address_space.
4. function init_swap_address_space invokes xa_init_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_init_flags.

————————————————————————————————These prompts belong to Node: 【swap_type_to_swap_info】at below.—————————————————————————————————— 
# Now I have a kernel internal function swap_type_to_swap_info, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swap_type_to_swap_info in the linux kenrel source code.
## The swap_type_to_swap_info function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_info_get_cont.
8. function swap_info_get_cont invokes _swap_info_get.
9. function _swap_info_get invokes swp_swap_info.
10. function swp_swap_info invokes swap_type_to_swap_info.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swap_type_to_swap_info.

————————————————————————————————These prompts belong to Node: 【__get_random_u32_below】at below.—————————————————————————————————— 
# Now I have a kernel internal function __get_random_u32_below, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __get_random_u32_below in the linux kenrel source code.
## The __get_random_u32_below function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes get_random_u32_inclusive.
4. function get_random_u32_inclusive invokes get_random_u32_below.
5. function get_random_u32_below invokes __get_random_u32_below.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __get_random_u32_below.

————————————————————————————————These prompts belong to Node: 【cluster_is_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_is_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_is_free in the linux kenrel source code.
## The cluster_is_free function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes inc_cluster_info_page.
5. function inc_cluster_info_page invokes cluster_is_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_is_free.

————————————————————————————————These prompts belong to Node: 【cluster_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_count in the linux kenrel source code.
## The cluster_count function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes cluster_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_count.

————————————————————————————————These prompts belong to Node: 【cluster_set_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_count in the linux kenrel source code.
## The cluster_set_count function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes cluster_set_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_count.

————————————————————————————————These prompts belong to Node: 【cluster_set_count_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_count_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_count_flag in the linux kenrel source code.
## The cluster_set_count_flag function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes setup_swap_map_and_extents.
4. function setup_swap_map_and_extents invokes inc_cluster_info_page.
5. function inc_cluster_info_page invokes alloc_cluster.
6. function alloc_cluster invokes cluster_set_count_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_count_flag.

————————————————————————————————These prompts belong to Node: 【cluster_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_next in the linux kenrel source code.
## The cluster_next function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes free_cluster.
10. function free_cluster invokes swap_cluster_schedule_discard.
11. function swap_cluster_schedule_discard invokes cluster_list_add_tail.
12. function cluster_list_add_tail invokes cluster_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_next.

————————————————————————————————These prompts belong to Node: 【cluster_set_null】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_null, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_null in the linux kenrel source code.
## The cluster_set_null function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes cluster_set_null.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_null.

————————————————————————————————These prompts belong to Node: 【cluster_set_next_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_next_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_next_flag in the linux kenrel source code.
## The cluster_set_next_flag function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes free_cluster.
10. function free_cluster invokes swap_cluster_schedule_discard.
11. function swap_cluster_schedule_discard invokes cluster_list_add_tail.
12. function cluster_list_add_tail invokes cluster_set_next_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_next_flag.

————————————————————————————————These prompts belong to Node: 【filemap_get_folio】at below.—————————————————————————————————— 
# Now I have a kernel internal function filemap_get_folio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: filemap_get_folio in the linux kenrel source code.
## The filemap_get_folio function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes filemap_get_folio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: filemap_get_folio.

————————————————————————————————These prompts belong to Node: 【gfp_has_io_fs】at below.—————————————————————————————————— 
# Now I have a kernel internal function gfp_has_io_fs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: gfp_has_io_fs in the linux kenrel source code.
## The gfp_has_io_fs function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes unuse_mm.
5. function unuse_mm invokes unuse_vma.
6. function unuse_vma invokes unuse_p4d_range.
7. function unuse_p4d_range invokes unuse_pud_range.
8. function unuse_pud_range invokes unuse_pmd_range.
9. function unuse_pmd_range invokes unuse_pte_range.
10. function unuse_pte_range invokes folio_free_swap.
11. function folio_free_swap invokes pm_suspended_storage.
12. function pm_suspended_storage invokes gfp_has_io_fs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: gfp_has_io_fs.

————————————————————————————————These prompts belong to Node: 【swap_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function swap_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swap_count in the linux kenrel source code.
## The swap_count function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes unuse_mm.
5. function unuse_mm invokes unuse_vma.
6. function unuse_vma invokes unuse_p4d_range.
7. function unuse_p4d_range invokes unuse_pud_range.
8. function unuse_pud_range invokes unuse_pmd_range.
9. function unuse_pmd_range invokes unuse_pte_range.
10. function unuse_pte_range invokes folio_free_swap.
11. function folio_free_swap invokes folio_swapped.
12. function folio_swapped invokes swap_swapcount.
13. function swap_swapcount invokes swap_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swap_count.

————————————————————————————————These prompts belong to Node: 【cluster_is_null】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_is_null, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_is_null in the linux kenrel source code.
## The cluster_is_null function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes free_cluster.
10. function free_cluster invokes swap_cluster_schedule_discard.
11. function swap_cluster_schedule_discard invokes cluster_list_add_tail.
12. function cluster_list_add_tail invokes cluster_list_empty.
13. function cluster_list_empty invokes cluster_is_null.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_is_null.

————————————————————————————————These prompts belong to Node: 【cluster_set_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_flag in the linux kenrel source code.
## The cluster_set_flag function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes free_cluster.
10. function free_cluster invokes __free_cluster.
11. function __free_cluster invokes cluster_set_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_flag.

————————————————————————————————These prompts belong to Node: 【cluster_set_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function cluster_set_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cluster_set_next in the linux kenrel source code.
## The cluster_set_next function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes dec_cluster_info_page.
9. function dec_cluster_info_page invokes free_cluster.
10. function free_cluster invokes swap_cluster_schedule_discard.
11. function swap_cluster_schedule_discard invokes cluster_list_add_tail.
12. function cluster_list_add_tail invokes cluster_set_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cluster_set_next.

————————————————————————————————These prompts belong to Node: 【blkdev_issue_discard】at below.—————————————————————————————————— 
# Now I have a kernel internal function blkdev_issue_discard, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blkdev_issue_discard in the linux kenrel source code.
## The blkdev_issue_discard function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes discard_swap.
4. function discard_swap invokes blkdev_issue_discard.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blkdev_issue_discard.

————————————————————————————————These prompts belong to Node: 【plist_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function plist_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: plist_del in the linux kenrel source code.
## The plist_del function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes del_from_avail_list.
4. function del_from_avail_list invokes __del_from_avail_list.
5. function __del_from_avail_list invokes plist_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: plist_del.

————————————————————————————————These prompts belong to Node: 【mem_cgroup_uncharge_swap】at below.—————————————————————————————————— 
# Now I have a kernel internal function mem_cgroup_uncharge_swap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mem_cgroup_uncharge_swap in the linux kenrel source code.
## The mem_cgroup_uncharge_swap function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes mem_cgroup_uncharge_swap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mem_cgroup_uncharge_swap.

————————————————————————————————These prompts belong to Node: 【arch_swap_invalidate_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_swap_invalidate_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_swap_invalidate_page in the linux kenrel source code.
## The arch_swap_invalidate_page function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes swap_range_free.
9. function swap_range_free invokes arch_swap_invalidate_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_swap_invalidate_page.

————————————————————————————————These prompts belong to Node: 【zswap_invalidate】at below.—————————————————————————————————— 
# Now I have a kernel internal function zswap_invalidate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zswap_invalidate in the linux kenrel source code.
## The zswap_invalidate function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes swap_range_free.
9. function swap_range_free invokes zswap_invalidate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zswap_invalidate.

————————————————————————————————These prompts belong to Node: 【plist_add】at below.—————————————————————————————————— 
# Now I have a kernel internal function plist_add, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: plist_add in the linux kenrel source code.
## The plist_add function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes swap_entry_free.
8. function swap_entry_free invokes swap_range_free.
9. function swap_range_free invokes add_to_avail_list.
10. function add_to_avail_list invokes plist_add.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: plist_add.

————————————————————————————————These prompts belong to Node: 【sort】at below.—————————————————————————————————— 
# Now I have a kernel internal function sort, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sort in the linux kenrel source code.
## The sort function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes disable_swap_slots_cache_lock.
4. function disable_swap_slots_cache_lock invokes __drain_swap_slots_cache.
5. function __drain_swap_slots_cache invokes drain_slots_cache_cpu.
6. function drain_slots_cache_cpu invokes swapcache_free_entries.
7. function swapcache_free_entries invokes sort.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sort.

————————————————————————————————These prompts belong to Node: 【rb_first】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_first, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_first in the linux kenrel source code.
## The rb_first function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes discard_swap.
4. function discard_swap invokes first_se.
5. function first_se invokes rb_first.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_first.

————————————————————————————————These prompts belong to Node: 【getname】at below.—————————————————————————————————— 
# Now I have a kernel internal function getname, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: getname in the linux kenrel source code.
## The getname function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes getname.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: getname.

————————————————————————————————These prompts belong to Node: 【file_open_name】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_open_name, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_open_name in the linux kenrel source code.
## The file_open_name function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes file_open_name.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_open_name.

————————————————————————————————These prompts belong to Node: 【set_current_oom_origin】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_current_oom_origin, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_current_oom_origin in the linux kenrel source code.
## The set_current_oom_origin function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes set_current_oom_origin.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_current_oom_origin.

————————————————————————————————These prompts belong to Node: 【clear_current_oom_origin】at below.—————————————————————————————————— 
# Now I have a kernel internal function clear_current_oom_origin, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: clear_current_oom_origin in the linux kenrel source code.
## The clear_current_oom_origin function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes clear_current_oom_origin.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: clear_current_oom_origin.

————————————————————————————————These prompts belong to Node: 【synchronize_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function synchronize_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: synchronize_rcu in the linux kenrel source code.
## The synchronize_rcu function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes synchronize_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: synchronize_rcu.

————————————————————————————————These prompts belong to Node: 【arch_swap_invalidate_area】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_swap_invalidate_area, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_swap_invalidate_area in the linux kenrel source code.
## The arch_swap_invalidate_area function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes arch_swap_invalidate_area.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_swap_invalidate_area.

————————————————————————————————These prompts belong to Node: 【zswap_swapoff】at below.—————————————————————————————————— 
# Now I have a kernel internal function zswap_swapoff, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zswap_swapoff in the linux kenrel source code.
## The zswap_swapoff function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes zswap_swapoff.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zswap_swapoff.

————————————————————————————————These prompts belong to Node: 【swap_cgroup_swapoff】at below.—————————————————————————————————— 
# Now I have a kernel internal function swap_cgroup_swapoff, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swap_cgroup_swapoff in the linux kenrel source code.
## The swap_cgroup_swapoff function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes swap_cgroup_swapoff.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swap_cgroup_swapoff.

————————————————————————————————These prompts belong to Node: 【set_blocksize】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_blocksize, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_blocksize in the linux kenrel source code.
## The set_blocksize function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes set_blocksize.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_blocksize.

————————————————————————————————These prompts belong to Node: 【bdev_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function bdev_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bdev_release in the linux kenrel source code.
## The bdev_release function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes bdev_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bdev_release.

————————————————————————————————These prompts belong to Node: 【filp_close】at below.—————————————————————————————————— 
# Now I have a kernel internal function filp_close, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: filp_close in the linux kenrel source code.
## The filp_close function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes filp_close.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: filp_close.

————————————————————————————————These prompts belong to Node: 【putname】at below.—————————————————————————————————— 
# Now I have a kernel internal function putname, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: putname in the linux kenrel source code.
## The putname function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes putname.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: putname.

————————————————————————————————These prompts belong to Node: 【list_is_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_is_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_is_head in the linux kenrel source code.
## The list_is_head function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes drain_mmlist.
4. function drain_mmlist invokes list_is_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_is_head.

————————————————————————————————These prompts belong to Node: 【bdev_get_queue】at below.—————————————————————————————————— 
# Now I have a kernel internal function bdev_get_queue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bdev_get_queue in the linux kenrel source code.
## The bdev_get_queue function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes bdev_nonrot.
4. function bdev_nonrot invokes bdev_get_queue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bdev_get_queue.

————————————————————————————————These prompts belong to Node: 【percpu_ref_kill_and_confirm】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_kill_and_confirm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_kill_and_confirm in the linux kenrel source code.
## The percpu_ref_kill_and_confirm function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes percpu_ref_kill.
4. function percpu_ref_kill invokes percpu_ref_kill_and_confirm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_kill_and_confirm.

————————————————————————————————These prompts belong to Node: 【swap_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function swap_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swap_node in the linux kenrel source code.
## The swap_node function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes reinsert_swap_info.
4. function reinsert_swap_info invokes setup_swap_info.
5. function setup_swap_info invokes swap_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swap_node.

————————————————————————————————These prompts belong to Node: 【ksm_might_need_to_copy】at below.—————————————————————————————————— 
# Now I have a kernel internal function ksm_might_need_to_copy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ksm_might_need_to_copy in the linux kenrel source code.
## The ksm_might_need_to_copy function is called in the sys_swapoff system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapoff invokes __se_sys_swapoff.
2. function __se_sys_swapoff invokes __do_sys_swapoff.
3. function __do_sys_swapoff invokes try_to_unuse.
4. function try_to_unuse invokes unuse_mm.
5. function unuse_mm invokes unuse_vma.
6. function unuse_vma invokes unuse_p4d_range.
7. function unuse_p4d_range invokes unuse_pud_range.
8. function unuse_pud_range invokes unuse_pmd_range.
9. function unuse_pmd_range invokes unuse_pte_range.
10. function unuse_pte_range invokes unuse_pte.
11. function unuse_pte invokes ksm_might_need_to_copy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ksm_might_need_to_copy.

————————————————————————————————These prompts belong to Node: 【cant_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function cant_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cant_mount in the linux kenrel source code.
## The cant_mount function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes cant_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cant_mount.

————————————————————————————————These prompts belong to Node: 【read_mapping_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function read_mapping_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: read_mapping_page in the linux kenrel source code.
## The read_mapping_page function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes read_mapping_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: read_mapping_page.

————————————————————————————————These prompts belong to Node: 【kmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmap in the linux kenrel source code.
## The kmap function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes kmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmap.

————————————————————————————————These prompts belong to Node: 【swap_cgroup_swapon】at below.—————————————————————————————————— 
# Now I have a kernel internal function swap_cgroup_swapon, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: swap_cgroup_swapon in the linux kenrel source code.
## The swap_cgroup_swapon function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes swap_cgroup_swapon.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: swap_cgroup_swapon.

————————————————————————————————These prompts belong to Node: 【kunmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function kunmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kunmap in the linux kenrel source code.
## The kunmap function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes kunmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kunmap.

————————————————————————————————These prompts belong to Node: 【zswap_swapon】at below.—————————————————————————————————— 
# Now I have a kernel internal function zswap_swapon, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zswap_swapon in the linux kenrel source code.
## The zswap_swapon function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes enable_swap_info.
4. function enable_swap_info invokes zswap_swapon.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zswap_swapon.

————————————————————————————————These prompts belong to Node: 【percpu_ref_resurrect】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_resurrect, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_resurrect in the linux kenrel source code.
## The percpu_ref_resurrect function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes enable_swap_info.
4. function enable_swap_info invokes percpu_ref_resurrect.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_resurrect.

————————————————————————————————These prompts belong to Node: 【inode_dio_wait】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_dio_wait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_dio_wait in the linux kenrel source code.
## The inode_dio_wait function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes inode_drain_writes.
4. function inode_drain_writes invokes inode_dio_wait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_dio_wait.

————————————————————————————————These prompts belong to Node: 【filemap_write_and_wait】at below.—————————————————————————————————— 
# Now I have a kernel internal function filemap_write_and_wait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: filemap_write_and_wait in the linux kenrel source code.
## The filemap_write_and_wait function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes inode_drain_writes.
4. function inode_drain_writes invokes filemap_write_and_wait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: filemap_write_and_wait.

————————————————————————————————These prompts belong to Node: 【i_size_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function i_size_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: i_size_read in the linux kenrel source code.
## The i_size_read function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes read_swap_header.
4. function read_swap_header invokes i_size_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: i_size_read.

————————————————————————————————These prompts belong to Node: 【hlist_bl_unhashed】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_bl_unhashed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_bl_unhashed in the linux kenrel source code.
## The hlist_bl_unhashed function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes d_unlinked.
4. function d_unlinked invokes d_unhashed.
5. function d_unhashed invokes hlist_bl_unhashed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_bl_unhashed.

————————————————————————————————These prompts belong to Node: 【bdev_open_by_dev】at below.—————————————————————————————————— 
# Now I have a kernel internal function bdev_open_by_dev, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bdev_open_by_dev in the linux kenrel source code.
## The bdev_open_by_dev function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes claim_swapfile.
4. function claim_swapfile invokes bdev_open_by_dev.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bdev_open_by_dev.

————————————————————————————————These prompts belong to Node: 【block_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function block_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: block_size in the linux kenrel source code.
## The block_size function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes claim_swapfile.
4. function claim_swapfile invokes block_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: block_size.

————————————————————————————————These prompts belong to Node: 【blk_queue_zoned_model】at below.—————————————————————————————————— 
# Now I have a kernel internal function blk_queue_zoned_model, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blk_queue_zoned_model in the linux kenrel source code.
## The blk_queue_zoned_model function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes claim_swapfile.
4. function claim_swapfile invokes bdev_is_zoned.
5. function bdev_is_zoned invokes blk_queue_is_zoned.
6. function blk_queue_is_zoned invokes blk_queue_zoned_model.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blk_queue_zoned_model.

————————————————————————————————These prompts belong to Node: 【percpu_ref_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_init in the linux kenrel source code.
## The percpu_ref_init function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes percpu_ref_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_init.

————————————————————————————————These prompts belong to Node: 【percpu_ref_exit】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_exit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_exit in the linux kenrel source code.
## The percpu_ref_exit function is called in the sys_swapon system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_swapon invokes __se_sys_swapon.
2. function __se_sys_swapon invokes __do_sys_swapon.
3. function __do_sys_swapon invokes alloc_swap_info.
4. function alloc_swap_info invokes percpu_ref_exit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_exit.

————————————————————————————————These prompts belong to Node: 【interval_tree_iter_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function interval_tree_iter_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: interval_tree_iter_next in the linux kenrel source code.
## The interval_tree_iter_next function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_next.
8. function mn_itree_inv_next invokes interval_tree_iter_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: interval_tree_iter_next.

————————————————————————————————These prompts belong to Node: 【interval_tree_iter_first】at below.—————————————————————————————————— 
# Now I have a kernel internal function interval_tree_iter_first, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: interval_tree_iter_first in the linux kenrel source code.
## The interval_tree_iter_first function is called in the sys_process_mrelease system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_process_mrelease invokes __se_sys_process_mrelease.
2. function __se_sys_process_mrelease invokes __do_sys_process_mrelease.
3. function __do_sys_process_mrelease invokes __oom_reap_task_mm.
4. function __oom_reap_task_mm invokes mmu_notifier_invalidate_range_start_nonblock.
5. function mmu_notifier_invalidate_range_start_nonblock invokes __mmu_notifier_invalidate_range_start.
6. function __mmu_notifier_invalidate_range_start invokes mn_itree_invalidate.
7. function mn_itree_invalidate invokes mn_itree_inv_start_range.
8. function mn_itree_inv_start_range invokes interval_tree_iter_first.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: interval_tree_iter_first.

————————————————————————————————These prompts belong to Node: 【oo_objects】at below.—————————————————————————————————— 
# Now I have a kernel internal function oo_objects, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: oo_objects in the linux kenrel source code.
## The oo_objects function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes oo_objects.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: oo_objects.

————————————————————————————————These prompts belong to Node: 【get_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_node in the linux kenrel source code.
## The get_node function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes get_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_node.

————————————————————————————————These prompts belong to Node: 【freeptr_outside_object】at below.—————————————————————————————————— 
# Now I have a kernel internal function freeptr_outside_object, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: freeptr_outside_object in the linux kenrel source code.
## The freeptr_outside_object function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes print_trailer.
12. function print_trailer invokes print_tracking.
13. function print_tracking invokes get_track.
14. function get_track invokes get_info_end.
15. function get_info_end invokes freeptr_outside_object.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: freeptr_outside_object.

————————————————————————————————These prompts belong to Node: 【__slub_debug_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function __slub_debug_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __slub_debug_enabled in the linux kenrel source code.
## The __slub_debug_enabled function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes print_trailer.
12. function print_trailer invokes slub_debug_orig_size.
13. function slub_debug_orig_size invokes kmem_cache_debug_flags.
14. function kmem_cache_debug_flags invokes __slub_debug_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __slub_debug_enabled.

————————————————————————————————These prompts belong to Node: 【freelist_ptr_decode】at below.—————————————————————————————————— 
# Now I have a kernel internal function freelist_ptr_decode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: freelist_ptr_decode in the linux kenrel source code.
## The freelist_ptr_decode function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes get_freepointer.
10. function get_freepointer invokes freelist_ptr_decode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: freelist_ptr_decode.

————————————————————————————————These prompts belong to Node: 【slab_add_kunit_errors】at below.—————————————————————————————————— 
# Now I have a kernel internal function slab_add_kunit_errors, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: slab_add_kunit_errors in the linux kenrel source code.
## The slab_add_kunit_errors function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes slab_add_kunit_errors.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: slab_add_kunit_errors.

————————————————————————————————These prompts belong to Node: 【freelist_ptr_encode】at below.—————————————————————————————————— 
# Now I have a kernel internal function freelist_ptr_encode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: freelist_ptr_encode in the linux kenrel source code.
## The freelist_ptr_encode function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes set_freepointer.
10. function set_freepointer invokes freelist_ptr_encode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: freelist_ptr_encode.

————————————————————————————————These prompts belong to Node: 【size_from_object】at below.—————————————————————————————————— 
# Now I have a kernel internal function size_from_object, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: size_from_object in the linux kenrel source code.
## The size_from_object function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes print_trailer.
12. function print_trailer invokes size_from_object.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: size_from_object.

————————————————————————————————These prompts belong to Node: 【stack_depot_print】at below.—————————————————————————————————— 
# Now I have a kernel internal function stack_depot_print, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stack_depot_print in the linux kenrel source code.
## The stack_depot_print function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes print_trailer.
12. function print_trailer invokes print_tracking.
13. function print_tracking invokes print_track.
14. function print_track invokes stack_depot_print.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stack_depot_print.

————————————————————————————————These prompts belong to Node: 【print_tainted】at below.—————————————————————————————————— 
# Now I have a kernel internal function print_tainted, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: print_tainted in the linux kenrel source code.
## The print_tainted function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes object_err.
11. function object_err invokes slab_bug.
12. function slab_bug invokes print_tainted.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: print_tainted.

————————————————————————————————These prompts belong to Node: 【restore_red_left】at below.—————————————————————————————————— 
# Now I have a kernel internal function restore_red_left, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: restore_red_left in the linux kenrel source code.
## The restore_red_left function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes freelist_corrupted.
10. function freelist_corrupted invokes check_valid_pointer.
11. function check_valid_pointer invokes restore_red_left.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: restore_red_left.

————————————————————————————————These prompts belong to Node: 【order_objects】at below.—————————————————————————————————— 
# Now I have a kernel internal function order_objects, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: order_objects in the linux kenrel source code.
## The order_objects function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes alloc_single_from_new_slab.
9. function alloc_single_from_new_slab invokes alloc_debug_processing.
10. function alloc_debug_processing invokes alloc_consistency_checks.
11. function alloc_consistency_checks invokes check_slab.
12. function check_slab invokes order_objects.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: order_objects.

————————————————————————————————These prompts belong to Node: 【stat】at below.—————————————————————————————————— 
# Now I have a kernel internal function stat, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stat in the linux kenrel source code.
## The stat function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes stat.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stat.

————————————————————————————————These prompts belong to Node: 【mm_account_reclaimed_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_account_reclaimed_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_account_reclaimed_pages in the linux kenrel source code.
## The mm_account_reclaimed_pages function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes __free_slab.
12. function __free_slab invokes mm_account_reclaimed_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_account_reclaimed_pages.

————————————————————————————————These prompts belong to Node: 【memcg_free_slab_cgroups】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcg_free_slab_cgroups, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcg_free_slab_cgroups in the linux kenrel source code.
## The memcg_free_slab_cgroups function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes __free_slab.
12. function __free_slab invokes memcg_free_slab_cgroups.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcg_free_slab_cgroups.

————————————————————————————————These prompts belong to Node: 【cache_vmstat_idx】at below.—————————————————————————————————— 
# Now I have a kernel internal function cache_vmstat_idx, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cache_vmstat_idx in the linux kenrel source code.
## The cache_vmstat_idx function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes deactivate_slab.
9. function deactivate_slab invokes discard_slab.
10. function discard_slab invokes free_slab.
11. function free_slab invokes __free_slab.
12. function __free_slab invokes cache_vmstat_idx.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cache_vmstat_idx.

————————————————————————————————These prompts belong to Node: 【next_tid】at below.—————————————————————————————————— 
# Now I have a kernel internal function next_tid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: next_tid in the linux kenrel source code.
## The next_tid function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes next_tid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: next_tid.

————————————————————————————————These prompts belong to Node: 【oo_order】at below.—————————————————————————————————— 
# Now I have a kernel internal function oo_order, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: oo_order in the linux kenrel source code.
## The oo_order function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes slab_out_of_memory.
9. function slab_out_of_memory invokes oo_order.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: oo_order.

————————————————————————————————These prompts belong to Node: 【slab_want_init_on_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function slab_want_init_on_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: slab_want_init_on_alloc in the linux kenrel source code.
## The slab_want_init_on_alloc function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_want_init_on_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: slab_want_init_on_alloc.

————————————————————————————————These prompts belong to Node: 【kmemleak_alloc_recursive】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_alloc_recursive, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_alloc_recursive in the linux kenrel source code.
## The kmemleak_alloc_recursive function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_post_alloc_hook.
7. function slab_post_alloc_hook invokes kmemleak_alloc_recursive.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_alloc_recursive.

————————————————————————————————These prompts belong to Node: 【kmsan_slab_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_slab_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_slab_alloc in the linux kenrel source code.
## The kmsan_slab_alloc function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_post_alloc_hook.
7. function slab_post_alloc_hook invokes kmsan_slab_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_slab_alloc.

————————————————————————————————These prompts belong to Node: 【memcg_slab_post_alloc_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcg_slab_post_alloc_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcg_slab_post_alloc_hook in the linux kenrel source code.
## The memcg_slab_post_alloc_hook function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_post_alloc_hook.
7. function slab_post_alloc_hook invokes memcg_slab_post_alloc_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcg_slab_post_alloc_hook.

————————————————————————————————These prompts belong to Node: 【kfence_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function kfence_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kfence_alloc in the linux kenrel source code.
## The kfence_alloc function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes kfence_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kfence_alloc.

————————————————————————————————These prompts belong to Node: 【slab_want_init_on_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function slab_want_init_on_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: slab_want_init_on_free in the linux kenrel source code.
## The slab_want_init_on_free function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_want_init_on_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: slab_want_init_on_free.

————————————————————————————————These prompts belong to Node: 【memcg_slab_free_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcg_slab_free_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcg_slab_free_hook in the linux kenrel source code.
## The memcg_slab_free_hook function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes dup_anon_vma.
8. function dup_anon_vma invokes anon_vma_clone.
9. function anon_vma_clone invokes unlink_anon_vmas.
10. function unlink_anon_vmas invokes anon_vma_chain_free.
11. function anon_vma_chain_free invokes kmem_cache_free.
12. function kmem_cache_free invokes memcg_slab_free_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcg_slab_free_hook.

————————————————————————————————These prompts belong to Node: 【kfence_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function kfence_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kfence_free in the linux kenrel source code.
## The kfence_free function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes dup_anon_vma.
8. function dup_anon_vma invokes anon_vma_clone.
9. function anon_vma_clone invokes unlink_anon_vmas.
10. function unlink_anon_vmas invokes anon_vma_chain_free.
11. function anon_vma_chain_free invokes kmem_cache_free.
12. function kmem_cache_free invokes __slab_free.
13. function __slab_free invokes kfence_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kfence_free.

————————————————————————————————These prompts belong to Node: 【stack_trace_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function stack_trace_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stack_trace_save in the linux kenrel source code.
## The stack_trace_save function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes set_track_prepare.
9. function set_track_prepare invokes stack_trace_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stack_trace_save.

————————————————————————————————These prompts belong to Node: 【stack_depot_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function stack_depot_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stack_depot_save in the linux kenrel source code.
## The stack_depot_save function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes set_track_prepare.
9. function set_track_prepare invokes stack_depot_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stack_depot_save.

————————————————————————————————These prompts belong to Node: 【is_kfence_address】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_kfence_address, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_kfence_address in the linux kenrel source code.
## The is_kfence_address function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes dup_anon_vma.
8. function dup_anon_vma invokes anon_vma_clone.
9. function anon_vma_clone invokes unlink_anon_vmas.
10. function unlink_anon_vmas invokes anon_vma_chain_free.
11. function anon_vma_chain_free invokes kmem_cache_free.
12. function kmem_cache_free invokes slab_free_freelist_hook.
13. function slab_free_freelist_hook invokes is_kfence_address.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_kfence_address.

————————————————————————————————These prompts belong to Node: 【kmemleak_free_recursive】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmemleak_free_recursive, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmemleak_free_recursive in the linux kenrel source code.
## The kmemleak_free_recursive function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes dup_anon_vma.
8. function dup_anon_vma invokes anon_vma_clone.
9. function anon_vma_clone invokes unlink_anon_vmas.
10. function unlink_anon_vmas invokes anon_vma_chain_free.
11. function anon_vma_chain_free invokes kmem_cache_free.
12. function kmem_cache_free invokes slab_free_freelist_hook.
13. function slab_free_freelist_hook invokes kmemleak_free_recursive.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmemleak_free_recursive.

————————————————————————————————These prompts belong to Node: 【kmsan_slab_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_slab_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_slab_free in the linux kenrel source code.
## The kmsan_slab_free function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mbind_range.
4. function mbind_range invokes vma_modify_policy.
5. function vma_modify_policy invokes vma_modify.
6. function vma_modify invokes vma_merge.
7. function vma_merge invokes dup_anon_vma.
8. function dup_anon_vma invokes anon_vma_clone.
9. function anon_vma_clone invokes unlink_anon_vmas.
10. function unlink_anon_vmas invokes anon_vma_chain_free.
11. function anon_vma_chain_free invokes kmem_cache_free.
12. function kmem_cache_free invokes slab_free_freelist_hook.
13. function slab_free_freelist_hook invokes kmsan_slab_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_slab_free.

————————————————————————————————These prompts belong to Node: 【shuffle_freelist】at below.—————————————————————————————————— 
# Now I have a kernel internal function shuffle_freelist, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: shuffle_freelist in the linux kenrel source code.
## The shuffle_freelist function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes shuffle_freelist.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: shuffle_freelist.

————————————————————————————————These prompts belong to Node: 【folio_is_pfmemalloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_is_pfmemalloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_is_pfmemalloc in the linux kenrel source code.
## The folio_is_pfmemalloc function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes new_slab.
9. function new_slab invokes allocate_slab.
10. function allocate_slab invokes alloc_slab_page.
11. function alloc_slab_page invokes folio_is_pfmemalloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_is_pfmemalloc.

————————————————————————————————These prompts belong to Node: 【get_cycles】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_cycles, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_cycles in the linux kenrel source code.
## The get_cycles function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes get_cycles.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_cycles.

————————————————————————————————These prompts belong to Node: 【zonelist_zone】at below.—————————————————————————————————— 
# Now I have a kernel internal function zonelist_zone, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zonelist_zone in the linux kenrel source code.
## The zonelist_zone function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes zonelist_zone.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zonelist_zone.

————————————————————————————————These prompts belong to Node: 【cpusets_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpusets_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpusets_enabled in the linux kenrel source code.
## The cpusets_enabled function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes cpuset_zone_allowed.
11. function cpuset_zone_allowed invokes cpusets_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpusets_enabled.

————————————————————————————————These prompts belong to Node: 【gfp_zonelist】at below.—————————————————————————————————— 
# Now I have a kernel internal function gfp_zonelist, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: gfp_zonelist in the linux kenrel source code.
## The gfp_zonelist function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes __slab_alloc.
7. function __slab_alloc invokes ___slab_alloc.
8. function ___slab_alloc invokes get_partial.
9. function get_partial invokes get_any_partial.
10. function get_any_partial invokes node_zonelist.
11. function node_zonelist invokes gfp_zonelist.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: gfp_zonelist.

————————————————————————————————These prompts belong to Node: 【memcg_slab_pre_alloc_hook】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcg_slab_pre_alloc_hook, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcg_slab_pre_alloc_hook in the linux kenrel source code.
## The memcg_slab_pre_alloc_hook function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes slab_pre_alloc_hook.
7. function slab_pre_alloc_hook invokes memcg_slab_pre_alloc_hook.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcg_slab_pre_alloc_hook.

————————————————————————————————These prompts belong to Node: 【prefetch_freepointer】at below.—————————————————————————————————— 
# Now I have a kernel internal function prefetch_freepointer, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prefetch_freepointer in the linux kenrel source code.
## The prefetch_freepointer function is called in the sys_set_mempolicy_home_node system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_set_mempolicy_home_node invokes __se_sys_set_mempolicy_home_node.
2. function __se_sys_set_mempolicy_home_node invokes __do_sys_set_mempolicy_home_node.
3. function __do_sys_set_mempolicy_home_node invokes mpol_dup.
4. function mpol_dup invokes __mpol_dup.
5. function __mpol_dup invokes kmem_cache_alloc.
6. function kmem_cache_alloc invokes prefetch_freepointer.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prefetch_freepointer.

————————————————————————————————These prompts belong to Node: 【folio_get_private】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_get_private, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_get_private in the linux kenrel source code.
## The folio_get_private function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_mapping.
14. function folio_migrate_mapping invokes folio_get_private.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_get_private.

————————————————————————————————These prompts belong to Node: 【folio_test_young】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_test_young, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_test_young in the linux kenrel source code.
## The folio_test_young function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_flags.
14. function folio_migrate_flags invokes folio_test_young.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_test_young.

————————————————————————————————These prompts belong to Node: 【folio_set_young】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_set_young, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_set_young in the linux kenrel source code.
## The folio_set_young function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_flags.
14. function folio_migrate_flags invokes folio_set_young.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_set_young.

————————————————————————————————These prompts belong to Node: 【folio_set_idle】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_set_idle, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_set_idle in the linux kenrel source code.
## The folio_set_idle function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_flags.
14. function folio_migrate_flags invokes folio_set_idle.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_set_idle.

————————————————————————————————These prompts belong to Node: 【folio_migrate_ksm】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_migrate_ksm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_migrate_ksm in the linux kenrel source code.
## The folio_migrate_ksm function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_flags.
14. function folio_migrate_flags invokes folio_migrate_ksm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_migrate_ksm.

————————————————————————————————These prompts belong to Node: 【folio_copy_owner】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_copy_owner, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_copy_owner in the linux kenrel source code.
## The folio_copy_owner function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_flags.
14. function folio_migrate_flags invokes folio_copy_owner.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_copy_owner.

————————————————————————————————These prompts belong to Node: 【mapping_can_writeback】at below.—————————————————————————————————— 
# Now I have a kernel internal function mapping_can_writeback, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mapping_can_writeback in the linux kenrel source code.
## The mapping_can_writeback function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes move_to_new_folio.
11. function move_to_new_folio invokes migrate_folio.
12. function migrate_folio invokes migrate_folio_extra.
13. function migrate_folio_extra invokes folio_migrate_mapping.
14. function folio_migrate_mapping invokes mapping_can_writeback.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mapping_can_writeback.

————————————————————————————————These prompts belong to Node: 【folio_test_movable】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_test_movable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_test_movable in the linux kenrel source code.
## The folio_test_movable function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes putback_movable_pages.
6. function putback_movable_pages invokes folio_test_movable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_test_movable.

————————————————————————————————These prompts belong to Node: 【folio_movable_ops】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_movable_ops, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_movable_ops in the linux kenrel source code.
## The folio_movable_ops function is called in the sys_mbind system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mbind invokes __se_sys_mbind.
2. function __se_sys_mbind invokes __do_sys_mbind.
3. function __do_sys_mbind invokes kernel_mbind.
4. function kernel_mbind invokes do_mbind.
5. function do_mbind invokes putback_movable_pages.
6. function putback_movable_pages invokes putback_movable_folio.
7. function putback_movable_folio invokes folio_movable_ops.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_movable_ops.

————————————————————————————————These prompts belong to Node: 【remove_migration_ptes】at below.—————————————————————————————————— 
# Now I have a kernel internal function remove_migration_ptes, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: remove_migration_ptes in the linux kenrel source code.
## The remove_migration_ptes function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes remove_migration_ptes.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: remove_migration_ptes.

————————————————————————————————These prompts belong to Node: 【__list_splice】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_splice, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_splice in the linux kenrel source code.
## The __list_splice function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes list_splice_init.
9. function list_splice_init invokes __list_splice.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_splice.

————————————————————————————————These prompts belong to Node: 【thp_migration_supported】at below.—————————————————————————————————— 
# Now I have a kernel internal function thp_migration_supported, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: thp_migration_supported in the linux kenrel source code.
## The thp_migration_supported function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes thp_migration_supported.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: thp_migration_supported.

————————————————————————————————These prompts belong to Node: 【__migrate_folio_extract】at below.—————————————————————————————————— 
# Now I have a kernel internal function __migrate_folio_extract, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __migrate_folio_extract in the linux kenrel source code.
## The __migrate_folio_extract function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes __migrate_folio_extract.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __migrate_folio_extract.

————————————————————————————————These prompts belong to Node: 【set_page_owner_migrate_reason】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_page_owner_migrate_reason, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_page_owner_migrate_reason in the linux kenrel source code.
## The set_page_owner_migrate_reason function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes migrate_folio_move.
10. function migrate_folio_move invokes set_page_owner_migrate_reason.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_page_owner_migrate_reason.

————————————————————————————————These prompts belong to Node: 【__migrate_folio_record】at below.—————————————————————————————————— 
# Now I have a kernel internal function __migrate_folio_record, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __migrate_folio_record in the linux kenrel source code.
## The __migrate_folio_record function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes migrate_folio_unmap.
10. function migrate_folio_unmap invokes __migrate_folio_record.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __migrate_folio_record.

————————————————————————————————These prompts belong to Node: 【split_huge_page_to_list】at below.—————————————————————————————————— 
# Now I have a kernel internal function split_huge_page_to_list, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: split_huge_page_to_list in the linux kenrel source code.
## The split_huge_page_to_list function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_pages_batch.
9. function migrate_pages_batch invokes try_split_folio.
10. function try_split_folio invokes split_folio_to_list.
11. function split_folio_to_list invokes split_huge_page_to_list.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: split_huge_page_to_list.

————————————————————————————————These prompts belong to Node: 【hugetlb_folio_subpool】at below.—————————————————————————————————— 
# Now I have a kernel internal function hugetlb_folio_subpool, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hugetlb_folio_subpool in the linux kenrel source code.
## The hugetlb_folio_subpool function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes move_pages_and_store_status.
6. function move_pages_and_store_status invokes do_move_pages_to_node.
7. function do_move_pages_to_node invokes migrate_pages.
8. function migrate_pages invokes migrate_hugetlbs.
9. function migrate_hugetlbs invokes unmap_and_move_huge_page.
10. function unmap_and_move_huge_page invokes hugetlb_folio_subpool.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hugetlb_folio_subpool.

————————————————————————————————These prompts belong to Node: 【compat_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function compat_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: compat_ptr in the linux kenrel source code.
## The compat_ptr function is called in the sys_move_pages system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_pages invokes __se_sys_move_pages.
2. function __se_sys_move_pages invokes __do_sys_move_pages.
3. function __do_sys_move_pages invokes kernel_move_pages.
4. function kernel_move_pages invokes do_pages_move.
5. function do_pages_move invokes compat_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: compat_ptr.

————————————————————————————————These prompts belong to Node: 【vma_is_secretmem】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_is_secretmem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_is_secretmem in the linux kenrel source code.
## The vma_is_secretmem function is called in the sys_mlock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mlock invokes __se_sys_mlock.
2. function __se_sys_mlock invokes __do_sys_mlock.
3. function __do_sys_mlock invokes do_mlock.
4. function do_mlock invokes __mm_populate.
5. function __mm_populate invokes populate_vma_page_range.
6. function populate_vma_page_range invokes __get_user_pages.
7. function __get_user_pages invokes check_vma_flags.
8. function check_vma_flags invokes vma_is_secretmem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_is_secretmem.

————————————————————————————————These prompts belong to Node: 【get_unused_fd_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_unused_fd_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_unused_fd_flags in the linux kenrel source code.
## The get_unused_fd_flags function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes get_unused_fd_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_unused_fd_flags.

————————————————————————————————These prompts belong to Node: 【fd_install】at below.—————————————————————————————————— 
# Now I have a kernel internal function fd_install, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fd_install in the linux kenrel source code.
## The fd_install function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes fd_install.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fd_install.

————————————————————————————————These prompts belong to Node: 【put_unused_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_unused_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_unused_fd in the linux kenrel source code.
## The put_unused_fd function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes put_unused_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_unused_fd.

————————————————————————————————These prompts belong to Node: 【alloc_anon_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function alloc_anon_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alloc_anon_inode in the linux kenrel source code.
## The alloc_anon_inode function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes secretmem_file_create.
4. function secretmem_file_create invokes alloc_anon_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alloc_anon_inode.

————————————————————————————————These prompts belong to Node: 【ERR_CAST】at below.—————————————————————————————————— 
# Now I have a kernel internal function ERR_CAST, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ERR_CAST in the linux kenrel source code.
## The ERR_CAST function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes secretmem_file_create.
4. function secretmem_file_create invokes ERR_CAST.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ERR_CAST.

————————————————————————————————These prompts belong to Node: 【security_inode_init_security_anon】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_init_security_anon, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_init_security_anon in the linux kenrel source code.
## The security_inode_init_security_anon function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes secretmem_file_create.
4. function secretmem_file_create invokes security_inode_init_security_anon.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_init_security_anon.

————————————————————————————————These prompts belong to Node: 【mapping_set_gfp_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function mapping_set_gfp_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mapping_set_gfp_mask in the linux kenrel source code.
## The mapping_set_gfp_mask function is called in the sys_memfd_secret system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_secret invokes __se_sys_memfd_secret.
2. function __se_sys_memfd_secret invokes __do_sys_memfd_secret.
3. function __do_sys_memfd_secret invokes secretmem_file_create.
4. function secretmem_file_create invokes mapping_set_gfp_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mapping_set_gfp_mask.

————————————————————————————————These prompts belong to Node: 【is_file_hugepages】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_file_hugepages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_file_hugepages in the linux kenrel source code.
## The is_file_hugepages function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes memfd_file_seals_ptr.
4. function memfd_file_seals_ptr invokes is_file_hugepages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_file_hugepages.

————————————————————————————————These prompts belong to Node: 【HUGETLBFS_I】at below.—————————————————————————————————— 
# Now I have a kernel internal function HUGETLBFS_I, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: HUGETLBFS_I in the linux kenrel source code.
## The HUGETLBFS_I function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes memfd_file_seals_ptr.
4. function memfd_file_seals_ptr invokes HUGETLBFS_I.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: HUGETLBFS_I.

————————————————————————————————These prompts belong to Node: 【task_active_pid_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_active_pid_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_active_pid_ns in the linux kenrel source code.
## The task_active_pid_ns function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes check_sysctl_memfd_noexec.
4. function check_sysctl_memfd_noexec invokes task_active_pid_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_active_pid_ns.

————————————————————————————————These prompts belong to Node: 【pidns_memfd_noexec_scope】at below.—————————————————————————————————— 
# Now I have a kernel internal function pidns_memfd_noexec_scope, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pidns_memfd_noexec_scope in the linux kenrel source code.
## The pidns_memfd_noexec_scope function is called in the sys_memfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_memfd_create invokes __se_sys_memfd_create.
2. function __se_sys_memfd_create invokes __do_sys_memfd_create.
3. function __do_sys_memfd_create invokes check_sysctl_memfd_noexec.
4. function check_sysctl_memfd_noexec invokes pidns_memfd_noexec_scope.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pidns_memfd_noexec_scope.