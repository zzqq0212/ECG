
————————————————————————————————These prompts belong to Node: 【stop_one_cpu_nowait】at below.—————————————————————————————————— 
# Now I have a kernel internal function stop_one_cpu_nowait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stop_one_cpu_nowait in the linux kenrel source code.
## The stop_one_cpu_nowait function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes stop_one_cpu_nowait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stop_one_cpu_nowait.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irq in the linux kenrel source code.
## The _raw_spin_lock_irq function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes wait_for_completion.
9. function wait_for_completion invokes wait_for_common.
10. function wait_for_common invokes __wait_for_common.
11. function __wait_for_common invokes _raw_spin_lock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irq.

————————————————————————————————These prompts belong to Node: 【task_cpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_cpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_cpu in the linux kenrel source code.
## The task_cpu function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes task_cpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_cpu.

————————————————————————————————These prompts belong to Node: 【task_on_rq_queued】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_on_rq_queued, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_on_rq_queued in the linux kenrel source code.
## The task_on_rq_queued function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes task_on_rq_queued.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_on_rq_queued.

————————————————————————————————These prompts belong to Node: 【psi_enqueue】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_enqueue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_enqueue in the linux kenrel source code.
## The psi_enqueue function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes enqueue_task.
5. function enqueue_task invokes psi_enqueue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_enqueue.

————————————————————————————————These prompts belong to Node: 【uclamp_rq_inc】at below.—————————————————————————————————— 
# Now I have a kernel internal function uclamp_rq_inc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: uclamp_rq_inc in the linux kenrel source code.
## The uclamp_rq_inc function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes enqueue_task.
5. function enqueue_task invokes uclamp_rq_inc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: uclamp_rq_inc.

————————————————————————————————These prompts belong to Node: 【sched_core_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_core_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_core_enabled in the linux kenrel source code.
## The sched_core_enabled function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes dequeue_task.
5. function dequeue_task invokes sched_core_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_core_enabled.

————————————————————————————————These prompts belong to Node: 【sched_core_enqueue】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_core_enqueue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_core_enqueue in the linux kenrel source code.
## The sched_core_enqueue function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes enqueue_task.
5. function enqueue_task invokes sched_core_enqueue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_core_enqueue.

————————————————————————————————These prompts belong to Node: 【assert_clock_updated】at below.—————————————————————————————————— 
# Now I have a kernel internal function assert_clock_updated, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: assert_clock_updated in the linux kenrel source code.
## The assert_clock_updated function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes update_rq_clock_task.
6. function update_rq_clock_task invokes update_rq_clock_pelt.
7. function update_rq_clock_pelt invokes _update_idle_rq_clock_pelt.
8. function _update_idle_rq_clock_pelt invokes rq_clock_task.
9. function rq_clock_task invokes assert_clock_updated.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: assert_clock_updated.

————————————————————————————————These prompts belong to Node: 【mm_cid_is_unset】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_cid_is_unset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_cid_is_unset in the linux kenrel source code.
## The mm_cid_is_unset function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_cid.
11. function switch_mm_cid invokes mm_cid_put_lazy.
12. function mm_cid_put_lazy invokes mm_cid_is_lazy_put.
13. function mm_cid_is_lazy_put invokes mm_cid_is_unset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_cid_is_unset.

————————————————————————————————These prompts belong to Node: 【cpumask_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpumask_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpumask_size in the linux kenrel source code.
## The cpumask_size function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes get_user_cpu_mask.
4. function get_user_cpu_mask invokes cpumask_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpumask_size.

————————————————————————————————These prompts belong to Node: 【mm_cid_set_lazy_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_cid_set_lazy_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_cid_set_lazy_put in the linux kenrel source code.
## The mm_cid_set_lazy_put function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_queue.
13. function ttwu_queue invokes ttwu_do_activate.
14. function ttwu_do_activate invokes activate_task.
15. function activate_task invokes sched_mm_cid_migrate_to.
16. function sched_mm_cid_migrate_to invokes __sched_mm_cid_migrate_from_try_steal_cid.
17. function __sched_mm_cid_migrate_from_try_steal_cid invokes mm_cid_set_lazy_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_cid_set_lazy_put.

————————————————————————————————These prompts belong to Node: 【list_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_empty in the linux kenrel source code.
## The list_empty function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes prepare_to_wait_event.
9. function prepare_to_wait_event invokes list_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_empty.

————————————————————————————————These prompts belong to Node: 【__list_add_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_add_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_add_valid in the linux kenrel source code.
## The __list_add_valid function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes prepare_to_wait_event.
9. function prepare_to_wait_event invokes __add_wait_queue_entry_tail.
10. function __add_wait_queue_entry_tail invokes list_add_tail.
11. function list_add_tail invokes __list_add.
12. function __list_add invokes __list_add_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_add_valid.

————————————————————————————————These prompts belong to Node: 【sigismember】at below.—————————————————————————————————— 
# Now I have a kernel internal function sigismember, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sigismember in the linux kenrel source code.
## The sigismember function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes prepare_to_wait_event.
9. function prepare_to_wait_event invokes signal_pending_state.
10. function signal_pending_state invokes __fatal_signal_pending.
11. function __fatal_signal_pending invokes sigismember.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sigismember.

————————————————————————————————These prompts belong to Node: 【__wake_up_common】at below.—————————————————————————————————— 
# Now I have a kernel internal function __wake_up_common, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __wake_up_common in the linux kenrel source code.
## The __wake_up_common function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes wake_up_var.
9. function wake_up_var invokes __wake_up_bit.
10. function __wake_up_bit invokes __wake_up.
11. function __wake_up invokes __wake_up_common_lock.
12. function __wake_up_common_lock invokes __wake_up_common.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __wake_up_common.

————————————————————————————————These prompts belong to Node: 【hash_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function hash_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hash_ptr in the linux kenrel source code.
## The hash_ptr function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes __var_waitqueue.
9. function __var_waitqueue invokes hash_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hash_ptr.

————————————————————————————————These prompts belong to Node: 【init_wait_var_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_wait_var_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_wait_var_entry in the linux kenrel source code.
## The init_wait_var_entry function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes init_wait_var_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_wait_var_entry.

————————————————————————————————These prompts belong to Node: 【complete_acquire】at below.—————————————————————————————————— 
# Now I have a kernel internal function complete_acquire, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: complete_acquire in the linux kenrel source code.
## The complete_acquire function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes wait_for_completion.
9. function wait_for_completion invokes wait_for_common.
10. function wait_for_common invokes __wait_for_common.
11. function __wait_for_common invokes complete_acquire.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: complete_acquire.

————————————————————————————————These prompts belong to Node: 【complete_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function complete_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: complete_release in the linux kenrel source code.
## The complete_release function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes wait_for_completion.
9. function wait_for_completion invokes wait_for_common.
10. function wait_for_common invokes __wait_for_common.
11. function __wait_for_common invokes complete_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: complete_release.

————————————————————————————————These prompts belong to Node: 【sched_clock_stable】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_clock_stable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_clock_stable in the linux kenrel source code.
## The sched_clock_stable function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes sched_clock_cpu.
6. function sched_clock_cpu invokes sched_clock_stable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_clock_stable.

————————————————————————————————These prompts belong to Node: 【sched_clock_noinstr】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_clock_noinstr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_clock_noinstr in the linux kenrel source code.
## The sched_clock_noinstr function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes sched_clock_cpu.
6. function sched_clock_cpu invokes sched_clock_noinstr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_clock_noinstr.

————————————————————————————————These prompts belong to Node: 【sched_clock】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_clock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_clock in the linux kenrel source code.
## The sched_clock function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes sched_clock_cpu.
6. function sched_clock_cpu invokes sched_clock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_clock.

————————————————————————————————These prompts belong to Node: 【cpu_sdc】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpu_sdc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpu_sdc in the linux kenrel source code.
## The cpu_sdc function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes sched_clock_cpu.
6. function sched_clock_cpu invokes cpu_sdc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpu_sdc.

————————————————————————————————These prompts belong to Node: 【free_cpumask_var】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_cpumask_var, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_cpumask_var in the linux kenrel source code.
## The free_cpumask_var function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_global_expedited.
4. function membarrier_global_expedited invokes free_cpumask_var.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_cpumask_var.

————————————————————————————————These prompts belong to Node: 【bitmap_zero】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_zero, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_zero in the linux kenrel source code.
## The bitmap_zero function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_global_expedited.
4. function membarrier_global_expedited invokes zalloc_cpumask_var.
5. function zalloc_cpumask_var invokes cpumask_clear.
6. function cpumask_clear invokes bitmap_zero.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_zero.

————————————————————————————————These prompts belong to Node: 【psi_ttwu_dequeue】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_ttwu_dequeue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_ttwu_dequeue in the linux kenrel source code.
## The psi_ttwu_dequeue function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes psi_ttwu_dequeue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_ttwu_dequeue.

————————————————————————————————These prompts belong to Node: 【class_preempt_destructor】at below.—————————————————————————————————— 
# Now I have a kernel internal function class_preempt_destructor, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: class_preempt_destructor in the linux kenrel source code.
## The class_preempt_destructor function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes class_preempt_destructor.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: class_preempt_destructor.

————————————————————————————————These prompts belong to Node: 【sched_domain_span】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_domain_span, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_domain_span in the linux kenrel source code.
## The sched_domain_span function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_stat.
13. function ttwu_stat invokes sched_domain_span.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_domain_span.

————————————————————————————————These prompts belong to Node: 【update_avg】at below.—————————————————————————————————— 
# Now I have a kernel internal function update_avg, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: update_avg in the linux kenrel source code.
## The update_avg function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_queue.
13. function ttwu_queue invokes ttwu_do_activate.
14. function ttwu_do_activate invokes update_avg.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: update_avg.

————————————————————————————————These prompts belong to Node: 【__delayacct_blkio_end】at below.—————————————————————————————————— 
# Now I have a kernel internal function __delayacct_blkio_end, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __delayacct_blkio_end in the linux kenrel source code.
## The __delayacct_blkio_end function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_queue.
13. function ttwu_queue invokes ttwu_do_activate.
14. function ttwu_do_activate invokes delayacct_blkio_end.
15. function delayacct_blkio_end invokes __delayacct_blkio_end.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __delayacct_blkio_end.

————————————————————————————————These prompts belong to Node: 【_find_first_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_first_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_first_bit in the linux kenrel source code.
## The _find_first_bit function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes cpumask_first.
14. function cpumask_first invokes find_first_bit.
15. function find_first_bit invokes _find_first_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_first_bit.

————————————————————————————————These prompts belong to Node: 【__smp_call_single_queue】at below.—————————————————————————————————— 
# Now I have a kernel internal function __smp_call_single_queue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __smp_call_single_queue in the linux kenrel source code.
## The __smp_call_single_queue function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_queue.
13. function ttwu_queue invokes ttwu_queue_wakelist.
14. function ttwu_queue_wakelist invokes __ttwu_queue_wakelist.
15. function __ttwu_queue_wakelist invokes __smp_call_single_queue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __smp_call_single_queue.

————————————————————————————————These prompts belong to Node: 【cpus_share_cache】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpus_share_cache, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpus_share_cache in the linux kenrel source code.
## The cpus_share_cache function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_queue.
13. function ttwu_queue invokes ttwu_queue_wakelist.
14. function ttwu_queue_wakelist invokes ttwu_queue_cond.
15. function ttwu_queue_cond invokes cpus_share_cache.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpus_share_cache.

————————————————————————————————These prompts belong to Node: 【cpumask_any_and_distribute】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpumask_any_and_distribute, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpumask_any_and_distribute in the linux kenrel source code.
## The cpumask_any_and_distribute function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes cpumask_any_and_distribute.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpumask_any_and_distribute.

————————————————————————————————These prompts belong to Node: 【memcmp】at below.—————————————————————————————————— 
# Now I have a kernel internal function memcmp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memcmp in the linux kenrel source code.
## The memcmp function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes cpumask_equal.
8. function cpumask_equal invokes bitmap_equal.
9. function bitmap_equal invokes memcmp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memcmp.

————————————————————————————————These prompts belong to Node: 【__bitmap_equal】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_equal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_equal in the linux kenrel source code.
## The __bitmap_equal function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes cpumask_equal.
8. function cpumask_equal invokes bitmap_equal.
9. function bitmap_equal invokes __bitmap_equal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_equal.

————————————————————————————————These prompts belong to Node: 【__bitmap_and】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_and, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_and in the linux kenrel source code.
## The __bitmap_and function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes cpumask_and.
6. function cpumask_and invokes bitmap_and.
7. function bitmap_and invokes __bitmap_and.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_and.

————————————————————————————————These prompts belong to Node: 【kthread_is_per_cpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kthread_is_per_cpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kthread_is_per_cpu in the linux kenrel source code.
## The kthread_is_per_cpu function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes is_cpu_allowed.
14. function is_cpu_allowed invokes kthread_is_per_cpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kthread_is_per_cpu.

————————————————————————————————These prompts belong to Node: 【is_migration_disabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_migration_disabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_migration_disabled in the linux kenrel source code.
## The is_migration_disabled function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes is_migration_disabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_migration_disabled.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irq in the linux kenrel source code.
## The _raw_spin_unlock_irq function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes wait_for_completion.
9. function wait_for_completion invokes wait_for_common.
10. function wait_for_common invokes __wait_for_common.
11. function __wait_for_common invokes do_wait_for_common.
12. function do_wait_for_common invokes _raw_spin_unlock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irq.

————————————————————————————————These prompts belong to Node: 【__put_task_struct】at below.—————————————————————————————————— 
# Now I have a kernel internal function __put_task_struct, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __put_task_struct in the linux kenrel source code.
## The __put_task_struct function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes class_find_get_task_destructor.
5. function class_find_get_task_destructor invokes put_task_struct.
6. function put_task_struct invokes __put_task_struct.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __put_task_struct.

————————————————————————————————These prompts belong to Node: 【refcount_warn_saturate】at below.—————————————————————————————————— 
# Now I have a kernel internal function refcount_warn_saturate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: refcount_warn_saturate in the linux kenrel source code.
## The refcount_warn_saturate function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes class_find_get_task_destructor.
5. function class_find_get_task_destructor invokes put_task_struct.
6. function put_task_struct invokes refcount_dec_and_test.
7. function refcount_dec_and_test invokes __refcount_dec_and_test.
8. function __refcount_dec_and_test invokes __refcount_sub_and_test.
9. function __refcount_sub_and_test invokes refcount_warn_saturate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: refcount_warn_saturate.

————————————————————————————————These prompts belong to Node: 【__rq_lockp】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rq_lockp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rq_lockp in the linux kenrel source code.
## The __rq_lockp function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes raw_spin_rq_lock.
7. function raw_spin_rq_lock invokes raw_spin_rq_lock_nested.
8. function raw_spin_rq_lock_nested invokes __rq_lockp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rq_lockp.

————————————————————————————————These prompts belong to Node: 【cpu_of】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpu_of, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpu_of in the linux kenrel source code.
## The cpu_of function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes cpu_of.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpu_of.

————————————————————————————————These prompts belong to Node: 【arch_smp_send_reschedule】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_smp_send_reschedule, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_smp_send_reschedule in the linux kenrel source code.
## The arch_smp_send_reschedule function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_runnable.
13. function ttwu_runnable invokes wakeup_preempt.
14. function wakeup_preempt invokes resched_curr.
15. function resched_curr invokes arch_smp_send_reschedule.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_smp_send_reschedule.

————————————————————————————————These prompts belong to Node: 【wq_worker_running】at below.—————————————————————————————————— 
# Now I have a kernel internal function wq_worker_running, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wq_worker_running in the linux kenrel source code.
## The wq_worker_running function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes sched_update_worker.
10. function sched_update_worker invokes wq_worker_running.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wq_worker_running.

————————————————————————————————These prompts belong to Node: 【io_wq_worker_running】at below.—————————————————————————————————— 
# Now I have a kernel internal function io_wq_worker_running, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: io_wq_worker_running in the linux kenrel source code.
## The io_wq_worker_running function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes sched_update_worker.
10. function sched_update_worker invokes io_wq_worker_running.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: io_wq_worker_running.

————————————————————————————————These prompts belong to Node: 【rcu_note_context_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_note_context_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_note_context_switch in the linux kenrel source code.
## The rcu_note_context_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes rcu_note_context_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_note_context_switch.

————————————————————————————————These prompts belong to Node: 【task_on_rq_migrating】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_on_rq_migrating, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_on_rq_migrating in the linux kenrel source code.
## The task_on_rq_migrating function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes task_on_rq_migrating.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_on_rq_migrating.

————————————————————————————————These prompts belong to Node: 【serialize】at below.—————————————————————————————————— 
# Now I have a kernel internal function serialize, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: serialize in the linux kenrel source code.
## The serialize function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes membarrier_mm_sync_core_before_usermode.
12. function membarrier_mm_sync_core_before_usermode invokes sync_core_before_usermode.
13. function sync_core_before_usermode invokes sync_core.
14. function sync_core invokes serialize.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: serialize.

————————————————————————————————These prompts belong to Node: 【iret_to_self】at below.—————————————————————————————————— 
# Now I have a kernel internal function iret_to_self, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iret_to_self in the linux kenrel source code.
## The iret_to_self function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes membarrier_mm_sync_core_before_usermode.
12. function membarrier_mm_sync_core_before_usermode invokes sync_core_before_usermode.
13. function sync_core_before_usermode invokes sync_core.
14. function sync_core invokes iret_to_self.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iret_to_self.

————————————————————————————————These prompts belong to Node: 【tick_nohz_full_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function tick_nohz_full_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: tick_nohz_full_enabled in the linux kenrel source code.
## The tick_nohz_full_enabled function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes tick_nohz_task_switch.
12. function tick_nohz_task_switch invokes tick_nohz_full_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: tick_nohz_full_enabled.

————————————————————————————————These prompts belong to Node: 【__tick_nohz_task_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function __tick_nohz_task_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __tick_nohz_task_switch in the linux kenrel source code.
## The __tick_nohz_task_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes tick_nohz_task_switch.
12. function tick_nohz_task_switch invokes __tick_nohz_task_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __tick_nohz_task_switch.

————————————————————————————————These prompts belong to Node: 【__perf_event_task_sched_in】at below.—————————————————————————————————— 
# Now I have a kernel internal function __perf_event_task_sched_in, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __perf_event_task_sched_in in the linux kenrel source code.
## The __perf_event_task_sched_in function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes perf_event_task_sched_in.
12. function perf_event_task_sched_in invokes __perf_event_task_sched_in.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __perf_event_task_sched_in.

————————————————————————————————These prompts belong to Node: 【perf_fetch_caller_regs】at below.—————————————————————————————————— 
# Now I have a kernel internal function perf_fetch_caller_regs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: perf_fetch_caller_regs in the linux kenrel source code.
## The perf_fetch_caller_regs function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes perf_event_task_sched_out.
12. function perf_event_task_sched_out invokes perf_fetch_caller_regs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: perf_fetch_caller_regs.

————————————————————————————————These prompts belong to Node: 【___perf_sw_event】at below.—————————————————————————————————— 
# Now I have a kernel internal function ___perf_sw_event, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ___perf_sw_event in the linux kenrel source code.
## The ___perf_sw_event function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes perf_event_task_sched_out.
12. function perf_event_task_sched_out invokes ___perf_sw_event.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ___perf_sw_event.

————————————————————————————————These prompts belong to Node: 【smp_mb__after_mmgrab】at below.—————————————————————————————————— 
# Now I have a kernel internal function smp_mb__after_mmgrab, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: smp_mb__after_mmgrab in the linux kenrel source code.
## The smp_mb__after_mmgrab function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_cid.
11. function switch_mm_cid invokes smp_mb__after_mmgrab.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: smp_mb__after_mmgrab.

————————————————————————————————These prompts belong to Node: 【mm_cid_clear_lazy_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_cid_clear_lazy_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_cid_clear_lazy_put in the linux kenrel source code.
## The mm_cid_clear_lazy_put function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_cid.
11. function switch_mm_cid invokes mm_cid_put_lazy.
12. function mm_cid_put_lazy invokes mm_cid_clear_lazy_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_cid_clear_lazy_put.

————————————————————————————————These prompts belong to Node: 【_find_first_zero_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_first_zero_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_first_zero_bit in the linux kenrel source code.
## The _find_first_zero_bit function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_cid.
11. function switch_mm_cid invokes mm_cid_get.
12. function mm_cid_get invokes __mm_cid_get.
13. function __mm_cid_get invokes __mm_cid_try_get.
14. function __mm_cid_try_get invokes cpumask_first_zero.
15. function cpumask_first_zero invokes find_first_zero_bit.
16. function find_first_zero_bit invokes _find_first_zero_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_first_zero_bit.

————————————————————————————————These prompts belong to Node: 【kcov_prepare_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function kcov_prepare_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kcov_prepare_switch in the linux kenrel source code.
## The kcov_prepare_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes kcov_prepare_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kcov_prepare_switch.

————————————————————————————————These prompts belong to Node: 【fire_sched_out_preempt_notifiers】at below.—————————————————————————————————— 
# Now I have a kernel internal function fire_sched_out_preempt_notifiers, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fire_sched_out_preempt_notifiers in the linux kenrel source code.
## The fire_sched_out_preempt_notifiers function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes fire_sched_out_preempt_notifiers.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fire_sched_out_preempt_notifiers.

————————————————————————————————These prompts belong to Node: 【kmap_local_sched_out】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmap_local_sched_out, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmap_local_sched_out in the linux kenrel source code.
## The kmap_local_sched_out function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes kmap_local_sched_out.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmap_local_sched_out.

————————————————————————————————These prompts belong to Node: 【prepare_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepare_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepare_task in the linux kenrel source code.
## The prepare_task function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes prepare_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepare_task.

————————————————————————————————These prompts belong to Node: 【perf_cgroup_from_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function perf_cgroup_from_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: perf_cgroup_from_task in the linux kenrel source code.
## The perf_cgroup_from_task function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes perf_event_task_sched_out.
12. function perf_event_task_sched_out invokes perf_cgroup_from_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: perf_cgroup_from_task.

————————————————————————————————These prompts belong to Node: 【__perf_event_task_sched_out】at below.—————————————————————————————————— 
# Now I have a kernel internal function __perf_event_task_sched_out, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __perf_event_task_sched_out in the linux kenrel source code.
## The __perf_event_task_sched_out function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes perf_event_task_sched_out.
12. function perf_event_task_sched_out invokes __perf_event_task_sched_out.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __perf_event_task_sched_out.

————————————————————————————————These prompts belong to Node: 【rq_sched_info_arrive】at below.—————————————————————————————————— 
# Now I have a kernel internal function rq_sched_info_arrive, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rq_sched_info_arrive in the linux kenrel source code.
## The rq_sched_info_arrive function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes sched_info_switch.
12. function sched_info_switch invokes sched_info_arrive.
13. function sched_info_arrive invokes rq_sched_info_arrive.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rq_sched_info_arrive.

————————————————————————————————These prompts belong to Node: 【rq_sched_info_depart】at below.—————————————————————————————————— 
# Now I have a kernel internal function rq_sched_info_depart, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rq_sched_info_depart in the linux kenrel source code.
## The rq_sched_info_depart function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes prepare_task_switch.
11. function prepare_task_switch invokes sched_info_switch.
12. function sched_info_switch invokes sched_info_depart.
13. function sched_info_depart invokes rq_sched_info_depart.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rq_sched_info_depart.

————————————————————————————————These prompts belong to Node: 【__rcu_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_unlock in the linux kenrel source code.
## The __rcu_read_unlock function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes user_check_sched_setscheduler.
8. function user_check_sched_setscheduler invokes check_same_owner.
9. function check_same_owner invokes class_rcu_destructor.
10. function class_rcu_destructor invokes rcu_read_unlock.
11. function rcu_read_unlock invokes __rcu_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_unlock.

————————————————————————————————These prompts belong to Node: 【__rcu_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_lock in the linux kenrel source code.
## The __rcu_read_lock function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes user_check_sched_setscheduler.
8. function user_check_sched_setscheduler invokes check_same_owner.
9. function check_same_owner invokes class_rcu_constructor.
10. function class_rcu_constructor invokes __rcu_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_lock.

————————————————————————————————These prompts belong to Node: 【mm_cid_is_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_cid_is_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_cid_is_valid in the linux kenrel source code.
## The mm_cid_is_valid function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_cid.
11. function switch_mm_cid invokes mm_cid_get.
12. function mm_cid_get invokes mm_cid_is_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_cid_is_valid.

————————————————————————————————These prompts belong to Node: 【perf_event_task_migrate】at below.—————————————————————————————————— 
# Now I have a kernel internal function perf_event_task_migrate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: perf_event_task_migrate in the linux kenrel source code.
## The perf_event_task_migrate function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes set_task_cpu.
13. function set_task_cpu invokes perf_event_task_migrate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: perf_event_task_migrate.

————————————————————————————————These prompts belong to Node: 【task_group】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_group, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_group in the linux kenrel source code.
## The task_group function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes set_task_cpu.
13. function set_task_cpu invokes __set_task_cpu.
14. function __set_task_cpu invokes set_task_rq.
15. function set_task_rq invokes task_group.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_group.

————————————————————————————————These prompts belong to Node: 【sched_core_dequeue】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_core_dequeue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_core_dequeue in the linux kenrel source code.
## The sched_core_dequeue function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes dequeue_task.
5. function dequeue_task invokes sched_core_dequeue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_core_dequeue.

————————————————————————————————These prompts belong to Node: 【psi_dequeue】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_dequeue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_dequeue in the linux kenrel source code.
## The psi_dequeue function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes dequeue_task.
5. function dequeue_task invokes psi_dequeue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_dequeue.

————————————————————————————————These prompts belong to Node: 【uclamp_rq_dec】at below.—————————————————————————————————— 
# Now I have a kernel internal function uclamp_rq_dec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: uclamp_rq_dec in the linux kenrel source code.
## The uclamp_rq_dec function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes dequeue_task.
5. function dequeue_task invokes uclamp_rq_dec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: uclamp_rq_dec.

————————————————————————————————These prompts belong to Node: 【rq_sched_info_dequeue】at below.—————————————————————————————————— 
# Now I have a kernel internal function rq_sched_info_dequeue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rq_sched_info_dequeue in the linux kenrel source code.
## The rq_sched_info_dequeue function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes dequeue_task.
5. function dequeue_task invokes sched_info_dequeue.
6. function sched_info_dequeue invokes rq_sched_info_dequeue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rq_sched_info_dequeue.

————————————————————————————————These prompts belong to Node: 【cpu_to_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpu_to_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpu_to_node in the linux kenrel source code.
## The cpu_to_node function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes cpu_to_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpu_to_node.

————————————————————————————————These prompts belong to Node: 【cpumask_of_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpumask_of_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpumask_of_node in the linux kenrel source code.
## The cpumask_of_node function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes cpumask_of_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpumask_of_node.

————————————————————————————————These prompts belong to Node: 【cpuset_cpus_allowed_fallback】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_cpus_allowed_fallback, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_cpus_allowed_fallback in the linux kenrel source code.
## The cpuset_cpus_allowed_fallback function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes cpuset_cpus_allowed_fallback.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_cpus_allowed_fallback.

————————————————————————————————These prompts belong to Node: 【__printk_ratelimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function __printk_ratelimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __printk_ratelimit in the linux kenrel source code.
## The __printk_ratelimit function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes __printk_ratelimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __printk_ratelimit.

————————————————————————————————These prompts belong to Node: 【task_pid_nr】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_pid_nr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_pid_nr in the linux kenrel source code.
## The task_pid_nr function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes task_pid_nr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_pid_nr.

————————————————————————————————These prompts belong to Node: 【_printk_deferred】at below.—————————————————————————————————— 
# Now I have a kernel internal function _printk_deferred, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _printk_deferred in the linux kenrel source code.
## The _printk_deferred function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes _printk_deferred.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _printk_deferred.

————————————————————————————————These prompts belong to Node: 【kvfree_call_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kvfree_call_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kvfree_call_rcu in the linux kenrel source code.
## The kvfree_call_rcu function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes do_set_cpus_allowed.
15. function do_set_cpus_allowed invokes kvfree_call_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kvfree_call_rcu.

————————————————————————————————These prompts belong to Node: 【task_current】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_current, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_current in the linux kenrel source code.
## The task_current function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes task_current.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_current.

————————————————————————————————These prompts belong to Node: 【put_prev_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_prev_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_prev_task in the linux kenrel source code.
## The put_prev_task function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes put_prev_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_prev_task.

————————————————————————————————These prompts belong to Node: 【set_next_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_next_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_next_task in the linux kenrel source code.
## The set_next_task function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes set_next_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_next_task.

————————————————————————————————These prompts belong to Node: 【_find_next_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_next_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_next_bit in the linux kenrel source code.
## The _find_next_bit function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes select_task_rq.
13. function select_task_rq invokes select_fallback_rq.
14. function select_fallback_rq invokes find_next_bit.
15. function find_next_bit invokes _find_next_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_next_bit.

————————————————————————————————These prompts belong to Node: 【arch_scale_freq_capacity】at below.—————————————————————————————————— 
# Now I have a kernel internal function arch_scale_freq_capacity, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: arch_scale_freq_capacity in the linux kenrel source code.
## The arch_scale_freq_capacity function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes update_rq_clock.
5. function update_rq_clock invokes update_rq_clock_task.
6. function update_rq_clock_task invokes update_rq_clock_pelt.
7. function update_rq_clock_pelt invokes arch_scale_freq_capacity.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: arch_scale_freq_capacity.

————————————————————————————————These prompts belong to Node: 【rq_pin_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function rq_pin_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rq_pin_lock in the linux kenrel source code.
## The rq_pin_lock function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes rq_pin_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rq_pin_lock.

————————————————————————————————These prompts belong to Node: 【sched_core_disabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_core_disabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_core_disabled in the linux kenrel source code.
## The sched_core_disabled function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes raw_spin_rq_lock.
7. function raw_spin_rq_lock invokes raw_spin_rq_lock_nested.
8. function raw_spin_rq_lock_nested invokes sched_core_disabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_core_disabled.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock in the linux kenrel source code.
## The _raw_spin_lock function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes raw_spin_rq_lock.
7. function raw_spin_rq_lock invokes raw_spin_rq_lock_nested.
8. function raw_spin_rq_lock_nested invokes _raw_spin_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock in the linux kenrel source code.
## The _raw_spin_unlock function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes raw_spin_rq_lock.
7. function raw_spin_rq_lock invokes raw_spin_rq_lock_nested.
8. function raw_spin_rq_lock_nested invokes _raw_spin_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock.

————————————————————————————————These prompts belong to Node: 【rq_lockp】at below.—————————————————————————————————— 
# Now I have a kernel internal function rq_lockp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rq_lockp in the linux kenrel source code.
## The rq_lockp function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes raw_spin_rq_unlock.
7. function raw_spin_rq_unlock invokes rq_lockp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rq_lockp.

————————————————————————————————These prompts belong to Node: 【__setscheduler_uclamp】at below.—————————————————————————————————— 
# Now I have a kernel internal function __setscheduler_uclamp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __setscheduler_uclamp in the linux kenrel source code.
## The __setscheduler_uclamp function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes __setscheduler_uclamp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __setscheduler_uclamp.

————————————————————————————————These prompts belong to Node: 【rt_mutex_adjust_pi】at below.—————————————————————————————————— 
# Now I have a kernel internal function rt_mutex_adjust_pi, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rt_mutex_adjust_pi in the linux kenrel source code.
## The rt_mutex_adjust_pi function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes rt_mutex_adjust_pi.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rt_mutex_adjust_pi.

————————————————————————————————These prompts belong to Node: 【dl_prio】at below.—————————————————————————————————— 
# Now I have a kernel internal function dl_prio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dl_prio in the linux kenrel source code.
## The dl_prio function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes check_class_changed.
8. function check_class_changed invokes dl_task.
9. function dl_task invokes dl_prio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dl_prio.

————————————————————————————————These prompts belong to Node: 【rt_prio】at below.—————————————————————————————————— 
# Now I have a kernel internal function rt_prio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rt_prio in the linux kenrel source code.
## The rt_prio function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes effective_prio.
5. function effective_prio invokes rt_prio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rt_prio.

————————————————————————————————These prompts belong to Node: 【idle_policy】at below.—————————————————————————————————— 
# Now I have a kernel internal function idle_policy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: idle_policy in the linux kenrel source code.
## The idle_policy function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes set_load_weight.
5. function set_load_weight invokes task_has_idle_policy.
6. function task_has_idle_policy invokes idle_policy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: idle_policy.

————————————————————————————————These prompts belong to Node: 【rt_mutex_get_top_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function rt_mutex_get_top_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rt_mutex_get_top_task in the linux kenrel source code.
## The rt_mutex_get_top_task function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes rt_effective_prio.
8. function rt_effective_prio invokes rt_mutex_get_top_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rt_mutex_get_top_task.

————————————————————————————————These prompts belong to Node: 【__rt_effective_prio】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rt_effective_prio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rt_effective_prio in the linux kenrel source code.
## The __rt_effective_prio function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes rt_effective_prio.
8. function rt_effective_prio invokes __rt_effective_prio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rt_effective_prio.

————————————————————————————————These prompts belong to Node: 【__bitmap_subset】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_subset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_subset in the linux kenrel source code.
## The __bitmap_subset function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes cpumask_subset.
8. function cpumask_subset invokes bitmap_subset.
9. function bitmap_subset invokes __bitmap_subset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_subset.

————————————————————————————————These prompts belong to Node: 【task_rlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_rlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_rlimit in the linux kenrel source code.
## The task_rlimit function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes can_nice.
4. function can_nice invokes is_nice_reduction.
5. function is_nice_reduction invokes task_rlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_rlimit.

————————————————————————————————These prompts belong to Node: 【capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: capable in the linux kenrel source code.
## The capable function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes can_nice.
4. function can_nice invokes capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: capable.

————————————————————————————————These prompts belong to Node: 【__kuid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kuid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kuid_val in the linux kenrel source code.
## The __kuid_val function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes user_check_sched_setscheduler.
8. function user_check_sched_setscheduler invokes check_same_owner.
9. function check_same_owner invokes uid_eq.
10. function uid_eq invokes __kuid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kuid_val.

————————————————————————————————These prompts belong to Node: 【nice_to_rlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function nice_to_rlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: nice_to_rlimit in the linux kenrel source code.
## The nice_to_rlimit function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes can_nice.
4. function can_nice invokes is_nice_reduction.
5. function is_nice_reduction invokes nice_to_rlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: nice_to_rlimit.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irqrestore】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irqrestore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irqrestore in the linux kenrel source code.
## The _raw_spin_unlock_irqrestore function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes _raw_spin_unlock_irqrestore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irqrestore.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irqsave】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irqsave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irqsave in the linux kenrel source code.
## The _raw_spin_lock_irqsave function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes class_task_rq_lock_constructor.
5. function class_task_rq_lock_constructor invokes task_rq_lock.
6. function task_rq_lock invokes _raw_spin_lock_irqsave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irqsave.

————————————————————————————————These prompts belong to Node: 【_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function _printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _printk in the linux kenrel source code.
## The _printk function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes _printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _printk.

————————————————————————————————These prompts belong to Node: 【put_task_stack】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_task_stack, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_task_stack in the linux kenrel source code.
## The put_task_stack function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes put_task_stack.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_task_stack.

————————————————————————————————These prompts belong to Node: 【psi_sched_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function psi_sched_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: psi_sched_switch in the linux kenrel source code.
## The psi_sched_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes psi_sched_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: psi_sched_switch.

————————————————————————————————These prompts belong to Node: 【enter_lazy_tlb】at below.—————————————————————————————————— 
# Now I have a kernel internal function enter_lazy_tlb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: enter_lazy_tlb in the linux kenrel source code.
## The enter_lazy_tlb function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes enter_lazy_tlb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: enter_lazy_tlb.

————————————————————————————————These prompts belong to Node: 【switch_mm_irqs_off】at below.—————————————————————————————————— 
# Now I have a kernel internal function switch_mm_irqs_off, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: switch_mm_irqs_off in the linux kenrel source code.
## The switch_mm_irqs_off function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes switch_mm_irqs_off.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: switch_mm_irqs_off.

————————————————————————————————These prompts belong to Node: 【lru_gen_use_mm】at below.—————————————————————————————————— 
# Now I have a kernel internal function lru_gen_use_mm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lru_gen_use_mm in the linux kenrel source code.
## The lru_gen_use_mm function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes lru_gen_use_mm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lru_gen_use_mm.

————————————————————————————————These prompts belong to Node: 【__switch_to_asm】at below.—————————————————————————————————— 
# Now I have a kernel internal function __switch_to_asm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __switch_to_asm in the linux kenrel source code.
## The __switch_to_asm function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes __switch_to_asm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __switch_to_asm.

————————————————————————————————These prompts belong to Node: 【__warn_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function __warn_printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __warn_printk in the linux kenrel source code.
## The __warn_printk function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes __warn_printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __warn_printk.

————————————————————————————————These prompts belong to Node: 【vtime_task_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function vtime_task_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vtime_task_switch in the linux kenrel source code.
## The vtime_task_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes vtime_task_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vtime_task_switch.

————————————————————————————————These prompts belong to Node: 【finish_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function finish_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: finish_task in the linux kenrel source code.
## The finish_task function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes finish_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: finish_task.

————————————————————————————————These prompts belong to Node: 【kcov_finish_switch】at below.—————————————————————————————————— 
# Now I have a kernel internal function kcov_finish_switch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kcov_finish_switch in the linux kenrel source code.
## The kcov_finish_switch function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes kcov_finish_switch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kcov_finish_switch.

————————————————————————————————These prompts belong to Node: 【kmap_local_sched_in】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmap_local_sched_in, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmap_local_sched_in in the linux kenrel source code.
## The kmap_local_sched_in function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes kmap_local_sched_in.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmap_local_sched_in.

————————————————————————————————These prompts belong to Node: 【fire_sched_in_preempt_notifiers】at below.—————————————————————————————————— 
# Now I have a kernel internal function fire_sched_in_preempt_notifiers, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fire_sched_in_preempt_notifiers in the linux kenrel source code.
## The fire_sched_in_preempt_notifiers function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes fire_sched_in_preempt_notifiers.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fire_sched_in_preempt_notifiers.

————————————————————————————————These prompts belong to Node: 【put_task_struct_rcu_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_task_struct_rcu_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_task_struct_rcu_user in the linux kenrel source code.
## The put_task_struct_rcu_user function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes put_task_struct_rcu_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_task_struct_rcu_user.

————————————————————————————————These prompts belong to Node: 【__mmdrop】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmdrop, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmdrop in the linux kenrel source code.
## The __mmdrop function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes finish_task_switch.
11. function finish_task_switch invokes mmdrop_lazy_tlb_sched.
12. function mmdrop_lazy_tlb_sched invokes mmdrop_sched.
13. function mmdrop_sched invokes mmdrop.
14. function mmdrop invokes __mmdrop.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmdrop.

————————————————————————————————These prompts belong to Node: 【cpuset_cpus_allowed】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_cpus_allowed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_cpus_allowed in the linux kenrel source code.
## The cpuset_cpus_allowed function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes cpuset_cpus_allowed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_cpus_allowed.

————————————————————————————————These prompts belong to Node: 【cpus_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpus_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpus_read_unlock in the linux kenrel source code.
## The cpus_read_unlock function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_global_expedited.
4. function membarrier_global_expedited invokes cpus_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpus_read_unlock.

————————————————————————————————These prompts belong to Node: 【might_fault】at below.—————————————————————————————————— 
# Now I have a kernel internal function might_fault, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: might_fault in the linux kenrel source code.
## The might_fault function is called in the sys_sched_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setattr invokes __se_sys_sched_setattr.
2. function __se_sys_sched_setattr invokes __do_sys_sched_setattr.
3. function __do_sys_sched_setattr invokes sched_copy_attr.
4. function sched_copy_attr invokes might_fault.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: might_fault.

————————————————————————————————These prompts belong to Node: 【kmsan_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_copy_to_user in the linux kenrel source code.
## The kmsan_copy_to_user function is called in the sys_sched_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setattr invokes __se_sys_sched_setattr.
2. function __se_sys_sched_setattr invokes __do_sys_sched_setattr.
3. function __do_sys_sched_setattr invokes sched_copy_attr.
4. function sched_copy_attr invokes kmsan_copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_copy_to_user.

————————————————————————————————These prompts belong to Node: 【get_cpu_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_cpu_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_cpu_mask in the linux kenrel source code.
## The get_cpu_mask function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes migrate_disable_switch.
11. function migrate_disable_switch invokes get_cpu_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_cpu_mask.

————————————————————————————————These prompts belong to Node: 【__delayacct_blkio_start】at below.—————————————————————————————————— 
# Now I have a kernel internal function __delayacct_blkio_start, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __delayacct_blkio_start in the linux kenrel source code.
## The __delayacct_blkio_start function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes delayacct_blkio_start.
11. function delayacct_blkio_start invokes __delayacct_blkio_start.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __delayacct_blkio_start.

————————————————————————————————These prompts belong to Node: 【ct_state】at below.—————————————————————————————————— 
# Now I have a kernel internal function ct_state, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ct_state in the linux kenrel source code.
## The ct_state function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes ct_state.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ct_state.

————————————————————————————————These prompts belong to Node: 【profile_hits】at below.—————————————————————————————————— 
# Now I have a kernel internal function profile_hits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: profile_hits in the linux kenrel source code.
## The profile_hits function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes profile_hit.
12. function profile_hit invokes profile_hits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: profile_hits.

————————————————————————————————These prompts belong to Node: 【get_preempt_disable_ip】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_preempt_disable_ip, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_preempt_disable_ip in the linux kenrel source code.
## The get_preempt_disable_ip function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes get_preempt_disable_ip.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_preempt_disable_ip.

————————————————————————————————These prompts belong to Node: 【debug_show_held_locks】at below.—————————————————————————————————— 
# Now I have a kernel internal function debug_show_held_locks, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: debug_show_held_locks in the linux kenrel source code.
## The debug_show_held_locks function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes debug_show_held_locks.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: debug_show_held_locks.

————————————————————————————————These prompts belong to Node: 【print_modules】at below.—————————————————————————————————— 
# Now I have a kernel internal function print_modules, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: print_modules in the linux kenrel source code.
## The print_modules function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes print_modules.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: print_modules.

————————————————————————————————These prompts belong to Node: 【print_irqtrace_events】at below.—————————————————————————————————— 
# Now I have a kernel internal function print_irqtrace_events, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: print_irqtrace_events in the linux kenrel source code.
## The print_irqtrace_events function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes print_irqtrace_events.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: print_irqtrace_events.

————————————————————————————————These prompts belong to Node: 【check_panic_on_warn】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_panic_on_warn, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_panic_on_warn in the linux kenrel source code.
## The check_panic_on_warn function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes check_panic_on_warn.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_panic_on_warn.

————————————————————————————————These prompts belong to Node: 【dump_stack】at below.—————————————————————————————————— 
# Now I have a kernel internal function dump_stack, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dump_stack in the linux kenrel source code.
## The dump_stack function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes dump_stack.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dump_stack.

————————————————————————————————These prompts belong to Node: 【add_taint】at below.—————————————————————————————————— 
# Now I have a kernel internal function add_taint, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: add_taint in the linux kenrel source code.
## The add_taint function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes __schedule.
10. function __schedule invokes schedule_debug.
11. function schedule_debug invokes __schedule_bug.
12. function __schedule_bug invokes add_taint.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: add_taint.

————————————————————————————————These prompts belong to Node: 【wq_worker_sleeping】at below.—————————————————————————————————— 
# Now I have a kernel internal function wq_worker_sleeping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wq_worker_sleeping in the linux kenrel source code.
## The wq_worker_sleeping function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes sched_submit_work.
10. function sched_submit_work invokes wq_worker_sleeping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wq_worker_sleeping.

————————————————————————————————These prompts belong to Node: 【io_wq_worker_sleeping】at below.—————————————————————————————————— 
# Now I have a kernel internal function io_wq_worker_sleeping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: io_wq_worker_sleeping in the linux kenrel source code.
## The io_wq_worker_sleeping function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes sched_submit_work.
10. function sched_submit_work invokes io_wq_worker_sleeping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: io_wq_worker_sleeping.

————————————————————————————————These prompts belong to Node: 【__blk_flush_plug】at below.—————————————————————————————————— 
# Now I have a kernel internal function __blk_flush_plug, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __blk_flush_plug in the linux kenrel source code.
## The __blk_flush_plug function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes schedule.
9. function schedule invokes sched_submit_work.
10. function sched_submit_work invokes blk_flush_plug.
11. function blk_flush_plug invokes __blk_flush_plug.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __blk_flush_plug.

————————————————————————————————These prompts belong to Node: 【task_on_cpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_on_cpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_on_cpu in the linux kenrel source code.
## The task_on_cpu function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes ttwu_runnable.
13. function ttwu_runnable invokes task_on_cpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_on_cpu.

————————————————————————————————These prompts belong to Node: 【dl_policy】at below.—————————————————————————————————— 
# Now I have a kernel internal function dl_policy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dl_policy in the linux kenrel source code.
## The dl_policy function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes task_has_dl_policy.
5. function task_has_dl_policy invokes dl_policy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dl_policy.

————————————————————————————————These prompts belong to Node: 【rt_policy】at below.—————————————————————————————————— 
# Now I have a kernel internal function rt_policy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rt_policy in the linux kenrel source code.
## The rt_policy function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes set_user_nice.
4. function set_user_nice invokes task_has_rt_policy.
5. function task_has_rt_policy invokes rt_policy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rt_policy.

————————————————————————————————These prompts belong to Node: 【security_task_setscheduler】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_task_setscheduler, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_task_setscheduler in the linux kenrel source code.
## The security_task_setscheduler function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes security_task_setscheduler.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_task_setscheduler.

————————————————————————————————These prompts belong to Node: 【uclamp_validate】at below.—————————————————————————————————— 
# Now I have a kernel internal function uclamp_validate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: uclamp_validate in the linux kenrel source code.
## The uclamp_validate function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes uclamp_validate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: uclamp_validate.

————————————————————————————————These prompts belong to Node: 【cpuset_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_lock in the linux kenrel source code.
## The cpuset_lock function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes cpuset_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_lock.

————————————————————————————————These prompts belong to Node: 【fair_policy】at below.—————————————————————————————————— 
# Now I have a kernel internal function fair_policy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fair_policy in the linux kenrel source code.
## The fair_policy function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes valid_policy.
8. function valid_policy invokes fair_policy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fair_policy.

————————————————————————————————These prompts belong to Node: 【task_nice】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_nice, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_nice in the linux kenrel source code.
## The task_nice function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes task_nice.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_nice.

————————————————————————————————These prompts belong to Node: 【dl_bandwidth_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function dl_bandwidth_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dl_bandwidth_enabled in the linux kenrel source code.
## The dl_bandwidth_enabled function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes dl_bandwidth_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dl_bandwidth_enabled.

————————————————————————————————These prompts belong to Node: 【cpuset_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpuset_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpuset_unlock in the linux kenrel source code.
## The cpuset_unlock function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes cpuset_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpuset_unlock.

————————————————————————————————These prompts belong to Node: 【synchronize_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function synchronize_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: synchronize_rcu in the linux kenrel source code.
## The synchronize_rcu function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes synchronize_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: synchronize_rcu.

————————————————————————————————These prompts belong to Node: 【class_preempt_constructor】at below.—————————————————————————————————— 
# Now I have a kernel internal function class_preempt_constructor, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: class_preempt_constructor in the linux kenrel source code.
## The class_preempt_constructor function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes complete_all.
9. function complete_all invokes swake_up_all_locked.
10. function swake_up_all_locked invokes swake_up_locked.
11. function swake_up_locked invokes try_to_wake_up.
12. function try_to_wake_up invokes class_preempt_constructor.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: class_preempt_constructor.

————————————————————————————————These prompts belong to Node: 【INIT_LIST_HEAD】at below.—————————————————————————————————— 
# Now I have a kernel internal function INIT_LIST_HEAD, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: INIT_LIST_HEAD in the linux kenrel source code.
## The INIT_LIST_HEAD function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes finish_wait.
9. function finish_wait invokes list_del_init.
10. function list_del_init invokes INIT_LIST_HEAD.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: INIT_LIST_HEAD.

————————————————————————————————These prompts belong to Node: 【__list_del_entry_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del_entry_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del_entry_valid in the linux kenrel source code.
## The __list_del_entry_valid function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes finish_wait.
9. function finish_wait invokes list_del_init.
10. function list_del_init invokes __list_del_entry.
11. function __list_del_entry invokes __list_del_entry_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del_entry_valid.

————————————————————————————————These prompts belong to Node: 【__list_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del in the linux kenrel source code.
## The __list_del function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes finish_wait.
9. function finish_wait invokes list_del_init.
10. function list_del_init invokes __list_del_entry.
11. function __list_del_entry invokes __list_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del.

————————————————————————————————These prompts belong to Node: 【list_is_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_is_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_is_head in the linux kenrel source code.
## The list_is_head function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes __sched_setaffinity.
5. function __sched_setaffinity invokes __set_cpus_allowed_ptr.
6. function __set_cpus_allowed_ptr invokes __set_cpus_allowed_ptr_locked.
7. function __set_cpus_allowed_ptr_locked invokes affine_move_task.
8. function affine_move_task invokes finish_wait.
9. function finish_wait invokes list_empty_careful.
10. function list_empty_careful invokes list_is_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_is_head.

————————————————————————————————These prompts belong to Node: 【bitmap_copy】at below.—————————————————————————————————— 
# Now I have a kernel internal function bitmap_copy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bitmap_copy in the linux kenrel source code.
## The bitmap_copy function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes cpumask_copy.
5. function cpumask_copy invokes bitmap_copy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bitmap_copy.

————————————————————————————————These prompts belong to Node: 【kfree】at below.—————————————————————————————————— 
# Now I have a kernel internal function kfree, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kfree in the linux kenrel source code.
## The kfree function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes kfree.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kfree.

————————————————————————————————These prompts belong to Node: 【kmalloc_large_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmalloc_large_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmalloc_large_node in the linux kenrel source code.
## The kmalloc_large_node function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes alloc_user_cpus_ptr.
5. function alloc_user_cpus_ptr invokes kmalloc_large_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmalloc_large_node.

————————————————————————————————These prompts belong to Node: 【kmalloc_node_trace】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmalloc_node_trace, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmalloc_node_trace in the linux kenrel source code.
## The kmalloc_node_trace function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes alloc_user_cpus_ptr.
5. function alloc_user_cpus_ptr invokes kmalloc_node_trace.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmalloc_node_trace.

————————————————————————————————These prompts belong to Node: 【__kmalloc_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kmalloc_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kmalloc_node in the linux kenrel source code.
## The __kmalloc_node function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes alloc_user_cpus_ptr.
5. function alloc_user_cpus_ptr invokes __kmalloc_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kmalloc_node.

————————————————————————————————These prompts belong to Node: 【alloc_cpumask_var】at below.—————————————————————————————————— 
# Now I have a kernel internal function alloc_cpumask_var, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alloc_cpumask_var in the linux kenrel source code.
## The alloc_cpumask_var function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes alloc_cpumask_var.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alloc_cpumask_var.

————————————————————————————————These prompts belong to Node: 【cpus_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function cpus_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cpus_read_lock in the linux kenrel source code.
## The cpus_read_lock function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_global_expedited.
4. function membarrier_global_expedited invokes cpus_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cpus_read_lock.

————————————————————————————————These prompts belong to Node: 【security_task_setnice】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_task_setnice, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_task_setnice in the linux kenrel source code.
## The security_task_setnice function is called in the sys_nice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_nice invokes __se_sys_nice.
2. function __se_sys_nice invokes __do_sys_nice.
3. function __do_sys_nice invokes security_task_setnice.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_task_setnice.

————————————————————————————————These prompts belong to Node: 【__bad_copy_from】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_from, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_from in the linux kenrel source code.
## The __bad_copy_from function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes __bad_copy_from.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_from.

————————————————————————————————These prompts belong to Node: 【__bad_copy_to】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_to, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_to in the linux kenrel source code.
## The __bad_copy_to function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes __bad_copy_to.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_to.

————————————————————————————————These prompts belong to Node: 【check_object_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_object_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_object_size in the linux kenrel source code.
## The check_object_size function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes check_object_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_object_size.

————————————————————————————————These prompts belong to Node: 【_copy_from_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_from_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_from_user in the linux kenrel source code.
## The _copy_from_user function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes _copy_from_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_from_user.

————————————————————————————————These prompts belong to Node: 【find_task_by_vpid】at below.—————————————————————————————————— 
# Now I have a kernel internal function find_task_by_vpid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: find_task_by_vpid in the linux kenrel source code.
## The find_task_by_vpid function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes class_find_get_task_constructor.
5. function class_find_get_task_constructor invokes find_get_task.
6. function find_get_task invokes find_process_by_pid.
7. function find_process_by_pid invokes find_task_by_vpid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: find_task_by_vpid.

————————————————————————————————These prompts belong to Node: 【__copy_overflow】at below.—————————————————————————————————— 
# Now I have a kernel internal function __copy_overflow, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __copy_overflow in the linux kenrel source code.
## The __copy_overflow function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes copy_overflow.
5. function copy_overflow invokes __copy_overflow.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __copy_overflow.

————————————————————————————————These prompts belong to Node: 【kmsan_unpoison_memory】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_unpoison_memory, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_unpoison_memory in the linux kenrel source code.
## The kmsan_unpoison_memory function is called in the sys_sched_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setattr invokes __se_sys_sched_setattr.
2. function __se_sys_sched_setattr invokes __do_sys_sched_setattr.
3. function __do_sys_sched_setattr invokes sched_copy_attr.
4. function sched_copy_attr invokes kmsan_unpoison_memory.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_unpoison_memory.

————————————————————————————————These prompts belong to Node: 【check_zeroed_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_zeroed_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_zeroed_user in the linux kenrel source code.
## The check_zeroed_user function is called in the sys_sched_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setattr invokes __se_sys_sched_setattr.
2. function __se_sys_sched_setattr invokes __do_sys_sched_setattr.
3. function __do_sys_sched_setattr invokes sched_copy_attr.
4. function sched_copy_attr invokes check_zeroed_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_zeroed_user.

————————————————————————————————These prompts belong to Node: 【security_task_getscheduler】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_task_getscheduler, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_task_getscheduler in the linux kenrel source code.
## The security_task_getscheduler function is called in the sys_sched_getscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_getscheduler invokes __se_sys_sched_getscheduler.
2. function __se_sys_sched_getscheduler invokes __do_sys_sched_getscheduler.
3. function __do_sys_sched_getscheduler invokes security_task_getscheduler.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_task_getscheduler.

————————————————————————————————These prompts belong to Node: 【_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_to_user in the linux kenrel source code.
## The _copy_to_user function is called in the sys_sched_getparam system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_getparam invokes __se_sys_sched_getparam.
2. function __se_sys_sched_getparam invokes __do_sys_sched_getparam.
3. function __do_sys_sched_getparam invokes _copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_to_user.

————————————————————————————————These prompts belong to Node: 【__access_ok】at below.—————————————————————————————————— 
# Now I have a kernel internal function __access_ok, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __access_ok in the linux kenrel source code.
## The __access_ok function is called in the sys_sched_getattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_getattr invokes __se_sys_sched_getattr.
2. function __se_sys_sched_getattr invokes __do_sys_sched_getattr.
3. function __do_sys_sched_getattr invokes sched_attr_copy_to_user.
4. function sched_attr_copy_to_user invokes __access_ok.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __access_ok.

————————————————————————————————These prompts belong to Node: 【ns_capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function ns_capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ns_capable in the linux kenrel source code.
## The ns_capable function is called in the sys_sched_setaffinity system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setaffinity invokes __se_sys_sched_setaffinity.
2. function __se_sys_sched_setaffinity invokes __do_sys_sched_setaffinity.
3. function __do_sys_sched_setaffinity invokes sched_setaffinity.
4. function sched_setaffinity invokes ns_capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ns_capable.

————————————————————————————————These prompts belong to Node: 【__do_sys_sched_get_priority_max】at below.—————————————————————————————————— 
# Now I have a kernel internal function __do_sys_sched_get_priority_max, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __do_sys_sched_get_priority_max in the linux kenrel source code.
## The __do_sys_sched_get_priority_max function is called in the sys_sched_get_priority_max system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_get_priority_max invokes __se_sys_sched_get_priority_max.
2. function __se_sys_sched_get_priority_max invokes __do_sys_sched_get_priority_max.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __do_sys_sched_get_priority_max.

————————————————————————————————These prompts belong to Node: 【__do_sys_sched_get_priority_min】at below.—————————————————————————————————— 
# Now I have a kernel internal function __do_sys_sched_get_priority_min, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __do_sys_sched_get_priority_min in the linux kenrel source code.
## The __do_sys_sched_get_priority_min function is called in the sys_sched_get_priority_min system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_get_priority_min invokes __se_sys_sched_get_priority_min.
2. function __se_sys_sched_get_priority_min invokes __do_sys_sched_get_priority_min.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __do_sys_sched_get_priority_min.

————————————————————————————————These prompts belong to Node: 【put_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_timespec in the linux kenrel source code.
## The put_timespec function is called in the sys_sched_rr_get_interval system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_rr_get_interval invokes __se_sys_sched_rr_get_interval.
2. function __se_sys_sched_rr_get_interval invokes __do_sys_sched_rr_get_interval.
3. function __do_sys_sched_rr_get_interval invokes put_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_timespec.

————————————————————————————————These prompts belong to Node: 【jiffies_to_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function jiffies_to_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: jiffies_to_timespec in the linux kenrel source code.
## The jiffies_to_timespec function is called in the sys_sched_rr_get_interval system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_rr_get_interval invokes __se_sys_sched_rr_get_interval.
2. function __se_sys_sched_rr_get_interval invokes __do_sys_sched_rr_get_interval.
3. function __do_sys_sched_rr_get_interval invokes sched_rr_get_interval.
4. function sched_rr_get_interval invokes jiffies_to_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: jiffies_to_timespec.

————————————————————————————————These prompts belong to Node: 【put_old_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_old_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_old_timespec in the linux kenrel source code.
## The put_old_timespec function is called in the sys_sched_rr_get_interval_time system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_rr_get_interval_time invokes __se_sys_sched_rr_get_interval_time.
2. function __se_sys_sched_rr_get_interval_time invokes __do_sys_sched_rr_get_interval_time.
3. function __do_sys_sched_rr_get_interval_time invokes put_old_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_old_timespec.

————————————————————————————————These prompts belong to Node: 【__checkparam_dl】at below.—————————————————————————————————— 
# Now I have a kernel internal function __checkparam_dl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __checkparam_dl in the linux kenrel source code.
## The __checkparam_dl function is called in the sys_sched_setscheduler system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sched_setscheduler invokes __se_sys_sched_setscheduler.
2. function __se_sys_sched_setscheduler invokes __do_sys_sched_setscheduler.
3. function __do_sys_sched_setscheduler invokes do_sched_setscheduler.
4. function do_sched_setscheduler invokes sched_setscheduler.
5. function sched_setscheduler invokes _sched_setscheduler.
6. function _sched_setscheduler invokes __sched_setscheduler.
7. function __sched_setscheduler invokes __checkparam_dl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __checkparam_dl.

————————————————————————————————These prompts belong to Node: 【on_each_cpu_cond_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function on_each_cpu_cond_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: on_each_cpu_cond_mask in the linux kenrel source code.
## The on_each_cpu_cond_mask function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_register_global_expedited.
4. function membarrier_register_global_expedited invokes sync_runqueues_membarrier_state.
5. function sync_runqueues_membarrier_state invokes on_each_cpu_mask.
6. function on_each_cpu_mask invokes on_each_cpu_cond_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: on_each_cpu_cond_mask.

————————————————————————————————These prompts belong to Node: 【smp_call_function_single】at below.—————————————————————————————————— 
# Now I have a kernel internal function smp_call_function_single, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: smp_call_function_single in the linux kenrel source code.
## The smp_call_function_single function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_private_expedited.
4. function membarrier_private_expedited invokes smp_call_function_single.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: smp_call_function_single.

————————————————————————————————These prompts belong to Node: 【smp_call_function_many】at below.—————————————————————————————————— 
# Now I have a kernel internal function smp_call_function_many, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: smp_call_function_many in the linux kenrel source code.
## The smp_call_function_many function is called in the sys_membarrier system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_membarrier invokes __se_sys_membarrier.
2. function __se_sys_membarrier invokes __do_sys_membarrier.
3. function __do_sys_membarrier invokes membarrier_global_expedited.
4. function membarrier_global_expedited invokes smp_call_function_many.
## Based on the show of the kernel internal function chain. please reason step by step. Don't add new kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: smp_call_function_many.