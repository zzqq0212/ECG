
————————————————————————————————These prompts belong to Node: 【user_path_at】at below.—————————————————————————————————— 
# Now I have a kernel internal function user_path_at, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: user_path_at in the linux kenrel source code.
## The user_path_at function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes user_path_at.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: user_path_at.

————————————————————————————————These prompts belong to Node: 【ERR_PTR】at below.—————————————————————————————————— 
# Now I have a kernel internal function ERR_PTR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ERR_PTR in the linux kenrel source code.
## The ERR_PTR function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes ERR_PTR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ERR_PTR.

————————————————————————————————These prompts belong to Node: 【IS_ERR】at below.—————————————————————————————————— 
# Now I have a kernel internal function IS_ERR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: IS_ERR in the linux kenrel source code.
## The IS_ERR function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes IS_ERR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: IS_ERR.

————————————————————————————————These prompts belong to Node: 【PTR_ERR】at below.—————————————————————————————————— 
# Now I have a kernel internal function PTR_ERR, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: PTR_ERR in the linux kenrel source code.
## The PTR_ERR function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes PTR_ERR.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: PTR_ERR.

————————————————————————————————These prompts belong to Node: 【quotactl_cmd_onoff】at below.—————————————————————————————————— 
# Now I have a kernel internal function quotactl_cmd_onoff, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: quotactl_cmd_onoff in the linux kenrel source code.
## The quotactl_cmd_onoff function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes quotactl_cmd_onoff.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: quotactl_cmd_onoff.

————————————————————————————————These prompts belong to Node: 【array_index_mask_nospec】at below.—————————————————————————————————— 
# Now I have a kernel internal function array_index_mask_nospec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: array_index_mask_nospec in the linux kenrel source code.
## The array_index_mask_nospec function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes array_index_mask_nospec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: array_index_mask_nospec.

————————————————————————————————These prompts belong to Node: 【sb_rdonly】at below.—————————————————————————————————— 
# Now I have a kernel internal function sb_rdonly, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sb_rdonly in the linux kenrel source code.
## The sb_rdonly function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes sb_rdonly.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sb_rdonly.

————————————————————————————————These prompts belong to Node: 【current_user_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function current_user_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: current_user_ns in the linux kenrel source code.
## The current_user_ns function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes current_user_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: current_user_ns.

————————————————————————————————These prompts belong to Node: 【check_object_size】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_object_size, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_object_size in the linux kenrel source code.
## The check_object_size function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes check_object_size.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_object_size.

————————————————————————————————These prompts belong to Node: 【want_bigtime】at below.—————————————————————————————————— 
# Now I have a kernel internal function want_bigtime, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: want_bigtime in the linux kenrel source code.
## The want_bigtime function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getxquota.
5. function quota_getxquota invokes copy_to_xfs_dqblk.
6. function copy_to_xfs_dqblk invokes want_bigtime.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: want_bigtime.

————————————————————————————————These prompts belong to Node: 【quota_btobb】at below.—————————————————————————————————— 
# Now I have a kernel internal function quota_btobb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: quota_btobb in the linux kenrel source code.
## The quota_btobb function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getxquota.
5. function quota_getxquota invokes copy_to_xfs_dqblk.
6. function copy_to_xfs_dqblk invokes quota_btobb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: quota_btobb.

————————————————————————————————These prompts belong to Node: 【copy_to_xfs_dqblk_ts】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_to_xfs_dqblk_ts, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_to_xfs_dqblk_ts in the linux kenrel source code.
## The copy_to_xfs_dqblk_ts function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getxquota.
5. function quota_getxquota invokes copy_to_xfs_dqblk.
6. function copy_to_xfs_dqblk invokes copy_to_xfs_dqblk_ts.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_to_xfs_dqblk_ts.

————————————————————————————————These prompts belong to Node: 【make_kuid】at below.—————————————————————————————————— 
# Now I have a kernel internal function make_kuid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: make_kuid in the linux kenrel source code.
## The make_kuid function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes make_kuid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: make_kuid.

————————————————————————————————These prompts belong to Node: 【make_kgid】at below.—————————————————————————————————— 
# Now I have a kernel internal function make_kgid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: make_kgid in the linux kenrel source code.
## The make_kgid function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes make_kgid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: make_kgid.

————————————————————————————————These prompts belong to Node: 【make_kprojid】at below.—————————————————————————————————— 
# Now I have a kernel internal function make_kprojid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: make_kprojid in the linux kenrel source code.
## The make_kprojid function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getquota.
5. function quota_getquota invokes make_kqid.
6. function make_kqid invokes make_kprojid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: make_kprojid.

————————————————————————————————These prompts belong to Node: 【copy_qcinfo_from_xfs_dqblk】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_qcinfo_from_xfs_dqblk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_qcinfo_from_xfs_dqblk in the linux kenrel source code.
## The copy_qcinfo_from_xfs_dqblk function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setxquota.
5. function quota_setxquota invokes copy_qcinfo_from_xfs_dqblk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_qcinfo_from_xfs_dqblk.

————————————————————————————————These prompts belong to Node: 【quota_bbtob】at below.—————————————————————————————————— 
# Now I have a kernel internal function quota_bbtob, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: quota_bbtob in the linux kenrel source code.
## The quota_bbtob function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setxquota.
5. function quota_setxquota invokes copy_from_xfs_dqblk.
6. function copy_from_xfs_dqblk invokes quota_bbtob.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: quota_bbtob.

————————————————————————————————These prompts belong to Node: 【copy_from_xfs_dqblk_ts】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_from_xfs_dqblk_ts, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_from_xfs_dqblk_ts in the linux kenrel source code.
## The copy_from_xfs_dqblk_ts function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setxquota.
5. function quota_setxquota invokes copy_from_xfs_dqblk.
6. function copy_from_xfs_dqblk invokes copy_from_xfs_dqblk_ts.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_from_xfs_dqblk_ts.

————————————————————————————————These prompts belong to Node: 【quota_state_to_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function quota_state_to_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: quota_state_to_flags in the linux kenrel source code.
## The quota_state_to_flags function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getxstate.
5. function quota_getxstate invokes quota_getstate.
6. function quota_getstate invokes quota_state_to_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: quota_state_to_flags.

————————————————————————————————These prompts belong to Node: 【might_fault】at below.—————————————————————————————————— 
# Now I have a kernel internal function might_fault, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: might_fault in the linux kenrel source code.
## The might_fault function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getquota.
5. function quota_getquota invokes might_fault.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: might_fault.

————————————————————————————————These prompts belong to Node: 【kmsan_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_copy_to_user in the linux kenrel source code.
## The kmsan_copy_to_user function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getquota.
5. function quota_getquota invokes kmsan_copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_copy_to_user.

————————————————————————————————These prompts belong to Node: 【kmsan_unpoison_memory】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmsan_unpoison_memory, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmsan_unpoison_memory in the linux kenrel source code.
## The kmsan_unpoison_memory function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setquota.
5. function quota_setquota invokes kmsan_unpoison_memory.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmsan_unpoison_memory.

————————————————————————————————These prompts belong to Node: 【qbtos】at below.—————————————————————————————————— 
# Now I have a kernel internal function qbtos, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: qbtos in the linux kenrel source code.
## The qbtos function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setquota.
5. function quota_setquota invokes copy_from_if_dqblk.
6. function copy_from_if_dqblk invokes qbtos.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: qbtos.

————————————————————————————————These prompts belong to Node: 【stoqb】at below.—————————————————————————————————— 
# Now I have a kernel internal function stoqb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: stoqb in the linux kenrel source code.
## The stoqb function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getquota.
5. function quota_getquota invokes copy_to_if_dqblk.
6. function copy_to_if_dqblk invokes stoqb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: stoqb.

————————————————————————————————These prompts belong to Node: 【sb_dqopt】at below.—————————————————————————————————— 
# Now I have a kernel internal function sb_dqopt, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sb_dqopt in the linux kenrel source code.
## The sb_dqopt function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes sb_has_quota_active.
6. function sb_has_quota_active invokes sb_has_quota_loaded.
7. function sb_has_quota_loaded invokes sb_has_quota_usage_enabled.
8. function sb_has_quota_usage_enabled invokes sb_dqopt.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sb_dqopt.

————————————————————————————————These prompts belong to Node: 【dquot_state_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function dquot_state_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dquot_state_flag in the linux kenrel source code.
## The dquot_state_flag function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes sb_has_quota_active.
6. function sb_has_quota_active invokes sb_has_quota_loaded.
7. function sb_has_quota_loaded invokes sb_has_quota_usage_enabled.
8. function sb_has_quota_usage_enabled invokes dquot_state_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dquot_state_flag.

————————————————————————————————These prompts belong to Node: 【in_egroup_p】at below.—————————————————————————————————— 
# Now I have a kernel internal function in_egroup_p, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: in_egroup_p in the linux kenrel source code.
## The in_egroup_p function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes in_egroup_p.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: in_egroup_p.

————————————————————————————————These prompts belong to Node: 【security_quotactl】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_quotactl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_quotactl in the linux kenrel source code.
## The security_quotactl function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quota_sync_all.
4. function quota_sync_all invokes security_quotactl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_quotactl.

————————————————————————————————These prompts belong to Node: 【__kuid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kuid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kuid_val in the linux kenrel source code.
## The __kuid_val function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes uid_eq.
6. function uid_eq invokes __kuid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kuid_val.

————————————————————————————————These prompts belong to Node: 【ERR_CAST】at below.—————————————————————————————————— 
# Now I have a kernel internal function ERR_CAST, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ERR_CAST in the linux kenrel source code.
## The ERR_CAST function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes ERR_CAST.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ERR_CAST.

————————————————————————————————These prompts belong to Node: 【quotactl_cmd_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function quotactl_cmd_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: quotactl_cmd_write in the linux kenrel source code.
## The quotactl_cmd_write function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes quotactl_cmd_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: quotactl_cmd_write.

————————————————————————————————These prompts belong to Node: 【rcu_sync_is_idle】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_sync_is_idle, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_sync_is_idle in the linux kenrel source code.
## The rcu_sync_is_idle function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes sb_end_write.
5. function sb_end_write invokes __sb_end_write.
6. function __sb_end_write invokes percpu_up_read.
7. function percpu_up_read invokes rcu_sync_is_idle.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_sync_is_idle.

————————————————————————————————These prompts belong to Node: 【fdput】at below.—————————————————————————————————— 
# Now I have a kernel internal function fdput, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fdput in the linux kenrel source code.
## The fdput function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes fdput.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fdput.

————————————————————————————————These prompts belong to Node: 【__to_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function __to_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __to_fd in the linux kenrel source code.
## The __to_fd function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes fdget_raw.
4. function fdget_raw invokes __to_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __to_fd.

————————————————————————————————These prompts belong to Node: 【__warn_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function __warn_printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __warn_printk in the linux kenrel source code.
## The __warn_printk function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes filp_flush.
4. function filp_flush invokes __warn_printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __warn_printk.

————————————————————————————————These prompts belong to Node: 【check_data_corruption】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_data_corruption, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_data_corruption in the linux kenrel source code.
## The check_data_corruption function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes filp_flush.
4. function filp_flush invokes check_data_corruption.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_data_corruption.

————————————————————————————————These prompts belong to Node: 【build_open_how】at below.—————————————————————————————————— 
# Now I have a kernel internal function build_open_how, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: build_open_how in the linux kenrel source code.
## The build_open_how function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes build_open_how.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: build_open_how.

————————————————————————————————These prompts belong to Node: 【build_open_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function build_open_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: build_open_flags in the linux kenrel source code.
## The build_open_flags function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes build_open_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: build_open_flags.

————————————————————————————————These prompts belong to Node: 【d_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_inode in the linux kenrel source code.
## The d_inode function is called in the sys_fallocate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fallocate invokes __se_sys_fallocate.
2. function __se_sys_fallocate invokes __do_sys_fallocate.
3. function __do_sys_fallocate invokes ksys_fallocate.
4. function ksys_fallocate invokes vfs_fallocate.
5. function vfs_fallocate invokes fsnotify_modify.
6. function fsnotify_modify invokes fsnotify_file.
7. function fsnotify_file invokes fsnotify_parent.
8. function fsnotify_parent invokes d_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_inode.

————————————————————————————————These prompts belong to Node: 【file_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_inode in the linux kenrel source code.
## The file_inode function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes file_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_inode.

————————————————————————————————These prompts belong to Node: 【module_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function module_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: module_put in the linux kenrel source code.
## The module_put function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes cdev_put.
6. function cdev_put invokes module_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: module_put.

————————————————————————————————These prompts belong to Node: 【security_file_truncate】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_truncate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_truncate in the linux kenrel source code.
## The security_file_truncate function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes security_file_truncate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_truncate.

————————————————————————————————These prompts belong to Node: 【up_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function up_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: up_write in the linux kenrel source code.
## The up_write function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes up_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: up_write.

————————————————————————————————These prompts belong to Node: 【down_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_write in the linux kenrel source code.
## The down_write function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes down_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_write.

————————————————————————————————These prompts belong to Node: 【list_is_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_is_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_is_head in the linux kenrel source code.
## The list_is_head function is called in the sys_truncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_truncate invokes __se_sys_truncate.
2. function __se_sys_truncate invokes __do_sys_truncate.
3. function __do_sys_truncate invokes do_sys_truncate.
4. function do_sys_truncate invokes vfs_truncate.
5. function vfs_truncate invokes break_lease.
6. function break_lease invokes list_empty_careful.
7. function list_empty_careful invokes list_is_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_is_head.

————————————————————————————————These prompts belong to Node: 【mnt_idmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_idmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_idmap in the linux kenrel source code.
## The mnt_idmap function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes file_mnt_idmap.
5. function file_mnt_idmap invokes mnt_idmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_idmap.

————————————————————————————————These prompts belong to Node: 【d_backing_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_backing_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_backing_inode in the linux kenrel source code.
## The d_backing_inode function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes d_backing_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_backing_inode.

————————————————————————————————These prompts belong to Node: 【revert_creds】at below.—————————————————————————————————— 
# Now I have a kernel internal function revert_creds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: revert_creds in the linux kenrel source code.
## The revert_creds function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes revert_creds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: revert_creds.

————————————————————————————————These prompts belong to Node: 【prepare_creds】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepare_creds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepare_creds in the linux kenrel source code.
## The prepare_creds function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes access_override_creds.
5. function access_override_creds invokes prepare_creds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepare_creds.

————————————————————————————————These prompts belong to Node: 【override_creds】at below.—————————————————————————————————— 
# Now I have a kernel internal function override_creds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: override_creds in the linux kenrel source code.
## The override_creds function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes access_override_creds.
5. function access_override_creds invokes override_creds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: override_creds.

————————————————————————————————These prompts belong to Node: 【security_file_permission】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_permission, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_permission in the linux kenrel source code.
## The security_file_permission function is called in the sys_fallocate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fallocate invokes __se_sys_fallocate.
2. function __se_sys_fallocate invokes __do_sys_fallocate.
3. function __do_sys_fallocate invokes ksys_fallocate.
4. function ksys_fallocate invokes vfs_fallocate.
5. function vfs_fallocate invokes security_file_permission.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_permission.

————————————————————————————————These prompts belong to Node: 【rcuwait_wake_up】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcuwait_wake_up, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcuwait_wake_up in the linux kenrel source code.
## The rcuwait_wake_up function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes sb_end_write.
5. function sb_end_write invokes __sb_end_write.
6. function __sb_end_write invokes percpu_up_read.
7. function percpu_up_read invokes rcuwait_wake_up.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcuwait_wake_up.

————————————————————————————————These prompts belong to Node: 【__percpu_down_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function __percpu_down_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __percpu_down_read in the linux kenrel source code.
## The __percpu_down_read function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes sb_start_write.
5. function sb_start_write invokes __sb_start_write.
6. function __sb_start_write invokes percpu_down_read.
7. function percpu_down_read invokes __percpu_down_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __percpu_down_read.

————————————————————————————————These prompts belong to Node: 【security_path_truncate】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_truncate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_truncate in the linux kenrel source code.
## The security_path_truncate function is called in the sys_truncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_truncate invokes __se_sys_truncate.
2. function __se_sys_truncate invokes __do_sys_truncate.
3. function __do_sys_truncate invokes do_sys_truncate.
4. function do_sys_truncate invokes vfs_truncate.
5. function vfs_truncate invokes security_path_truncate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_truncate.

————————————————————————————————These prompts belong to Node: 【retry_estale】at below.—————————————————————————————————— 
# Now I have a kernel internal function retry_estale, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: retry_estale in the linux kenrel source code.
## The retry_estale function is called in the sys_truncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_truncate invokes __se_sys_truncate.
2. function __se_sys_truncate invokes __do_sys_truncate.
3. function __do_sys_truncate invokes do_sys_truncate.
4. function do_sys_truncate invokes retry_estale.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: retry_estale.

————————————————————————————————These prompts belong to Node: 【security_path_chown】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_chown, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_chown in the linux kenrel source code.
## The security_path_chown function is called in the sys_fchownat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchownat invokes __se_sys_fchownat.
2. function __se_sys_fchownat invokes __do_sys_fchownat.
3. function __do_sys_fchownat invokes do_fchownat.
4. function do_fchownat invokes chown_common.
5. function chown_common invokes security_path_chown.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_chown.

————————————————————————————————These prompts belong to Node: 【check_zeroed_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_zeroed_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_zeroed_user in the linux kenrel source code.
## The check_zeroed_user function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes check_zeroed_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_zeroed_user.

————————————————————————————————These prompts belong to Node: 【__bad_copy_from】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_from, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_from in the linux kenrel source code.
## The __bad_copy_from function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes __bad_copy_from.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_from.

————————————————————————————————These prompts belong to Node: 【__bad_copy_to】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bad_copy_to, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bad_copy_to in the linux kenrel source code.
## The __bad_copy_to function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes __bad_copy_to.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bad_copy_to.

————————————————————————————————These prompts belong to Node: 【__put_cred】at below.—————————————————————————————————— 
# Now I have a kernel internal function __put_cred, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __put_cred in the linux kenrel source code.
## The __put_cred function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes access_override_creds.
5. function access_override_creds invokes put_cred.
6. function put_cred invokes put_cred_many.
7. function put_cred_many invokes __put_cred.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __put_cred.

————————————————————————————————These prompts belong to Node: 【cap_isclear】at below.—————————————————————————————————— 
# Now I have a kernel internal function cap_isclear, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cap_isclear in the linux kenrel source code.
## The cap_isclear function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes access_need_override_creds.
5. function access_need_override_creds invokes cap_isclear.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cap_isclear.

————————————————————————————————These prompts belong to Node: 【cap_isidentical】at below.—————————————————————————————————— 
# Now I have a kernel internal function cap_isidentical, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cap_isidentical in the linux kenrel source code.
## The cap_isidentical function is called in the sys_faccessat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_faccessat invokes __se_sys_faccessat.
2. function __se_sys_faccessat invokes __do_sys_faccessat.
3. function __do_sys_faccessat invokes do_faccessat.
4. function do_faccessat invokes access_need_override_creds.
5. function access_need_override_creds invokes cap_isidentical.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cap_isidentical.

————————————————————————————————These prompts belong to Node: 【__kgid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kgid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kgid_val in the linux kenrel source code.
## The __kgid_val function is called in the sys_fchownat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchownat invokes __se_sys_fchownat.
2. function __se_sys_fchownat invokes __do_sys_fchownat.
3. function __do_sys_fchownat invokes do_fchownat.
4. function do_fchownat invokes chown_common.
5. function chown_common invokes __kgid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kgid_val.

————————————————————————————————These prompts belong to Node: 【__d_entry_type】at below.—————————————————————————————————— 
# Now I have a kernel internal function __d_entry_type, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __d_entry_type in the linux kenrel source code.
## The __d_entry_type function is called in the sys_fchdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchdir invokes __se_sys_fchdir.
2. function __se_sys_fchdir invokes __do_sys_fchdir.
3. function __do_sys_fchdir invokes d_can_lookup.
4. function d_can_lookup invokes __d_entry_type.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __d_entry_type.

————————————————————————————————These prompts belong to Node: 【ns_capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function ns_capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ns_capable in the linux kenrel source code.
## The ns_capable function is called in the sys_chroot system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_chroot invokes __se_sys_chroot.
2. function __se_sys_chroot invokes __do_sys_chroot.
3. function __do_sys_chroot invokes ns_capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ns_capable.

————————————————————————————————These prompts belong to Node: 【security_path_chroot】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_chroot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_chroot in the linux kenrel source code.
## The security_path_chroot function is called in the sys_chroot system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_chroot invokes __se_sys_chroot.
2. function __se_sys_chroot invokes __do_sys_chroot.
3. function __do_sys_chroot invokes security_path_chroot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_chroot.

————————————————————————————————These prompts belong to Node: 【security_path_chmod】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_chmod, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_chmod in the linux kenrel source code.
## The security_path_chmod function is called in the sys_fchmod system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchmod invokes __se_sys_fchmod.
2. function __se_sys_fchmod invokes __do_sys_fchmod.
3. function __do_sys_fchmod invokes vfs_fchmod.
4. function vfs_fchmod invokes chmod_common.
5. function chmod_common invokes security_path_chmod.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_chmod.

————————————————————————————————These prompts belong to Node: 【__audit_file】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_file, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_file in the linux kenrel source code.
## The __audit_file function is called in the sys_fchmod system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchmod invokes __se_sys_fchmod.
2. function __se_sys_fchmod invokes __do_sys_fchmod.
3. function __do_sys_fchmod invokes vfs_fchmod.
4. function vfs_fchmod invokes audit_file.
5. function audit_file invokes __audit_file.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_file.

————————————————————————————————These prompts belong to Node: 【audit_context】at below.—————————————————————————————————— 
# Now I have a kernel internal function audit_context, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: audit_context in the linux kenrel source code.
## The audit_context function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes audit_openat2_how.
4. function audit_openat2_how invokes audit_dummy_context.
5. function audit_dummy_context invokes audit_context.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: audit_context.

————————————————————————————————These prompts belong to Node: 【i_user_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function i_user_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: i_user_ns in the linux kenrel source code.
## The i_user_ns function is called in the sys_fchownat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchownat invokes __se_sys_fchownat.
2. function __se_sys_fchownat invokes __do_sys_fchownat.
3. function __do_sys_fchownat invokes do_fchownat.
4. function do_fchownat invokes chown_common.
5. function chown_common invokes i_user_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: i_user_ns.

————————————————————————————————These prompts belong to Node: 【import_iovec】at below.—————————————————————————————————— 
# Now I have a kernel internal function import_iovec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: import_iovec in the linux kenrel source code.
## The import_iovec function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes import_iovec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: import_iovec.

————————————————————————————————These prompts belong to Node: 【kfree】at below.—————————————————————————————————— 
# Now I have a kernel internal function kfree, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kfree in the linux kenrel source code.
## The kfree function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes putname.
7. function putname invokes kfree.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kfree.

————————————————————————————————These prompts belong to Node: 【pos_from_hilo】at below.—————————————————————————————————— 
# Now I have a kernel internal function pos_from_hilo, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pos_from_hilo in the linux kenrel source code.
## The pos_from_hilo function is called in the sys_preadv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_preadv invokes __se_sys_preadv.
2. function __se_sys_preadv invokes __do_sys_preadv.
3. function __do_sys_preadv invokes pos_from_hilo.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pos_from_hilo.

————————————————————————————————These prompts belong to Node: 【_copy_from_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_from_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_from_user in the linux kenrel source code.
## The _copy_from_user function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_setinfo.
5. function quota_setinfo invokes _copy_from_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_from_user.

————————————————————————————————These prompts belong to Node: 【__audit_openat2_how】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_openat2_how, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_openat2_how in the linux kenrel source code.
## The __audit_openat2_how function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes audit_openat2_how.
4. function audit_openat2_how invokes __audit_openat2_how.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_openat2_how.

————————————————————————————————These prompts belong to Node: 【__copy_overflow】at below.—————————————————————————————————— 
# Now I have a kernel internal function __copy_overflow, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __copy_overflow in the linux kenrel source code.
## The __copy_overflow function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes copy_overflow.
6. function copy_overflow invokes __copy_overflow.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __copy_overflow.

————————————————————————————————These prompts belong to Node: 【capable】at below.—————————————————————————————————— 
# Now I have a kernel internal function capable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: capable in the linux kenrel source code.
## The capable function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes check_quotactl_permission.
5. function check_quotactl_permission invokes capable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: capable.

————————————————————————————————These prompts belong to Node: 【i_size_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function i_size_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: i_size_read in the linux kenrel source code.
## The i_size_read function is called in the sys_copy_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_copy_file_range invokes __se_sys_copy_file_range.
2. function __se_sys_copy_file_range invokes __do_sys_copy_file_range.
3. function __do_sys_copy_file_range invokes vfs_copy_file_range.
4. function vfs_copy_file_range invokes generic_copy_file_checks.
5. function generic_copy_file_checks invokes i_size_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: i_size_read.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock in the linux kenrel source code.
## The _raw_spin_lock function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes _raw_spin_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock in the linux kenrel source code.
## The _raw_spin_unlock function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes _raw_spin_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock.

————————————————————————————————These prompts belong to Node: 【unsigned_offsets】at below.—————————————————————————————————— 
# Now I have a kernel internal function unsigned_offsets, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: unsigned_offsets in the linux kenrel source code.
## The unsigned_offsets function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes rw_verify_area.
7. function rw_verify_area invokes unsigned_offsets.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: unsigned_offsets.

————————————————————————————————These prompts belong to Node: 【iov_iter_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_count in the linux kenrel source code.
## The iov_iter_count function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes iov_iter_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_count.

————————————————————————————————These prompts belong to Node: 【send_sig】at below.—————————————————————————————————— 
# Now I have a kernel internal function send_sig, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: send_sig in the linux kenrel source code.
## The send_sig function is called in the sys_copy_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_copy_file_range invokes __se_sys_copy_file_range.
2. function __se_sys_copy_file_range invokes __do_sys_copy_file_range.
3. function __do_sys_copy_file_range invokes vfs_copy_file_range.
4. function vfs_copy_file_range invokes generic_copy_file_checks.
5. function generic_copy_file_checks invokes generic_write_check_limits.
6. function generic_write_check_limits invokes send_sig.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: send_sig.

————————————————————————————————These prompts belong to Node: 【task_rlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_rlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_rlimit in the linux kenrel source code.
## The task_rlimit function is called in the sys_copy_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_copy_file_range invokes __se_sys_copy_file_range.
2. function __se_sys_copy_file_range invokes __do_sys_copy_file_range.
3. function __do_sys_copy_file_range invokes vfs_copy_file_range.
4. function vfs_copy_file_range invokes generic_copy_file_checks.
5. function generic_copy_file_checks invokes generic_write_check_limits.
6. function generic_write_check_limits invokes rlimit.
7. function rlimit invokes task_rlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_rlimit.

————————————————————————————————These prompts belong to Node: 【generic_copy_file_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function generic_copy_file_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: generic_copy_file_range in the linux kenrel source code.
## The generic_copy_file_range function is called in the sys_copy_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_copy_file_range invokes __se_sys_copy_file_range.
2. function __se_sys_copy_file_range invokes __do_sys_copy_file_range.
3. function __do_sys_copy_file_range invokes vfs_copy_file_range.
4. function vfs_copy_file_range invokes generic_copy_file_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: generic_copy_file_range.

————————————————————————————————These prompts belong to Node: 【add_rchar】at below.—————————————————————————————————— 
# Now I have a kernel internal function add_rchar, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: add_rchar in the linux kenrel source code.
## The add_rchar function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes add_rchar.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: add_rchar.

————————————————————————————————These prompts belong to Node: 【add_wchar】at below.—————————————————————————————————— 
# Now I have a kernel internal function add_wchar, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: add_wchar in the linux kenrel source code.
## The add_wchar function is called in the sys_writev system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_writev invokes __se_sys_writev.
2. function __se_sys_writev invokes __do_sys_writev.
3. function __do_sys_writev invokes do_writev.
4. function do_writev invokes add_wchar.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: add_wchar.

————————————————————————————————These prompts belong to Node: 【inc_syscr】at below.—————————————————————————————————— 
# Now I have a kernel internal function inc_syscr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inc_syscr in the linux kenrel source code.
## The inc_syscr function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes inc_syscr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inc_syscr.

————————————————————————————————These prompts belong to Node: 【inc_syscw】at below.—————————————————————————————————— 
# Now I have a kernel internal function inc_syscw, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inc_syscw in the linux kenrel source code.
## The inc_syscw function is called in the sys_writev system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_writev invokes __se_sys_writev.
2. function __se_sys_writev invokes __do_sys_writev.
3. function __do_sys_writev invokes do_writev.
4. function do_writev invokes inc_syscw.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inc_syscw.

————————————————————————————————These prompts belong to Node: 【iter_iov】at below.—————————————————————————————————— 
# Now I have a kernel internal function iter_iov, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iter_iov in the linux kenrel source code.
## The iter_iov function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_loop_readv_writev.
7. function do_loop_readv_writev invokes iter_iov.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iter_iov.

————————————————————————————————These prompts belong to Node: 【iov_iter_advance】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_advance, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_advance in the linux kenrel source code.
## The iov_iter_advance function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_loop_readv_writev.
7. function do_loop_readv_writev invokes iov_iter_advance.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_advance.

————————————————————————————————These prompts belong to Node: 【kiocb_set_rw_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function kiocb_set_rw_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kiocb_set_rw_flags in the linux kenrel source code.
## The kiocb_set_rw_flags function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_iter_readv_writev.
7. function do_iter_readv_writev invokes kiocb_set_rw_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kiocb_set_rw_flags.

————————————————————————————————These prompts belong to Node: 【call_read_iter】at below.—————————————————————————————————— 
# Now I have a kernel internal function call_read_iter, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: call_read_iter in the linux kenrel source code.
## The call_read_iter function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_iter_readv_writev.
7. function do_iter_readv_writev invokes call_read_iter.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: call_read_iter.

————————————————————————————————These prompts belong to Node: 【call_write_iter】at below.—————————————————————————————————— 
# Now I have a kernel internal function call_write_iter, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: call_write_iter in the linux kenrel source code.
## The call_write_iter function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_iter_readv_writev.
7. function do_iter_readv_writev invokes call_write_iter.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: call_write_iter.

————————————————————————————————These prompts belong to Node: 【__get_task_ioprio】at below.—————————————————————————————————— 
# Now I have a kernel internal function __get_task_ioprio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __get_task_ioprio in the linux kenrel source code.
## The __get_task_ioprio function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes vfs_readv.
5. function vfs_readv invokes do_iter_read.
6. function do_iter_read invokes do_iter_readv_writev.
7. function do_iter_readv_writev invokes init_sync_kiocb.
8. function init_sync_kiocb invokes get_current_ioprio.
9. function get_current_ioprio invokes __get_task_ioprio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __get_task_ioprio.

————————————————————————————————These prompts belong to Node: 【___ratelimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function ___ratelimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ___ratelimit in the linux kenrel source code.
## The ___ratelimit function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes file_ioctl.
5. function file_ioctl invokes ioctl_fibmap.
6. function ioctl_fibmap invokes ___ratelimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ___ratelimit.

————————————————————————————————These prompts belong to Node: 【_printk】at below.—————————————————————————————————— 
# Now I have a kernel internal function _printk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _printk in the linux kenrel source code.
## The _printk function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes _printk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _printk.

————————————————————————————————These prompts belong to Node: 【vfs_llseek】at below.—————————————————————————————————— 
# Now I have a kernel internal function vfs_llseek, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vfs_llseek in the linux kenrel source code.
## The vfs_llseek function is called in the sys_lseek system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_lseek invokes __se_sys_lseek.
2. function __se_sys_lseek invokes __do_sys_lseek.
3. function __do_sys_lseek invokes ksys_lseek.
4. function ksys_lseek invokes vfs_llseek.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vfs_llseek.

————————————————————————————————These prompts belong to Node: 【_copy_to_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function _copy_to_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _copy_to_user in the linux kenrel source code.
## The _copy_to_user function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_getfmt.
5. function quota_getfmt invokes _copy_to_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _copy_to_user.

————————————————————————————————These prompts belong to Node: 【__access_ok】at below.—————————————————————————————————— 
# Now I have a kernel internal function __access_ok, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __access_ok in the linux kenrel source code.
## The __access_ok function is called in the sys_read system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_read invokes __se_sys_read.
2. function __se_sys_read invokes __do_sys_read.
3. function __do_sys_read invokes ksys_read.
4. function ksys_read invokes vfs_read.
5. function vfs_read invokes __access_ok.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __access_ok.

————————————————————————————————These prompts belong to Node: 【iov_iter_ubuf】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_ubuf, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_ubuf in the linux kenrel source code.
## The iov_iter_ubuf function is called in the sys_read system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_read invokes __se_sys_read.
2. function __se_sys_read invokes __do_sys_read.
3. function __do_sys_read invokes ksys_read.
4. function ksys_read invokes vfs_read.
5. function vfs_read invokes new_sync_read.
6. function new_sync_read invokes iov_iter_ubuf.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_ubuf.

————————————————————————————————These prompts belong to Node: 【file_ppos】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_ppos, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_ppos in the linux kenrel source code.
## The file_ppos function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes file_ppos.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_ppos.

————————————————————————————————These prompts belong to Node: 【__request_module】at below.—————————————————————————————————— 
# Now I have a kernel internal function __request_module, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __request_module in the linux kenrel source code.
## The __request_module function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes __request_module.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __request_module.

————————————————————————————————These prompts belong to Node: 【security_inode_getattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_getattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_getattr in the linux kenrel source code.
## The security_inode_getattr function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes security_inode_getattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_getattr.

————————————————————————————————These prompts belong to Node: 【inode_get_atime】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_get_atime, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_get_atime in the linux kenrel source code.
## The inode_get_atime function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes inode_get_atime.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_get_atime.

————————————————————————————————These prompts belong to Node: 【inode_get_mtime】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_get_mtime, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_get_mtime in the linux kenrel source code.
## The inode_get_mtime function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes inode_get_mtime.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_get_mtime.

————————————————————————————————These prompts belong to Node: 【inode_get_ctime】at below.—————————————————————————————————— 
# Now I have a kernel internal function inode_get_ctime, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inode_get_ctime in the linux kenrel source code.
## The inode_get_ctime function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes inode_get_ctime.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inode_get_ctime.

————————————————————————————————These prompts belong to Node: 【i_blocksize】at below.—————————————————————————————————— 
# Now I have a kernel internal function i_blocksize, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: i_blocksize in the linux kenrel source code.
## The i_blocksize function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes i_blocksize.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: i_blocksize.

————————————————————————————————These prompts belong to Node: 【__vfsgid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __vfsgid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __vfsgid_val in the linux kenrel source code.
## The __vfsgid_val function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes vfsgid_into_kgid.
10. function vfsgid_into_kgid invokes __vfsgid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __vfsgid_val.

————————————————————————————————These prompts belong to Node: 【__vfsuid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __vfsuid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __vfsuid_val in the linux kenrel source code.
## The __vfsuid_val function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_fstat.
6. function vfs_fstat invokes vfs_getattr.
7. function vfs_getattr invokes vfs_getattr_nosec.
8. function vfs_getattr_nosec invokes generic_fillattr.
9. function generic_fillattr invokes vfsuid_into_kuid.
10. function vfsuid_into_kuid invokes __vfsuid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __vfsuid_val.

————————————————————————————————These prompts belong to Node: 【getname_statx_lookup_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function getname_statx_lookup_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: getname_statx_lookup_flags in the linux kenrel source code.
## The getname_statx_lookup_flags function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes getname_statx_lookup_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: getname_statx_lookup_flags.

————————————————————————————————These prompts belong to Node: 【real_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function real_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: real_mount in the linux kenrel source code.
## The real_mount function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_statx.
6. function vfs_statx invokes real_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: real_mount.

————————————————————————————————These prompts belong to Node: 【bdev_statx_dioalign】at below.—————————————————————————————————— 
# Now I have a kernel internal function bdev_statx_dioalign, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bdev_statx_dioalign in the linux kenrel source code.
## The bdev_statx_dioalign function is called in the sys_stat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_stat invokes __se_sys_stat.
2. function __se_sys_stat invokes __do_sys_stat.
3. function __do_sys_stat invokes vfs_stat.
4. function vfs_stat invokes vfs_fstatat.
5. function vfs_fstatat invokes vfs_statx.
6. function vfs_statx invokes bdev_statx_dioalign.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bdev_statx_dioalign.

————————————————————————————————These prompts belong to Node: 【__folio_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function __folio_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __folio_put in the linux kenrel source code.
## The __folio_put function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes put_arg_page.
7. function put_arg_page invokes put_page.
8. function put_page invokes folio_put.
9. function folio_put invokes __folio_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __folio_put.

————————————————————————————————These prompts belong to Node: 【put_devmap_managed_page_refs】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_devmap_managed_page_refs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_devmap_managed_page_refs in the linux kenrel source code.
## The put_devmap_managed_page_refs function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes put_arg_page.
7. function put_arg_page invokes put_page.
8. function put_page invokes put_devmap_managed_page.
9. function put_devmap_managed_page invokes put_devmap_managed_page_refs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_devmap_managed_page_refs.

————————————————————————————————These prompts belong to Node: 【expand_downwards】at below.—————————————————————————————————— 
# Now I have a kernel internal function expand_downwards, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: expand_downwards in the linux kenrel source code.
## The expand_downwards function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes get_arg_page.
7. function get_arg_page invokes expand_downwards.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: expand_downwards.

————————————————————————————————These prompts belong to Node: 【get_user_pages_remote】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_user_pages_remote, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_user_pages_remote in the linux kenrel source code.
## The get_user_pages_remote function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes get_arg_page.
7. function get_arg_page invokes get_user_pages_remote.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_user_pages_remote.

————————————————————————————————These prompts belong to Node: 【vma_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_pages in the linux kenrel source code.
## The vma_pages function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes get_arg_page.
7. function get_arg_page invokes vma_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_pages.

————————————————————————————————These prompts belong to Node: 【mm_trace_rss_stat】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_trace_rss_stat, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_trace_rss_stat in the linux kenrel source code.
## The mm_trace_rss_stat function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes free_bprm.
6. function free_bprm invokes acct_arg_size.
7. function acct_arg_size invokes add_mm_counter.
8. function add_mm_counter invokes mm_trace_rss_stat.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_trace_rss_stat.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_do_trace_released】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_do_trace_released, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_do_trace_released in the linux kenrel source code.
## The __mmap_lock_do_trace_released function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes mmap_write_unlock.
9. function mmap_write_unlock invokes __mmap_lock_trace_released.
10. function __mmap_lock_trace_released invokes __mmap_lock_do_trace_released.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_do_trace_released.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_do_trace_acquire_returned】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_do_trace_acquire_returned, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_do_trace_acquire_returned in the linux kenrel source code.
## The __mmap_lock_do_trace_acquire_returned function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes mmap_write_lock_killable.
9. function mmap_write_lock_killable invokes __mmap_lock_trace_acquire_returned.
10. function __mmap_lock_trace_acquire_returned invokes __mmap_lock_do_trace_acquire_returned.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_do_trace_acquire_returned.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_do_trace_start_locking】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_do_trace_start_locking, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_do_trace_start_locking in the linux kenrel source code.
## The __mmap_lock_do_trace_start_locking function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes mmap_write_lock_killable.
9. function mmap_write_lock_killable invokes __mmap_lock_trace_start_locking.
10. function __mmap_lock_trace_start_locking invokes __mmap_lock_do_trace_start_locking.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_do_trace_start_locking.

————————————————————————————————These prompts belong to Node: 【downgrade_write】at below.—————————————————————————————————— 
# Now I have a kernel internal function downgrade_write, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: downgrade_write in the linux kenrel source code.
## The downgrade_write function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes get_arg_page.
7. function get_arg_page invokes mmap_write_downgrade.
8. function mmap_write_downgrade invokes downgrade_write.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: downgrade_write.

————————————————————————————————These prompts belong to Node: 【mmap_assert_write_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmap_assert_write_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmap_assert_write_locked in the linux kenrel source code.
## The mmap_assert_write_locked function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes mmap_write_unlock.
9. function mmap_write_unlock invokes vma_end_write_all.
10. function vma_end_write_all invokes mmap_assert_write_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmap_assert_write_locked.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irq in the linux kenrel source code.
## The _raw_spin_lock_irq function is called in the sys_signalfd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_signalfd invokes __se_sys_signalfd.
2. function __se_sys_signalfd invokes __do_sys_signalfd.
3. function __do_sys_signalfd invokes do_signalfd.
4. function do_signalfd invokes _raw_spin_lock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irq.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irq in the linux kenrel source code.
## The _raw_spin_unlock_irq function is called in the sys_signalfd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_signalfd invokes __se_sys_signalfd.
2. function __se_sys_signalfd invokes __do_sys_signalfd.
3. function __do_sys_signalfd invokes do_signalfd.
4. function do_signalfd invokes _raw_spin_unlock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irq.

————————————————————————————————These prompts belong to Node: 【eventpoll_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function eventpoll_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: eventpoll_release in the linux kenrel source code.
## The eventpoll_release function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes eventpoll_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: eventpoll_release.

————————————————————————————————These prompts belong to Node: 【ima_file_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function ima_file_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ima_file_free in the linux kenrel source code.
## The ima_file_free function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes ima_file_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ima_file_free.

————————————————————————————————These prompts belong to Node: 【put_pid】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_pid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_pid in the linux kenrel source code.
## The put_pid function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes put_pid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_pid.

————————————————————————————————These prompts belong to Node: 【security_file_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_free in the linux kenrel source code.
## The security_file_free function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes file_free.
6. function file_free invokes security_file_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_free.

————————————————————————————————These prompts belong to Node: 【backing_file】at below.—————————————————————————————————— 
# Now I have a kernel internal function backing_file, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: backing_file in the linux kenrel source code.
## The backing_file function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes file_free.
6. function file_free invokes backing_file_user_path.
7. function backing_file_user_path invokes backing_file.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: backing_file.

————————————————————————————————These prompts belong to Node: 【kmem_cache_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmem_cache_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmem_cache_free in the linux kenrel source code.
## The kmem_cache_free function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes kmem_cache_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmem_cache_free.

————————————————————————————————These prompts belong to Node: 【percpu_counter_add_batch】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_counter_add_batch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_counter_add_batch in the linux kenrel source code.
## The percpu_counter_add_batch function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes file_free.
6. function file_free invokes percpu_counter_dec.
7. function percpu_counter_dec invokes percpu_counter_add.
8. function percpu_counter_add invokes percpu_counter_add_batch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_counter_add_batch.

————————————————————————————————These prompts belong to Node: 【init_task_work】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_task_work, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_task_work in the linux kenrel source code.
## The init_task_work function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes fdput.
5. function fdput invokes fput.
6. function fput invokes init_task_work.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_task_work.

————————————————————————————————These prompts belong to Node: 【task_work_add】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_work_add, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_work_add in the linux kenrel source code.
## The task_work_add function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes fdput.
5. function fdput invokes fput.
6. function fput invokes task_work_add.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_work_add.

————————————————————————————————These prompts belong to Node: 【queue_delayed_work_on】at below.—————————————————————————————————— 
# Now I have a kernel internal function queue_delayed_work_on, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: queue_delayed_work_on in the linux kenrel source code.
## The queue_delayed_work_on function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes fdput.
5. function fdput invokes fput.
6. function fput invokes schedule_delayed_work.
7. function schedule_delayed_work invokes queue_delayed_work.
8. function queue_delayed_work invokes queue_delayed_work_on.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: queue_delayed_work_on.

————————————————————————————————These prompts belong to Node: 【llist_add_batch】at below.—————————————————————————————————— 
# Now I have a kernel internal function llist_add_batch, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: llist_add_batch in the linux kenrel source code.
## The llist_add_batch function is called in the sys_ftruncate system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ftruncate invokes __se_sys_ftruncate.
2. function __se_sys_ftruncate invokes __do_sys_ftruncate.
3. function __do_sys_ftruncate invokes do_sys_ftruncate.
4. function do_sys_ftruncate invokes fdput.
5. function fdput invokes fput.
6. function fput invokes llist_add.
7. function llist_add invokes llist_add_batch.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: llist_add_batch.

————————————————————————————————These prompts belong to Node: 【strlen】at below.—————————————————————————————————— 
# Now I have a kernel internal function strlen, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strlen in the linux kenrel source code.
## The strlen function is called in the sys_open_by_handle_at system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_by_handle_at invokes __se_sys_open_by_handle_at.
2. function __se_sys_open_by_handle_at invokes __do_sys_open_by_handle_at.
3. function __do_sys_open_by_handle_at invokes do_handle_open.
4. function do_handle_open invokes handle_to_path.
5. function handle_to_path invokes do_handle_to_path.
6. function do_handle_to_path invokes exportfs_decode_fh.
7. function exportfs_decode_fh invokes exportfs_decode_fh_raw.
8. function exportfs_decode_fh_raw invokes reconnect_path.
9. function reconnect_path invokes reconnect_one.
10. function reconnect_one invokes strlen.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strlen.

————————————————————————————————These prompts belong to Node: 【__mutex_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mutex_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mutex_init in the linux kenrel source code.
## The __mutex_init function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes __mutex_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mutex_init.

————————————————————————————————These prompts belong to Node: 【kmem_cache_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmem_cache_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmem_cache_alloc in the linux kenrel source code.
## The kmem_cache_alloc function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes kmem_cache_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmem_cache_alloc.

————————————————————————————————These prompts belong to Node: 【kmalloc_large】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmalloc_large, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmalloc_large in the linux kenrel source code.
## The kmalloc_large function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes kzalloc.
7. function kzalloc invokes kmalloc_large.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmalloc_large.

————————————————————————————————These prompts belong to Node: 【kmalloc_trace】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmalloc_trace, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmalloc_trace in the linux kenrel source code.
## The kmalloc_trace function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes kzalloc.
7. function kzalloc invokes kmalloc_trace.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmalloc_trace.

————————————————————————————————These prompts belong to Node: 【__kmalloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kmalloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kmalloc in the linux kenrel source code.
## The __kmalloc function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes kzalloc.
7. function kzalloc invokes __kmalloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kmalloc.

————————————————————————————————These prompts belong to Node: 【up_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function up_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: up_read in the linux kenrel source code.
## The up_read function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes up_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: up_read.

————————————————————————————————These prompts belong to Node: 【mutex_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_unlock in the linux kenrel source code.
## The mutex_unlock function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes free_bprm.
6. function free_bprm invokes mutex_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_unlock.

————————————————————————————————These prompts belong to Node: 【call_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function call_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: call_rcu in the linux kenrel source code.
## The call_rcu function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes call_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: call_rcu.

————————————————————————————————These prompts belong to Node: 【queue_work_on】at below.—————————————————————————————————— 
# Now I have a kernel internal function queue_work_on, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: queue_work_on in the linux kenrel source code.
## The queue_work_on function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_fsync.
6. function aio_fsync invokes schedule_work.
7. function schedule_work invokes queue_work.
8. function queue_work invokes queue_work_on.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: queue_work_on.

————————————————————————————————These prompts belong to Node: 【prepare_to_wait_event】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepare_to_wait_event, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepare_to_wait_event in the linux kenrel source code.
## The prepare_to_wait_event function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes prepare_to_wait_event.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepare_to_wait_event.

————————————————————————————————These prompts belong to Node: 【schedule】at below.—————————————————————————————————— 
# Now I have a kernel internal function schedule, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: schedule in the linux kenrel source code.
## The schedule function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes schedule.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: schedule.

————————————————————————————————These prompts belong to Node: 【finish_wait】at below.—————————————————————————————————— 
# Now I have a kernel internal function finish_wait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: finish_wait in the linux kenrel source code.
## The finish_wait function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes finish_wait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: finish_wait.

————————————————————————————————These prompts belong to Node: 【down_read】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_read, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_read in the linux kenrel source code.
## The down_read function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes down_read.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_read.

————————————————————————————————These prompts belong to Node: 【lockref_get】at below.—————————————————————————————————— 
# Now I have a kernel internal function lockref_get, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lockref_get in the linux kenrel source code.
## The lockref_get function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes path_init.
9. function path_init invokes path_get.
10. function path_get invokes dget.
11. function dget invokes lockref_get.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lockref_get.

————————————————————————————————These prompts belong to Node: 【ida_alloc_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function ida_alloc_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ida_alloc_range in the linux kenrel source code.
## The ida_alloc_range function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes alloc_mnt_ns.
5. function alloc_mnt_ns invokes ns_alloc_inum.
6. function ns_alloc_inum invokes proc_alloc_inum.
7. function proc_alloc_inum invokes ida_alloc_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ida_alloc_range.

————————————————————————————————These prompts belong to Node: 【lookup_bdev】at below.—————————————————————————————————— 
# Now I have a kernel internal function lookup_bdev, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lookup_bdev in the linux kenrel source code.
## The lookup_bdev function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes lookup_bdev.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lookup_bdev.

————————————————————————————————These prompts belong to Node: 【mutex_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_lock in the linux kenrel source code.
## The mutex_lock function is called in the sys_readv system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readv invokes __se_sys_readv.
2. function __se_sys_readv invokes __do_sys_readv.
3. function __do_sys_readv invokes do_readv.
4. function do_readv invokes fdget_pos.
5. function fdget_pos invokes __fdget_pos.
6. function __fdget_pos invokes mutex_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_lock.

————————————————————————————————These prompts belong to Node: 【refcount_warn_saturate】at below.—————————————————————————————————— 
# Now I have a kernel internal function refcount_warn_saturate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: refcount_warn_saturate in the linux kenrel source code.
## The refcount_warn_saturate function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes do_inode_permission.
12. function do_inode_permission invokes generic_permission.
13. function generic_permission invokes acl_permission_check.
14. function acl_permission_check invokes check_acl.
15. function check_acl invokes posix_acl_release.
16. function posix_acl_release invokes refcount_dec_and_test.
17. function refcount_dec_and_test invokes __refcount_dec_and_test.
18. function __refcount_dec_and_test invokes __refcount_sub_and_test.
19. function __refcount_sub_and_test invokes refcount_warn_saturate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: refcount_warn_saturate.

————————————————————————————————These prompts belong to Node: 【ida_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function ida_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ida_free in the linux kenrel source code.
## The ida_free function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes mntput.
8. function mntput invokes mntput_no_expire.
9. function mntput_no_expire invokes cleanup_mnt.
10. function cleanup_mnt invokes mnt_free_id.
11. function mnt_free_id invokes ida_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ida_free.

————————————————————————————————These prompts belong to Node: 【kobject_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function kobject_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kobject_put in the linux kenrel source code.
## The kobject_put function is called in the sys_close system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close invokes __se_sys_close.
2. function __se_sys_close invokes __do_sys_close.
3. function __do_sys_close invokes __fput_sync.
4. function __fput_sync invokes __fput.
5. function __fput invokes cdev_put.
6. function cdev_put invokes kobject_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kobject_put.

————————————————————————————————These prompts belong to Node: 【kfree_const】at below.—————————————————————————————————— 
# Now I have a kernel internal function kfree_const, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kfree_const in the linux kenrel source code.
## The kfree_const function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes clone_mnt.
7. function clone_mnt invokes alloc_vfsmnt.
8. function alloc_vfsmnt invokes kfree_const.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kfree_const.

————————————————————————————————These prompts belong to Node: 【d_flags_negative】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_flags_negative, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_flags_negative in the linux kenrel source code.
## The d_flags_negative function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes step_into.
12. function step_into invokes handle_mounts.
13. function handle_mounts invokes traverse_mounts.
14. function traverse_mounts invokes d_flags_negative.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_flags_negative.

————————————————————————————————These prompts belong to Node: 【follow_automount】at below.—————————————————————————————————— 
# Now I have a kernel internal function follow_automount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: follow_automount in the linux kenrel source code.
## The follow_automount function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes step_into.
12. function step_into invokes handle_mounts.
13. function handle_mounts invokes traverse_mounts.
14. function traverse_mounts invokes __traverse_mounts.
15. function __traverse_mounts invokes follow_automount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: follow_automount.

————————————————————————————————These prompts belong to Node: 【d_in_lookup】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_in_lookup, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_in_lookup in the linux kenrel source code.
## The d_in_lookup function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes lookup_slow.
11. function lookup_slow invokes __lookup_slow.
12. function __lookup_slow invokes d_in_lookup.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_in_lookup.

————————————————————————————————These prompts belong to Node: 【path_equal】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_equal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_equal in the linux kenrel source code.
## The path_equal function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes follow_dotdot_rcu.
12. function follow_dotdot_rcu invokes path_equal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_equal.

————————————————————————————————These prompts belong to Node: 【path_connected】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_connected, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_connected in the linux kenrel source code.
## The path_connected function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes follow_dotdot_rcu.
12. function follow_dotdot_rcu invokes path_connected.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_connected.

————————————————————————————————These prompts belong to Node: 【mnt_has_parent】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_has_parent, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_has_parent in the linux kenrel source code.
## The mnt_has_parent function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes follow_dotdot_rcu.
12. function follow_dotdot_rcu invokes choose_mountpoint_rcu.
13. function choose_mountpoint_rcu invokes mnt_has_parent.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_has_parent.

————————————————————————————————These prompts belong to Node: 【rol】at below.—————————————————————————————————— 
# Now I have a kernel internal function rol, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rol in the linux kenrel source code.
## The rol function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes rol.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rol.

————————————————————————————————These prompts belong to Node: 【load_unaligned_zeropad】at below.—————————————————————————————————— 
# Now I have a kernel internal function load_unaligned_zeropad, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: load_unaligned_zeropad in the linux kenrel source code.
## The load_unaligned_zeropad function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes load_unaligned_zeropad.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: load_unaligned_zeropad.

————————————————————————————————These prompts belong to Node: 【has_zero】at below.—————————————————————————————————— 
# Now I have a kernel internal function has_zero, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: has_zero in the linux kenrel source code.
## The has_zero function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes has_zero.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: has_zero.

————————————————————————————————These prompts belong to Node: 【prep_zero_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function prep_zero_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prep_zero_mask in the linux kenrel source code.
## The prep_zero_mask function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes prep_zero_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prep_zero_mask.

————————————————————————————————These prompts belong to Node: 【create_zero_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function create_zero_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: create_zero_mask in the linux kenrel source code.
## The create_zero_mask function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes create_zero_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: create_zero_mask.

————————————————————————————————These prompts belong to Node: 【fold_hash】at below.—————————————————————————————————— 
# Now I have a kernel internal function fold_hash, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fold_hash in the linux kenrel source code.
## The fold_hash function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes fold_hash.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fold_hash.

————————————————————————————————These prompts belong to Node: 【count_masked_bytes】at below.—————————————————————————————————— 
# Now I have a kernel internal function count_masked_bytes, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: count_masked_bytes in the linux kenrel source code.
## The count_masked_bytes function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes hash_name.
10. function hash_name invokes find_zero.
11. function find_zero invokes count_masked_bytes.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: count_masked_bytes.

————————————————————————————————These prompts belong to Node: 【__set_nameidata】at below.—————————————————————————————————— 
# Now I have a kernel internal function __set_nameidata, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __set_nameidata in the linux kenrel source code.
## The __set_nameidata function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes set_nameidata.
8. function set_nameidata invokes __set_nameidata.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __set_nameidata.

————————————————————————————————These prompts belong to Node: 【strncpy_from_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function strncpy_from_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strncpy_from_user in the linux kenrel source code.
## The strncpy_from_user function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes strncpy_from_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strncpy_from_user.

————————————————————————————————These prompts belong to Node: 【__audit_getname】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_getname, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_getname in the linux kenrel source code.
## The __audit_getname function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes audit_getname.
7. function audit_getname invokes __audit_getname.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_getname.

————————————————————————————————These prompts belong to Node: 【__audit_reusename】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_reusename, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_reusename in the linux kenrel source code.
## The __audit_reusename function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes quotactl_block.
4. function quotactl_block invokes getname.
5. function getname invokes getname_flags.
6. function getname_flags invokes audit_reusename.
7. function audit_reusename invokes __audit_reusename.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_reusename.

————————————————————————————————These prompts belong to Node: 【security_inode_create】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_create, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_create in the linux kenrel source code.
## The security_inode_create function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes vfs_create.
5. function vfs_create invokes security_inode_create.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_create.

————————————————————————————————These prompts belong to Node: 【security_path_mknod】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_mknod, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_mknod in the linux kenrel source code.
## The security_path_mknod function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes security_path_mknod.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_mknod.

————————————————————————————————These prompts belong to Node: 【may_mknod】at below.—————————————————————————————————— 
# Now I have a kernel internal function may_mknod, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: may_mknod in the linux kenrel source code.
## The may_mknod function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes may_mknod.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: may_mknod.

————————————————————————————————These prompts belong to Node: 【ima_post_path_mknod】at below.—————————————————————————————————— 
# Now I have a kernel internal function ima_post_path_mknod, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ima_post_path_mknod in the linux kenrel source code.
## The ima_post_path_mknod function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes ima_post_path_mknod.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ima_post_path_mknod.

————————————————————————————————These prompts belong to Node: 【security_path_mkdir】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_mkdir, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_mkdir in the linux kenrel source code.
## The security_path_mkdir function is called in the sys_mkdirat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mkdirat invokes __se_sys_mkdirat.
2. function __se_sys_mkdirat invokes __do_sys_mkdirat.
3. function __do_sys_mkdirat invokes do_mkdirat.
4. function do_mkdirat invokes security_path_mkdir.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_mkdir.

————————————————————————————————These prompts belong to Node: 【security_path_rmdir】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_rmdir, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_rmdir in the linux kenrel source code.
## The security_path_rmdir function is called in the sys_rmdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_rmdir invokes __se_sys_rmdir.
2. function __se_sys_rmdir invokes __do_sys_rmdir.
3. function __do_sys_rmdir invokes do_rmdir.
4. function do_rmdir invokes security_path_rmdir.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_rmdir.

————————————————————————————————These prompts belong to Node: 【security_inode_readlink】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_readlink, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_readlink in the linux kenrel source code.
## The security_inode_readlink function is called in the sys_readlinkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_readlinkat invokes __se_sys_readlinkat.
2. function __se_sys_readlinkat invokes __do_sys_readlinkat.
3. function __do_sys_readlinkat invokes do_readlinkat.
4. function do_readlinkat invokes security_inode_readlink.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_readlink.

————————————————————————————————These prompts belong to Node: 【kmap_local_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function kmap_local_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kmap_local_page in the linux kenrel source code.
## The kmap_local_page function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes memcpy_to_page.
7. function memcpy_to_page invokes kmap_local_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kmap_local_page.

————————————————————————————————These prompts belong to Node: 【__kunmap_local】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kunmap_local, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kunmap_local in the linux kenrel source code.
## The __kunmap_local function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes memcpy_to_page.
7. function memcpy_to_page invokes __kunmap_local.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kunmap_local.

————————————————————————————————These prompts belong to Node: 【vfs_ioctl】at below.—————————————————————————————————— 
# Now I have a kernel internal function vfs_ioctl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vfs_ioctl in the linux kenrel source code.
## The vfs_ioctl function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes vfs_ioctl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vfs_ioctl.

————————————————————————————————These prompts belong to Node: 【security_file_ioctl】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_ioctl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_ioctl in the linux kenrel source code.
## The security_file_ioctl function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes security_file_ioctl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_ioctl.

————————————————————————————————These prompts belong to Node: 【task_pid_nr】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_pid_nr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_pid_nr in the linux kenrel source code.
## The task_pid_nr function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes file_ioctl.
5. function file_ioctl invokes ioctl_fibmap.
6. function ioctl_fibmap invokes task_pid_nr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_pid_nr.

————————————————————————————————These prompts belong to Node: 【memdup_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function memdup_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memdup_user in the linux kenrel source code.
## The memdup_user function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes ioctl_file_dedupe_range.
5. function ioctl_file_dedupe_range invokes memdup_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memdup_user.

————————————————————————————————These prompts belong to Node: 【file_accessed】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_accessed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_accessed in the linux kenrel source code.
## The file_accessed function is called in the sys_old_readdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_old_readdir invokes __se_sys_old_readdir.
2. function __se_sys_old_readdir invokes __do_sys_old_readdir.
3. function __do_sys_old_readdir invokes iterate_dir.
4. function iterate_dir invokes file_accessed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_accessed.

————————————————————————————————These prompts belong to Node: 【free_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_pages in the linux kenrel source code.
## The free_pages function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes poll_freewait.
7. function poll_freewait invokes free_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_pages.

————————————————————————————————These prompts belong to Node: 【remove_wait_queue】at below.—————————————————————————————————— 
# Now I have a kernel internal function remove_wait_queue, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: remove_wait_queue in the linux kenrel source code.
## The remove_wait_queue function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes poll_freewait.
7. function poll_freewait invokes free_poll_entry.
8. function free_poll_entry invokes remove_wait_queue.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: remove_wait_queue.

————————————————————————————————These prompts belong to Node: 【init_poll_funcptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_poll_funcptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_poll_funcptr in the linux kenrel source code.
## The init_poll_funcptr function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes poll_initwait.
7. function poll_initwait invokes init_poll_funcptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_poll_funcptr.

————————————————————————————————These prompts belong to Node: 【__get_free_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function __get_free_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __get_free_pages in the linux kenrel source code.
## The __get_free_pages function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_reconfigure_mnt.
6. function do_reconfigure_mnt invokes mnt_warn_timestamp_expiry.
7. function mnt_warn_timestamp_expiry invokes __get_free_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __get_free_pages.

————————————————————————————————These prompts belong to Node: 【ktime_get_ts】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_get_ts, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_get_ts in the linux kenrel source code.
## The ktime_get_ts function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes ktime_get_ts.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_get_ts.

————————————————————————————————These prompts belong to Node: 【task_nice】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_nice, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_nice in the linux kenrel source code.
## The task_nice function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes select_estimate_accuracy.
7. function select_estimate_accuracy invokes __estimate_accuracy.
8. function __estimate_accuracy invokes task_nice.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_nice.

————————————————————————————————These prompts belong to Node: 【set_normalized_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_normalized_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_normalized_timespec in the linux kenrel source code.
## The set_normalized_timespec function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes timespec64_sub.
6. function timespec64_sub invokes set_normalized_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_normalized_timespec.

————————————————————————————————These prompts belong to Node: 【rt_prio】at below.—————————————————————————————————— 
# Now I have a kernel internal function rt_prio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rt_prio in the linux kenrel source code.
## The rt_prio function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes select_estimate_accuracy.
7. function select_estimate_accuracy invokes rt_task.
8. function rt_task invokes rt_prio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rt_prio.

————————————————————————————————These prompts belong to Node: 【timespec64_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function timespec64_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: timespec64_valid in the linux kenrel source code.
## The timespec64_valid function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_set_timeout.
5. function poll_select_set_timeout invokes timespec64_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: timespec64_valid.

————————————————————————————————These prompts belong to Node: 【timespec64_add_safe】at below.—————————————————————————————————— 
# Now I have a kernel internal function timespec64_add_safe, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: timespec64_add_safe in the linux kenrel source code.
## The timespec64_add_safe function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_set_timeout.
5. function poll_select_set_timeout invokes timespec64_add_safe.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: timespec64_add_safe.

————————————————————————————————These prompts belong to Node: 【zero_fd_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function zero_fd_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: zero_fd_set in the linux kenrel source code.
## The zero_fd_set function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes zero_fd_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: zero_fd_set.

————————————————————————————————These prompts belong to Node: 【kvfree】at below.—————————————————————————————————— 
# Now I have a kernel internal function kvfree, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kvfree in the linux kenrel source code.
## The kvfree function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes alloc_fdtable.
11. function alloc_fdtable invokes kvfree.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kvfree.

————————————————————————————————These prompts belong to Node: 【should_fail_usercopy】at below.—————————————————————————————————— 
# Now I have a kernel internal function should_fail_usercopy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: should_fail_usercopy in the linux kenrel source code.
## The should_fail_usercopy function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes set_fd_set.
6. function set_fd_set invokes should_fail_usercopy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: should_fail_usercopy.

————————————————————————————————These prompts belong to Node: 【net_busy_loop_on】at below.—————————————————————————————————— 
# Now I have a kernel internal function net_busy_loop_on, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: net_busy_loop_on in the linux kenrel source code.
## The net_busy_loop_on function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes net_busy_loop_on.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: net_busy_loop_on.

————————————————————————————————These prompts belong to Node: 【max_select_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function max_select_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: max_select_fd in the linux kenrel source code.
## The max_select_fd function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes max_select_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: max_select_fd.

————————————————————————————————These prompts belong to Node: 【_raw_write_lock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_write_lock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_write_lock_irq in the linux kenrel source code.
## The _raw_write_lock_irq function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_setown_ex.
5. function f_setown_ex invokes __f_setown.
6. function __f_setown invokes f_modown.
7. function f_modown invokes _raw_write_lock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_write_lock_irq.

————————————————————————————————These prompts belong to Node: 【_raw_write_unlock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_write_unlock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_write_unlock_irq in the linux kenrel source code.
## The _raw_write_unlock_irq function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_setown_ex.
5. function f_setown_ex invokes __f_setown.
6. function __f_setown invokes f_modown.
7. function f_modown invokes _raw_write_unlock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_write_unlock_irq.

————————————————————————————————These prompts belong to Node: 【down_write_killable】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_write_killable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_write_killable in the linux kenrel source code.
## The down_write_killable function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes mmap_write_lock_killable.
9. function mmap_write_lock_killable invokes down_write_killable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_write_killable.

————————————————————————————————These prompts belong to Node: 【mmput】at below.—————————————————————————————————— 
# Now I have a kernel internal function mmput, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mmput in the linux kenrel source code.
## The mmput function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes free_bprm.
6. function free_bprm invokes mmput.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mmput.

————————————————————————————————These prompts belong to Node: 【__mmdrop】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmdrop, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmdrop in the linux kenrel source code.
## The __mmdrop function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes mmdrop.
8. function mmdrop invokes __mmdrop.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmdrop.

————————————————————————————————These prompts belong to Node: 【_find_next_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_next_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_next_bit in the linux kenrel source code.
## The _find_next_bit function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes mnt_get_count.
7. function mnt_get_count invokes find_next_bit.
8. function find_next_bit invokes _find_next_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_next_bit.

————————————————————————————————These prompts belong to Node: 【down_read_killable】at below.—————————————————————————————————— 
# Now I have a kernel internal function down_read_killable, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: down_read_killable in the linux kenrel source code.
## The down_read_killable function is called in the sys_old_readdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_old_readdir invokes __se_sys_old_readdir.
2. function __se_sys_old_readdir invokes __do_sys_old_readdir.
3. function __do_sys_old_readdir invokes iterate_dir.
4. function iterate_dir invokes down_read_killable.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: down_read_killable.

————————————————————————————————These prompts belong to Node: 【_raw_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_lock in the linux kenrel source code.
## The _raw_read_lock function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes _raw_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_lock.

————————————————————————————————These prompts belong to Node: 【_raw_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_unlock in the linux kenrel source code.
## The _raw_read_unlock function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes _raw_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_unlock.

————————————————————————————————These prompts belong to Node: 【sigismember】at below.—————————————————————————————————— 
# Now I have a kernel internal function sigismember, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sigismember in the linux kenrel source code.
## The sigismember function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes fatal_signal_pending.
7. function fatal_signal_pending invokes __fatal_signal_pending.
8. function __fatal_signal_pending invokes sigismember.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sigismember.

————————————————————————————————These prompts belong to Node: 【path_noexec】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_noexec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_noexec in the linux kenrel source code.
## The path_noexec function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes do_open_execat.
7. function do_open_execat invokes path_noexec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_noexec.

————————————————————————————————These prompts belong to Node: 【strnlen】at below.—————————————————————————————————— 
# Now I have a kernel internal function strnlen, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strnlen in the linux kenrel source code.
## The strnlen function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes strnlen.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strnlen.

————————————————————————————————These prompts belong to Node: 【valid_arg_len】at below.—————————————————————————————————— 
# Now I have a kernel internal function valid_arg_len, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: valid_arg_len in the linux kenrel source code.
## The valid_arg_len function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes valid_arg_len.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: valid_arg_len.

————————————————————————————————These prompts belong to Node: 【flush_dcache_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_dcache_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_dcache_page in the linux kenrel source code.
## The flush_dcache_page function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes memcpy_to_page.
7. function memcpy_to_page invokes flush_dcache_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_dcache_page.

————————————————————————————————These prompts belong to Node: 【flush_cache_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function flush_cache_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flush_cache_page in the linux kenrel source code.
## The flush_cache_page function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_string_kernel.
6. function copy_string_kernel invokes flush_arg_page.
7. function flush_arg_page invokes flush_cache_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flush_cache_page.

————————————————————————————————These prompts belong to Node: 【bprm_stack_limits】at below.—————————————————————————————————— 
# Now I have a kernel internal function bprm_stack_limits, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: bprm_stack_limits in the linux kenrel source code.
## The bprm_stack_limits function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_stack_limits.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: bprm_stack_limits.

————————————————————————————————These prompts belong to Node: 【free_arg_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_arg_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_arg_pages in the linux kenrel source code.
## The free_arg_pages function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes free_bprm.
6. function free_bprm invokes free_arg_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_arg_pages.

————————————————————————————————These prompts belong to Node: 【abort_creds】at below.—————————————————————————————————— 
# Now I have a kernel internal function abort_creds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: abort_creds in the linux kenrel source code.
## The abort_creds function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes free_bprm.
6. function free_bprm invokes abort_creds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: abort_creds.

————————————————————————————————These prompts belong to Node: 【sched_mm_cid_before_execve】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_mm_cid_before_execve, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_mm_cid_before_execve in the linux kenrel source code.
## The sched_mm_cid_before_execve function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes sched_mm_cid_before_execve.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_mm_cid_before_execve.

————————————————————————————————These prompts belong to Node: 【sched_exec】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_exec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_exec in the linux kenrel source code.
## The sched_exec function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes sched_exec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_exec.

————————————————————————————————These prompts belong to Node: 【security_bprm_creds_for_exec】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_bprm_creds_for_exec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_bprm_creds_for_exec in the linux kenrel source code.
## The security_bprm_creds_for_exec function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes security_bprm_creds_for_exec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_bprm_creds_for_exec.

————————————————————————————————These prompts belong to Node: 【sched_mm_cid_after_execve】at below.—————————————————————————————————— 
# Now I have a kernel internal function sched_mm_cid_after_execve, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sched_mm_cid_after_execve in the linux kenrel source code.
## The sched_mm_cid_after_execve function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes sched_mm_cid_after_execve.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sched_mm_cid_after_execve.

————————————————————————————————These prompts belong to Node: 【rseq_execve】at below.—————————————————————————————————— 
# Now I have a kernel internal function rseq_execve, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rseq_execve in the linux kenrel source code.
## The rseq_execve function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes rseq_execve.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rseq_execve.

————————————————————————————————These prompts belong to Node: 【user_events_execve】at below.—————————————————————————————————— 
# Now I have a kernel internal function user_events_execve, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: user_events_execve in the linux kenrel source code.
## The user_events_execve function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes user_events_execve.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: user_events_execve.

————————————————————————————————These prompts belong to Node: 【acct_update_integrals】at below.—————————————————————————————————— 
# Now I have a kernel internal function acct_update_integrals, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: acct_update_integrals in the linux kenrel source code.
## The acct_update_integrals function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes acct_update_integrals.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: acct_update_integrals.

————————————————————————————————These prompts belong to Node: 【task_numa_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_numa_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_numa_free in the linux kenrel source code.
## The task_numa_free function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes task_numa_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_numa_free.

————————————————————————————————These prompts belong to Node: 【force_fatal_sig】at below.—————————————————————————————————— 
# Now I have a kernel internal function force_fatal_sig, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: force_fatal_sig in the linux kenrel source code.
## The force_fatal_sig function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes force_fatal_sig.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: force_fatal_sig.

————————————————————————————————These prompts belong to Node: 【__rcu_read_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_lock in the linux kenrel source code.
## The __rcu_read_lock function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes fdget_raw.
4. function fdget_raw invokes __fdget_raw.
5. function __fdget_raw invokes __fget_light.
6. function __fget_light invokes __fget.
7. function __fget invokes __fget_files.
8. function __fget_files invokes __rcu_read_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_lock.

————————————————————————————————These prompts belong to Node: 【task_active_pid_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function task_active_pid_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: task_active_pid_ns in the linux kenrel source code.
## The task_active_pid_ns function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes task_active_pid_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: task_active_pid_ns.

————————————————————————————————These prompts belong to Node: 【proc_exec_connector】at below.—————————————————————————————————— 
# Now I have a kernel internal function proc_exec_connector, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: proc_exec_connector in the linux kenrel source code.
## The proc_exec_connector function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes proc_exec_connector.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: proc_exec_connector.

————————————————————————————————These prompts belong to Node: 【ptrace_event_enabled】at below.—————————————————————————————————— 
# Now I have a kernel internal function ptrace_event_enabled, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ptrace_event_enabled in the linux kenrel source code.
## The ptrace_event_enabled function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes ptrace_event.
8. function ptrace_event invokes ptrace_event_enabled.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ptrace_event_enabled.

————————————————————————————————These prompts belong to Node: 【ptrace_notify】at below.—————————————————————————————————— 
# Now I have a kernel internal function ptrace_notify, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ptrace_notify in the linux kenrel source code.
## The ptrace_notify function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes ptrace_event.
8. function ptrace_event invokes ptrace_notify.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ptrace_notify.

————————————————————————————————These prompts belong to Node: 【__audit_bprm】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_bprm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_bprm in the linux kenrel source code.
## The __audit_bprm function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes audit_bprm.
8. function audit_bprm invokes __audit_bprm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_bprm.

————————————————————————————————These prompts belong to Node: 【prepare_binprm】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepare_binprm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepare_binprm in the linux kenrel source code.
## The prepare_binprm function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes prepare_binprm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepare_binprm.

————————————————————————————————These prompts belong to Node: 【security_bprm_check】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_bprm_check, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_bprm_check in the linux kenrel source code.
## The security_bprm_check function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes security_bprm_check.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_bprm_check.

————————————————————————————————These prompts belong to Node: 【put_binfmt】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_binfmt, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_binfmt in the linux kenrel source code.
## The put_binfmt function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes search_binary_handler.
8. function search_binary_handler invokes put_binfmt.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_binfmt.

————————————————————————————————These prompts belong to Node: 【__rcu_read_unlock】at below.—————————————————————————————————— 
# Now I have a kernel internal function __rcu_read_unlock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __rcu_read_unlock in the linux kenrel source code.
## The __rcu_read_unlock function is called in the sys_quotactl_fd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl_fd invokes __se_sys_quotactl_fd.
2. function __se_sys_quotactl_fd invokes __do_sys_quotactl_fd.
3. function __do_sys_quotactl_fd invokes fdget_raw.
4. function fdget_raw invokes __fdget_raw.
5. function __fdget_raw invokes __fget_light.
6. function __fget_light invokes __fget.
7. function __fget invokes __fget_files.
8. function __fget_files invokes rcu_read_unlock.
9. function rcu_read_unlock invokes __rcu_read_unlock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __rcu_read_unlock.

————————————————————————————————These prompts belong to Node: 【__task_pid_nr_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function __task_pid_nr_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __task_pid_nr_ns in the linux kenrel source code.
## The __task_pid_nr_ns function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes exec_binprm.
7. function exec_binprm invokes task_pid_nr_ns.
8. function task_pid_nr_ns invokes __task_pid_nr_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __task_pid_nr_ns.

————————————————————————————————These prompts belong to Node: 【__next_thread】at below.—————————————————————————————————— 
# Now I have a kernel internal function __next_thread, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __next_thread in the linux kenrel source code.
## The __next_thread function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes check_unsafe_exec.
7. function check_unsafe_exec invokes next_thread.
8. function next_thread invokes __next_thread.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __next_thread.

————————————————————————————————These prompts belong to Node: 【mutex_lock_interruptible】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_lock_interruptible, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_lock_interruptible in the linux kenrel source code.
## The mutex_lock_interruptible function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes prepare_bprm_creds.
7. function prepare_bprm_creds invokes mutex_lock_interruptible.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_lock_interruptible.

————————————————————————————————These prompts belong to Node: 【prepare_exec_creds】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepare_exec_creds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepare_exec_creds in the linux kenrel source code.
## The prepare_exec_creds function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes bprm_execve.
6. function bprm_execve invokes prepare_bprm_creds.
7. function prepare_bprm_creds invokes prepare_exec_creds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepare_exec_creds.

————————————————————————————————These prompts belong to Node: 【__might_resched】at below.—————————————————————————————————— 
# Now I have a kernel internal function __might_resched, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __might_resched in the linux kenrel source code.
## The __might_resched function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes count.
6. function count invokes __might_resched.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __might_resched.

————————————————————————————————These prompts belong to Node: 【kasprintf】at below.—————————————————————————————————— 
# Now I have a kernel internal function kasprintf, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kasprintf in the linux kenrel source code.
## The kasprintf function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes kasprintf.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kasprintf.

————————————————————————————————These prompts belong to Node: 【mm_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function mm_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mm_alloc in the linux kenrel source code.
## The mm_alloc function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes mm_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mm_alloc.

————————————————————————————————These prompts belong to Node: 【vm_area_alloc】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_alloc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_alloc in the linux kenrel source code.
## The vm_area_alloc function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes vm_area_alloc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_alloc.

————————————————————————————————These prompts belong to Node: 【vma_set_anonymous】at below.—————————————————————————————————— 
# Now I have a kernel internal function vma_set_anonymous, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vma_set_anonymous in the linux kenrel source code.
## The vma_set_anonymous function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes vma_set_anonymous.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vma_set_anonymous.

————————————————————————————————These prompts belong to Node: 【vm_flags_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_flags_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_flags_init in the linux kenrel source code.
## The vm_flags_init function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes vm_flags_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_flags_init.

————————————————————————————————These prompts belong to Node: 【vm_get_page_prot】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_get_page_prot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_get_page_prot in the linux kenrel source code.
## The vm_get_page_prot function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes vm_get_page_prot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_get_page_prot.

————————————————————————————————These prompts belong to Node: 【insert_vm_struct】at below.—————————————————————————————————— 
# Now I have a kernel internal function insert_vm_struct, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: insert_vm_struct in the linux kenrel source code.
## The insert_vm_struct function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes insert_vm_struct.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: insert_vm_struct.

————————————————————————————————These prompts belong to Node: 【vm_area_free】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_area_free, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_area_free in the linux kenrel source code.
## The vm_area_free function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes alloc_bprm.
6. function alloc_bprm invokes bprm_mm_init.
7. function bprm_mm_init invokes __bprm_mm_init.
8. function __bprm_mm_init invokes vm_area_free.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_area_free.

————————————————————————————————These prompts belong to Node: 【is_rlimit_overlimit】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_rlimit_overlimit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_rlimit_overlimit in the linux kenrel source code.
## The is_rlimit_overlimit function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes is_rlimit_overlimit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_rlimit_overlimit.

————————————————————————————————These prompts belong to Node: 【strnlen_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function strnlen_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strnlen_user in the linux kenrel source code.
## The strnlen_user function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes copy_strings.
6. function copy_strings invokes strnlen_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strnlen_user.

————————————————————————————————These prompts belong to Node: 【compat_ptr】at below.—————————————————————————————————— 
# Now I have a kernel internal function compat_ptr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: compat_ptr in the linux kenrel source code.
## The compat_ptr function is called in the sys_execve system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_execve invokes __se_sys_execve.
2. function __se_sys_execve invokes __do_sys_execve.
3. function __do_sys_execve invokes do_execve.
4. function do_execve invokes do_execveat_common.
5. function do_execveat_common invokes count.
6. function count invokes get_user_arg_ptr.
7. function get_user_arg_ptr invokes compat_ptr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: compat_ptr.

————————————————————————————————These prompts belong to Node: 【__wake_up】at below.—————————————————————————————————— 
# Now I have a kernel internal function __wake_up, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __wake_up in the linux kenrel source code.
## The __wake_up function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes __wake_up.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __wake_up.

————————————————————————————————These prompts belong to Node: 【free_uid】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_uid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_uid in the linux kenrel source code.
## The free_uid function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes free_uid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_uid.

————————————————————————————————These prompts belong to Node: 【pipe_buf_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_buf_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_buf_release in the linux kenrel source code.
## The pipe_buf_release function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes free_pipe_info.
7. function free_pipe_info invokes pipe_buf_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_buf_release.

————————————————————————————————These prompts belong to Node: 【__free_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function __free_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __free_pages in the linux kenrel source code.
## The __free_pages function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes free_pipe_info.
7. function free_pipe_info invokes __free_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __free_pages.

————————————————————————————————These prompts belong to Node: 【too_many_pipe_buffers_soft】at below.—————————————————————————————————— 
# Now I have a kernel internal function too_many_pipe_buffers_soft, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: too_many_pipe_buffers_soft in the linux kenrel source code.
## The too_many_pipe_buffers_soft function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes too_many_pipe_buffers_soft.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: too_many_pipe_buffers_soft.

————————————————————————————————These prompts belong to Node: 【too_many_pipe_buffers_hard】at below.—————————————————————————————————— 
# Now I have a kernel internal function too_many_pipe_buffers_hard, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: too_many_pipe_buffers_hard in the linux kenrel source code.
## The too_many_pipe_buffers_hard function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes too_many_pipe_buffers_hard.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: too_many_pipe_buffers_hard.

————————————————————————————————These prompts belong to Node: 【__init_waitqueue_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_waitqueue_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_waitqueue_head in the linux kenrel source code.
## The __init_waitqueue_head function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes __init_waitqueue_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_waitqueue_head.

————————————————————————————————These prompts belong to Node: 【__must_check_overflow】at below.—————————————————————————————————— 
# Now I have a kernel internal function __must_check_overflow, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __must_check_overflow in the linux kenrel source code.
## The __must_check_overflow function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes get_pipe_inode.
7. function get_pipe_inode invokes alloc_pipe_info.
8. function alloc_pipe_info invokes kcalloc.
9. function kcalloc invokes kmalloc_array.
10. function kmalloc_array invokes __must_check_overflow.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __must_check_overflow.

————————————————————————————————These prompts belong to Node: 【init_wait_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_wait_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_wait_entry in the linux kenrel source code.
## The init_wait_entry function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes init_wait_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_wait_entry.

————————————————————————————————These prompts belong to Node: 【watch_queue_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function watch_queue_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: watch_queue_init in the linux kenrel source code.
## The watch_queue_init function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes create_pipe_files.
6. function create_pipe_files invokes watch_queue_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: watch_queue_init.

————————————————————————————————These prompts belong to Node: 【__audit_fd_pair】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_fd_pair, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_fd_pair in the linux kenrel source code.
## The __audit_fd_pair function is called in the sys_pipe system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pipe invokes __se_sys_pipe.
2. function __se_sys_pipe invokes __do_sys_pipe.
3. function __do_sys_pipe invokes do_pipe.
4. function do_pipe invokes __do_pipe_flags.
5. function __do_pipe_flags invokes audit_fd_pair.
6. function audit_fd_pair invokes __audit_fd_pair.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_fd_pair.

————————————————————————————————These prompts belong to Node: 【exportfs_can_encode_fid】at below.—————————————————————————————————— 
# Now I have a kernel internal function exportfs_can_encode_fid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: exportfs_can_encode_fid in the linux kenrel source code.
## The exportfs_can_encode_fid function is called in the sys_name_to_handle_at system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_name_to_handle_at invokes __se_sys_name_to_handle_at.
2. function __se_sys_name_to_handle_at invokes __do_sys_name_to_handle_at.
3. function __do_sys_name_to_handle_at invokes do_sys_name_to_handle.
4. function do_sys_name_to_handle invokes exportfs_can_encode_fh.
5. function exportfs_can_encode_fh invokes exportfs_can_encode_fid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: exportfs_can_encode_fid.

————————————————————————————————These prompts belong to Node: 【exportfs_can_decode_fh】at below.—————————————————————————————————— 
# Now I have a kernel internal function exportfs_can_decode_fh, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: exportfs_can_decode_fh in the linux kenrel source code.
## The exportfs_can_decode_fh function is called in the sys_name_to_handle_at system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_name_to_handle_at invokes __se_sys_name_to_handle_at.
2. function __se_sys_name_to_handle_at invokes __do_sys_name_to_handle_at.
3. function __do_sys_name_to_handle_at invokes do_sys_name_to_handle.
4. function do_sys_name_to_handle invokes exportfs_can_encode_fh.
5. function exportfs_can_encode_fh invokes exportfs_can_decode_fh.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: exportfs_can_decode_fh.

————————————————————————————————These prompts belong to Node: 【do_delayed_call】at below.—————————————————————————————————— 
# Now I have a kernel internal function do_delayed_call, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: do_delayed_call in the linux kenrel source code.
## The do_delayed_call function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes try_to_unlazy.
11. function try_to_unlazy invokes legitimize_links.
12. function legitimize_links invokes drop_links.
13. function drop_links invokes do_delayed_call.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: do_delayed_call.

————————————————————————————————These prompts belong to Node: 【security_inode_rename】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_rename, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_rename in the linux kenrel source code.
## The security_inode_rename function is called in the sys_renameat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_renameat invokes __se_sys_renameat.
2. function __se_sys_renameat invokes __do_sys_renameat.
3. function __do_sys_renameat invokes do_renameat.
4. function do_renameat invokes vfs_rename.
5. function vfs_rename invokes security_inode_rename.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_rename.

————————————————————————————————These prompts belong to Node: 【__audit_inode_child】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_inode_child, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_inode_child in the linux kenrel source code.
## The __audit_inode_child function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes vfs_create.
5. function vfs_create invokes may_create.
6. function may_create invokes audit_inode_child.
7. function audit_inode_child invokes __audit_inode_child.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_inode_child.

————————————————————————————————These prompts belong to Node: 【d_mountpoint】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_mountpoint, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_mountpoint in the linux kenrel source code.
## The d_mountpoint function is called in the sys_rmdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_rmdir invokes __se_sys_rmdir.
2. function __se_sys_rmdir invokes __do_sys_rmdir.
3. function __do_sys_rmdir invokes do_rmdir.
4. function do_rmdir invokes vfs_rmdir.
5. function vfs_rmdir invokes is_local_mountpoint.
6. function is_local_mountpoint invokes d_mountpoint.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_mountpoint.

————————————————————————————————These prompts belong to Node: 【security_inode_permission】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_permission, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_permission in the linux kenrel source code.
## The security_inode_permission function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes security_inode_permission.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_permission.

————————————————————————————————These prompts belong to Node: 【imajor】at below.—————————————————————————————————— 
# Now I have a kernel internal function imajor, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: imajor in the linux kenrel source code.
## The imajor function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes devcgroup_inode_permission.
12. function devcgroup_inode_permission invokes imajor.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: imajor.

————————————————————————————————These prompts belong to Node: 【iminor】at below.—————————————————————————————————— 
# Now I have a kernel internal function iminor, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iminor in the linux kenrel source code.
## The iminor function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes devcgroup_inode_permission.
12. function devcgroup_inode_permission invokes iminor.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iminor.

————————————————————————————————These prompts belong to Node: 【devcgroup_check_permission】at below.—————————————————————————————————— 
# Now I have a kernel internal function devcgroup_check_permission, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: devcgroup_check_permission in the linux kenrel source code.
## The devcgroup_check_permission function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes devcgroup_inode_permission.
12. function devcgroup_inode_permission invokes devcgroup_check_permission.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: devcgroup_check_permission.

————————————————————————————————These prompts belong to Node: 【capable_wrt_inode_uidgid】at below.—————————————————————————————————— 
# Now I have a kernel internal function capable_wrt_inode_uidgid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: capable_wrt_inode_uidgid in the linux kenrel source code.
## The capable_wrt_inode_uidgid function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes do_inode_permission.
12. function do_inode_permission invokes generic_permission.
13. function generic_permission invokes capable_wrt_inode_uidgid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: capable_wrt_inode_uidgid.

————————————————————————————————These prompts belong to Node: 【is_uncached_acl】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_uncached_acl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_uncached_acl in the linux kenrel source code.
## The is_uncached_acl function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes do_inode_permission.
12. function do_inode_permission invokes generic_permission.
13. function generic_permission invokes acl_permission_check.
14. function acl_permission_check invokes check_acl.
15. function check_acl invokes is_uncached_acl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_uncached_acl.

————————————————————————————————These prompts belong to Node: 【kvfree_call_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function kvfree_call_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kvfree_call_rcu in the linux kenrel source code.
## The kvfree_call_rcu function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes do_inode_permission.
12. function do_inode_permission invokes generic_permission.
13. function generic_permission invokes acl_permission_check.
14. function acl_permission_check invokes check_acl.
15. function check_acl invokes posix_acl_release.
16. function posix_acl_release invokes kvfree_call_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kvfree_call_rcu.

————————————————————————————————These prompts belong to Node: 【security_inode_link】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_link, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_link in the linux kenrel source code.
## The security_inode_link function is called in the sys_linkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_linkat invokes __se_sys_linkat.
2. function __se_sys_linkat invokes __do_sys_linkat.
3. function __do_sys_linkat invokes do_linkat.
4. function do_linkat invokes vfs_link.
5. function vfs_link invokes security_inode_link.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_link.

————————————————————————————————These prompts belong to Node: 【security_inode_symlink】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_symlink, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_symlink in the linux kenrel source code.
## The security_inode_symlink function is called in the sys_symlinkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_symlinkat invokes __se_sys_symlinkat.
2. function __se_sys_symlinkat invokes __do_sys_symlinkat.
3. function __do_sys_symlinkat invokes do_symlinkat.
4. function do_symlinkat invokes vfs_symlink.
5. function vfs_symlink invokes security_inode_symlink.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_symlink.

————————————————————————————————These prompts belong to Node: 【security_inode_unlink】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_unlink, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_unlink in the linux kenrel source code.
## The security_inode_unlink function is called in the sys_unlinkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_unlinkat invokes __se_sys_unlinkat.
2. function __se_sys_unlinkat invokes __do_sys_unlinkat.
3. function __do_sys_unlinkat invokes do_unlinkat.
4. function do_unlinkat invokes vfs_unlink.
5. function vfs_unlink invokes security_inode_unlink.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_unlink.

————————————————————————————————These prompts belong to Node: 【security_inode_rmdir】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_rmdir, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_rmdir in the linux kenrel source code.
## The security_inode_rmdir function is called in the sys_rmdir system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_rmdir invokes __se_sys_rmdir.
2. function __se_sys_rmdir invokes __do_sys_rmdir.
3. function __do_sys_rmdir invokes do_rmdir.
4. function do_rmdir invokes vfs_rmdir.
5. function vfs_rmdir invokes security_inode_rmdir.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_rmdir.

————————————————————————————————These prompts belong to Node: 【security_inode_mkdir】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_mkdir, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_mkdir in the linux kenrel source code.
## The security_inode_mkdir function is called in the sys_mkdirat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mkdirat invokes __se_sys_mkdirat.
2. function __se_sys_mkdirat invokes __do_sys_mkdirat.
3. function __do_sys_mkdirat invokes do_mkdirat.
4. function do_mkdirat invokes vfs_mkdir.
5. function vfs_mkdir invokes security_inode_mkdir.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_mkdir.

————————————————————————————————These prompts belong to Node: 【security_inode_mknod】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_mknod, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_mknod in the linux kenrel source code.
## The security_inode_mknod function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes vfs_mknod.
5. function vfs_mknod invokes security_inode_mknod.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_mknod.

————————————————————————————————These prompts belong to Node: 【path_put】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_put, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_put in the linux kenrel source code.
## The path_put function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes path_init.
9. function path_init invokes nd_jump_root.
10. function nd_jump_root invokes path_put.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_put.

————————————————————————————————These prompts belong to Node: 【d_revalidate】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_revalidate, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_revalidate in the linux kenrel source code.
## The d_revalidate function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes lookup_fast.
11. function lookup_fast invokes d_revalidate.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_revalidate.

————————————————————————————————These prompts belong to Node: 【__audit_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function __audit_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __audit_inode in the linux kenrel source code.
## The __audit_inode function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes step_into.
12. function step_into invokes pick_link.
13. function pick_link invokes may_follow_link.
14. function may_follow_link invokes audit_inode.
15. function audit_inode invokes __audit_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __audit_inode.

————————————————————————————————These prompts belong to Node: 【clear_delayed_call】at below.—————————————————————————————————— 
# Now I have a kernel internal function clear_delayed_call, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: clear_delayed_call in the linux kenrel source code.
## The clear_delayed_call function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes try_to_unlazy.
11. function try_to_unlazy invokes legitimize_links.
12. function legitimize_links invokes drop_links.
13. function drop_links invokes clear_delayed_call.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: clear_delayed_call.

————————————————————————————————These prompts belong to Node: 【lockref_get_not_dead】at below.—————————————————————————————————— 
# Now I have a kernel internal function lockref_get_not_dead, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lockref_get_not_dead in the linux kenrel source code.
## The lockref_get_not_dead function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes try_to_unlazy.
11. function try_to_unlazy invokes legitimize_links.
12. function legitimize_links invokes legitimize_path.
13. function legitimize_path invokes __legitimize_path.
14. function __legitimize_path invokes lockref_get_not_dead.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lockref_get_not_dead.

————————————————————————————————These prompts belong to Node: 【security_inode_follow_link】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_follow_link, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_follow_link in the linux kenrel source code.
## The security_inode_follow_link function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes step_into.
12. function step_into invokes pick_link.
13. function pick_link invokes security_inode_follow_link.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_follow_link.

————————————————————————————————These prompts belong to Node: 【audit_log_path_denied】at below.—————————————————————————————————— 
# Now I have a kernel internal function audit_log_path_denied, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: audit_log_path_denied in the linux kenrel source code.
## The audit_log_path_denied function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes walk_component.
10. function walk_component invokes handle_dots.
11. function handle_dots invokes step_into.
12. function step_into invokes pick_link.
13. function pick_link invokes may_follow_link.
14. function may_follow_link invokes audit_log_path_denied.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: audit_log_path_denied.

————————————————————————————————These prompts belong to Node: 【xattr_prefix】at below.—————————————————————————————————— 
# Now I have a kernel internal function xattr_prefix, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xattr_prefix in the linux kenrel source code.
## The xattr_prefix function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes __vfs_setxattr_noperm.
9. function __vfs_setxattr_noperm invokes __vfs_setxattr.
10. function __vfs_setxattr invokes xattr_resolve_name.
11. function xattr_resolve_name invokes xattr_prefix.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xattr_prefix.

————————————————————————————————These prompts belong to Node: 【security_inode_removexattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_removexattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_removexattr in the linux kenrel source code.
## The security_inode_removexattr function is called in the sys_removexattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_removexattr invokes __se_sys_removexattr.
2. function __se_sys_removexattr invokes __do_sys_removexattr.
3. function __do_sys_removexattr invokes path_removexattr.
4. function path_removexattr invokes removexattr.
5. function removexattr invokes vfs_removexattr.
6. function vfs_removexattr invokes __vfs_removexattr_locked.
7. function __vfs_removexattr_locked invokes security_inode_removexattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_removexattr.

————————————————————————————————These prompts belong to Node: 【evm_inode_post_removexattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function evm_inode_post_removexattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: evm_inode_post_removexattr in the linux kenrel source code.
## The evm_inode_post_removexattr function is called in the sys_removexattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_removexattr invokes __se_sys_removexattr.
2. function __se_sys_removexattr invokes __do_sys_removexattr.
3. function __do_sys_removexattr invokes path_removexattr.
4. function path_removexattr invokes removexattr.
5. function removexattr invokes vfs_removexattr.
6. function vfs_removexattr invokes __vfs_removexattr_locked.
7. function __vfs_removexattr_locked invokes evm_inode_post_removexattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: evm_inode_post_removexattr.

————————————————————————————————These prompts belong to Node: 【strcmp_prefix】at below.—————————————————————————————————— 
# Now I have a kernel internal function strcmp_prefix, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strcmp_prefix in the linux kenrel source code.
## The strcmp_prefix function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes __vfs_setxattr_noperm.
9. function __vfs_setxattr_noperm invokes __vfs_setxattr.
10. function __vfs_setxattr invokes xattr_resolve_name.
11. function xattr_resolve_name invokes strcmp_prefix.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strcmp_prefix.

————————————————————————————————These prompts belong to Node: 【security_inode_listxattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_listxattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_listxattr in the linux kenrel source code.
## The security_inode_listxattr function is called in the sys_listxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_listxattr invokes __se_sys_listxattr.
2. function __se_sys_listxattr invokes __do_sys_listxattr.
3. function __do_sys_listxattr invokes path_listxattr.
4. function path_listxattr invokes listxattr.
5. function listxattr invokes vfs_listxattr.
6. function vfs_listxattr invokes security_inode_listxattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_listxattr.

————————————————————————————————These prompts belong to Node: 【security_inode_listsecurity】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_listsecurity, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_listsecurity in the linux kenrel source code.
## The security_inode_listsecurity function is called in the sys_listxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_listxattr invokes __se_sys_listxattr.
2. function __se_sys_listxattr invokes __do_sys_listxattr.
3. function __do_sys_listxattr invokes path_listxattr.
4. function path_listxattr invokes listxattr.
5. function listxattr invokes vfs_listxattr.
6. function vfs_listxattr invokes security_inode_listsecurity.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_listsecurity.

————————————————————————————————These prompts belong to Node: 【security_inode_getxattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_getxattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_getxattr in the linux kenrel source code.
## The security_inode_getxattr function is called in the sys_getxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_getxattr invokes __se_sys_getxattr.
2. function __se_sys_getxattr invokes __do_sys_getxattr.
3. function __do_sys_getxattr invokes path_getxattr.
4. function path_getxattr invokes getxattr.
5. function getxattr invokes do_getxattr.
6. function do_getxattr invokes vfs_getxattr.
7. function vfs_getxattr invokes security_inode_getxattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_getxattr.

————————————————————————————————These prompts belong to Node: 【security_inode_getsecurity】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_getsecurity, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_getsecurity in the linux kenrel source code.
## The security_inode_getsecurity function is called in the sys_getxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_getxattr invokes __se_sys_getxattr.
2. function __se_sys_getxattr invokes __do_sys_getxattr.
3. function __do_sys_getxattr invokes path_getxattr.
4. function path_getxattr invokes getxattr.
5. function getxattr invokes do_getxattr.
6. function do_getxattr invokes vfs_getxattr.
7. function vfs_getxattr invokes xattr_getsecurity.
8. function xattr_getsecurity invokes security_inode_getsecurity.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_getsecurity.

————————————————————————————————These prompts belong to Node: 【cap_convert_nscap】at below.—————————————————————————————————— 
# Now I have a kernel internal function cap_convert_nscap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cap_convert_nscap in the linux kenrel source code.
## The cap_convert_nscap function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes cap_convert_nscap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cap_convert_nscap.

————————————————————————————————These prompts belong to Node: 【security_inode_setxattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_setxattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_setxattr in the linux kenrel source code.
## The security_inode_setxattr function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes security_inode_setxattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_setxattr.

————————————————————————————————These prompts belong to Node: 【security_inode_post_setxattr】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_post_setxattr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_post_setxattr in the linux kenrel source code.
## The security_inode_post_setxattr function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes __vfs_setxattr_noperm.
9. function __vfs_setxattr_noperm invokes security_inode_post_setxattr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_post_setxattr.

————————————————————————————————These prompts belong to Node: 【security_inode_setsecurity】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_inode_setsecurity, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_inode_setsecurity in the linux kenrel source code.
## The security_inode_setsecurity function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes __vfs_setxattr_noperm.
9. function __vfs_setxattr_noperm invokes security_inode_setsecurity.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_inode_setsecurity.

————————————————————————————————These prompts belong to Node: 【vmemdup_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function vmemdup_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vmemdup_user in the linux kenrel source code.
## The vmemdup_user function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes setxattr_copy.
6. function setxattr_copy invokes vmemdup_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vmemdup_user.

————————————————————————————————These prompts belong to Node: 【rb_erase】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_erase, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_erase in the linux kenrel source code.
## The rb_erase function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes ep_remove_safe.
6. function ep_remove_safe invokes __ep_remove.
7. function __ep_remove invokes rb_erase_cached.
8. function rb_erase_cached invokes rb_erase.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_erase.

————————————————————————————————These prompts belong to Node: 【rb_insert_color】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_insert_color, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_insert_color in the linux kenrel source code.
## The rb_insert_color function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes ep_rbtree_insert.
6. function ep_rbtree_insert invokes rb_insert_color_cached.
7. function rb_insert_color_cached invokes rb_insert_color.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_insert_color.

————————————————————————————————These prompts belong to Node: 【rb_next】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_next, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_next in the linux kenrel source code.
## The rb_next function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes rb_next.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_next.

————————————————————————————————These prompts belong to Node: 【security_path_unlink】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_unlink, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_unlink in the linux kenrel source code.
## The security_path_unlink function is called in the sys_unlinkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_unlinkat invokes __se_sys_unlinkat.
2. function __se_sys_unlinkat invokes __do_sys_unlinkat.
3. function __do_sys_unlinkat invokes do_unlinkat.
4. function do_unlinkat invokes security_path_unlink.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_unlink.

————————————————————————————————These prompts belong to Node: 【security_path_symlink】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_symlink, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_symlink in the linux kenrel source code.
## The security_path_symlink function is called in the sys_symlinkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_symlinkat invokes __se_sys_symlinkat.
2. function __se_sys_symlinkat invokes __do_sys_symlinkat.
3. function __do_sys_symlinkat invokes do_symlinkat.
4. function do_symlinkat invokes security_path_symlink.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_symlink.

————————————————————————————————These prompts belong to Node: 【security_path_link】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_link, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_link in the linux kenrel source code.
## The security_path_link function is called in the sys_linkat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_linkat invokes __se_sys_linkat.
2. function __se_sys_linkat invokes __do_sys_linkat.
3. function __do_sys_linkat invokes do_linkat.
4. function do_linkat invokes security_path_link.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_link.

————————————————————————————————These prompts belong to Node: 【security_path_rename】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_path_rename, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_path_rename in the linux kenrel source code.
## The security_path_rename function is called in the sys_renameat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_renameat invokes __se_sys_renameat.
2. function __se_sys_renameat invokes __do_sys_renameat.
3. function __do_sys_renameat invokes do_renameat.
4. function do_renameat invokes security_path_rename.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_path_rename.

————————————————————————————————These prompts belong to Node: 【pid_task】at below.—————————————————————————————————— 
# Now I have a kernel internal function pid_task, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pid_task in the linux kenrel source code.
## The pid_task function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_getown_ex.
5. function f_getown_ex invokes pid_task.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pid_task.

————————————————————————————————These prompts belong to Node: 【find_vpid】at below.—————————————————————————————————— 
# Now I have a kernel internal function find_vpid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: find_vpid in the linux kenrel source code.
## The find_vpid function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_setown_ex.
5. function f_setown_ex invokes find_vpid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: find_vpid.

————————————————————————————————These prompts belong to Node: 【security_file_set_fowner】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_set_fowner, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_set_fowner in the linux kenrel source code.
## The security_file_set_fowner function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_setown_ex.
5. function f_setown_ex invokes __f_setown.
6. function __f_setown invokes security_file_set_fowner.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_set_fowner.

————————————————————————————————These prompts belong to Node: 【_raw_read_lock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_lock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_lock_irq in the linux kenrel source code.
## The _raw_read_lock_irq function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_getown_ex.
5. function f_getown_ex invokes _raw_read_lock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_lock_irq.

————————————————————————————————These prompts belong to Node: 【pid_vnr】at below.—————————————————————————————————— 
# Now I have a kernel internal function pid_vnr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pid_vnr in the linux kenrel source code.
## The pid_vnr function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_getown_ex.
5. function f_getown_ex invokes pid_vnr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pid_vnr.

————————————————————————————————These prompts belong to Node: 【_raw_read_unlock_irq】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_read_unlock_irq, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_read_unlock_irq in the linux kenrel source code.
## The _raw_read_unlock_irq function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_getown_ex.
5. function f_getown_ex invokes _raw_read_unlock_irq.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_read_unlock_irq.

————————————————————————————————These prompts belong to Node: 【check_fcntl_cmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_fcntl_cmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_fcntl_cmd in the linux kenrel source code.
## The check_fcntl_cmd function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes check_fcntl_cmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_fcntl_cmd.

————————————————————————————————These prompts belong to Node: 【security_file_fcntl】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_fcntl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_fcntl in the linux kenrel source code.
## The security_file_fcntl function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes security_file_fcntl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_fcntl.

————————————————————————————————These prompts belong to Node: 【f_getowner_uids】at below.—————————————————————————————————— 
# Now I have a kernel internal function f_getowner_uids, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: f_getowner_uids in the linux kenrel source code.
## The f_getowner_uids function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes f_getowner_uids.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: f_getowner_uids.

————————————————————————————————These prompts belong to Node: 【valid_signal】at below.—————————————————————————————————— 
# Now I have a kernel internal function valid_signal, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: valid_signal in the linux kenrel source code.
## The valid_signal function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes valid_signal.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: valid_signal.

————————————————————————————————These prompts belong to Node: 【memfd_fcntl】at below.—————————————————————————————————— 
# Now I have a kernel internal function memfd_fcntl, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memfd_fcntl in the linux kenrel source code.
## The memfd_fcntl function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes memfd_fcntl.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memfd_fcntl.

————————————————————————————————These prompts belong to Node: 【rw_hint_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function rw_hint_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rw_hint_valid in the linux kenrel source code.
## The rw_hint_valid function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes fcntl_rw_hint.
5. function fcntl_rw_hint invokes rw_hint_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rw_hint_valid.

————————————————————————————————These prompts belong to Node: 【iocb_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function iocb_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iocb_flags in the linux kenrel source code.
## The iocb_flags function is called in the sys_fcntl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fcntl invokes __se_sys_fcntl.
2. function __se_sys_fcntl invokes __do_sys_fcntl.
3. function __do_sys_fcntl invokes do_fcntl.
4. function do_fcntl invokes setfl.
5. function setfl invokes iocb_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iocb_flags.

————————————————————————————————These prompts belong to Node: 【fscrypt_prepare_setflags】at below.—————————————————————————————————— 
# Now I have a kernel internal function fscrypt_prepare_setflags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fscrypt_prepare_setflags in the linux kenrel source code.
## The fscrypt_prepare_setflags function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes ioctl_fssetxattr.
5. function ioctl_fssetxattr invokes vfs_fileattr_set.
6. function vfs_fileattr_set invokes fileattr_set_prepare.
7. function fileattr_set_prepare invokes fscrypt_prepare_setflags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fscrypt_prepare_setflags.

————————————————————————————————These prompts belong to Node: 【__kprojid_val】at below.—————————————————————————————————— 
# Now I have a kernel internal function __kprojid_val, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __kprojid_val in the linux kenrel source code.
## The __kprojid_val function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes ioctl_fssetxattr.
5. function ioctl_fssetxattr invokes vfs_fileattr_set.
6. function vfs_fileattr_set invokes fileattr_set_prepare.
7. function fileattr_set_prepare invokes projid_valid.
8. function projid_valid invokes projid_eq.
9. function projid_eq invokes __kprojid_val.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __kprojid_val.

————————————————————————————————These prompts belong to Node: 【fileattr_fill_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function fileattr_fill_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fileattr_fill_flags in the linux kenrel source code.
## The fileattr_fill_flags function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes ioctl_setflags.
5. function ioctl_setflags invokes fileattr_fill_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fileattr_fill_flags.

————————————————————————————————These prompts belong to Node: 【fileattr_fill_xflags】at below.—————————————————————————————————— 
# Now I have a kernel internal function fileattr_fill_xflags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fileattr_fill_xflags in the linux kenrel source code.
## The fileattr_fill_xflags function is called in the sys_ioctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_ioctl invokes __se_sys_ioctl.
2. function __se_sys_ioctl invokes __do_sys_ioctl.
3. function __do_sys_ioctl invokes do_vfs_ioctl.
4. function do_vfs_ioctl invokes ioctl_fssetxattr.
5. function ioctl_fssetxattr invokes copy_fsxattr_from_user.
6. function copy_fsxattr_from_user invokes fileattr_fill_xflags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fileattr_fill_xflags.

————————————————————————————————These prompts belong to Node: 【_raw_spin_lock_irqsave】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_lock_irqsave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_lock_irqsave in the linux kenrel source code.
## The _raw_spin_lock_irqsave function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_poll.
6. function aio_poll invokes iocb_put.
7. function iocb_put invokes aio_complete.
8. function aio_complete invokes _raw_spin_lock_irqsave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_lock_irqsave.

————————————————————————————————These prompts belong to Node: 【_raw_spin_unlock_irqrestore】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_unlock_irqrestore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_unlock_irqrestore in the linux kenrel source code.
## The _raw_spin_unlock_irqrestore function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_poll.
6. function aio_poll invokes iocb_put.
7. function iocb_put invokes aio_complete.
8. function aio_complete invokes _raw_spin_unlock_irqrestore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_unlock_irqrestore.

————————————————————————————————These prompts belong to Node: 【blk_start_plug】at below.—————————————————————————————————— 
# Now I have a kernel internal function blk_start_plug, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blk_start_plug in the linux kenrel source code.
## The blk_start_plug function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes blk_start_plug.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blk_start_plug.

————————————————————————————————These prompts belong to Node: 【blk_finish_plug】at below.—————————————————————————————————— 
# Now I have a kernel internal function blk_finish_plug, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: blk_finish_plug in the linux kenrel source code.
## The blk_finish_plug function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes blk_finish_plug.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: blk_finish_plug.

————————————————————————————————These prompts belong to Node: 【wait_key_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function wait_key_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wait_key_set in the linux kenrel source code.
## The wait_key_set function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes wait_key_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wait_key_set.

————————————————————————————————These prompts belong to Node: 【vfs_poll】at below.—————————————————————————————————— 
# Now I have a kernel internal function vfs_poll, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vfs_poll in the linux kenrel source code.
## The vfs_poll function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes vfs_poll.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vfs_poll.

————————————————————————————————These prompts belong to Node: 【schedule_hrtimeout_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function schedule_hrtimeout_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: schedule_hrtimeout_range in the linux kenrel source code.
## The schedule_hrtimeout_range function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes poll_schedule_timeout.
7. function poll_schedule_timeout invokes schedule_hrtimeout_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: schedule_hrtimeout_range.

————————————————————————————————These prompts belong to Node: 【ktime_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_set in the linux kenrel source code.
## The ktime_set function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes timespec64_to_ktime.
7. function timespec64_to_ktime invokes ktime_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_set.

————————————————————————————————These prompts belong to Node: 【local_clock】at below.—————————————————————————————————— 
# Now I have a kernel internal function local_clock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: local_clock in the linux kenrel source code.
## The local_clock function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes core_sys_select.
5. function core_sys_select invokes do_select.
6. function do_select invokes busy_loop_current_time.
7. function busy_loop_current_time invokes local_clock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: local_clock.

————————————————————————————————These prompts belong to Node: 【kvmalloc_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function kvmalloc_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kvmalloc_node in the linux kenrel source code.
## The kvmalloc_node function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes alloc_fdtable.
11. function alloc_fdtable invokes kvmalloc_array.
12. function kvmalloc_array invokes kvmalloc.
13. function kvmalloc invokes kvmalloc_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kvmalloc_node.

————————————————————————————————These prompts belong to Node: 【put_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_timespec in the linux kenrel source code.
## The put_timespec function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes put_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_timespec.

————————————————————————————————These prompts belong to Node: 【put_old_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_old_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_old_timespec in the linux kenrel source code.
## The put_old_timespec function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes put_old_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_old_timespec.

————————————————————————————————These prompts belong to Node: 【test_and_clear_restore_sigmask】at below.—————————————————————————————————— 
# Now I have a kernel internal function test_and_clear_restore_sigmask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: test_and_clear_restore_sigmask in the linux kenrel source code.
## The test_and_clear_restore_sigmask function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes restore_saved_sigmask_unless.
6. function restore_saved_sigmask_unless invokes restore_saved_sigmask.
7. function restore_saved_sigmask invokes test_and_clear_restore_sigmask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: test_and_clear_restore_sigmask.

————————————————————————————————These prompts belong to Node: 【__set_current_blocked】at below.—————————————————————————————————— 
# Now I have a kernel internal function __set_current_blocked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __set_current_blocked in the linux kenrel source code.
## The __set_current_blocked function is called in the sys_select system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_select invokes __se_sys_select.
2. function __se_sys_select invokes __do_sys_select.
3. function __do_sys_select invokes kern_select.
4. function kern_select invokes poll_select_finish.
5. function poll_select_finish invokes restore_saved_sigmask_unless.
6. function restore_saved_sigmask_unless invokes restore_saved_sigmask.
7. function restore_saved_sigmask invokes __set_current_blocked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __set_current_blocked.

————————————————————————————————These prompts belong to Node: 【get_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_timespec in the linux kenrel source code.
## The get_timespec function is called in the sys_pselect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pselect invokes __se_sys_pselect.
2. function __se_sys_pselect invokes __do_sys_pselect.
3. function __do_sys_pselect invokes do_pselect.
4. function do_pselect invokes get_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_timespec.

————————————————————————————————These prompts belong to Node: 【get_old_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_old_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_old_timespec in the linux kenrel source code.
## The get_old_timespec function is called in the sys_pselect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pselect invokes __se_sys_pselect.
2. function __se_sys_pselect invokes __do_sys_pselect.
3. function __do_sys_pselect invokes do_pselect.
4. function do_pselect invokes get_old_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_old_timespec.

————————————————————————————————These prompts belong to Node: 【set_user_sigmask】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_user_sigmask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_user_sigmask in the linux kenrel source code.
## The set_user_sigmask function is called in the sys_pselect system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pselect invokes __se_sys_pselect.
2. function __se_sys_pselect invokes __do_sys_pselect.
3. function __do_sys_pselect invokes do_pselect.
4. function do_pselect invokes set_user_sigmask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_user_sigmask.

————————————————————————————————These prompts belong to Node: 【set_restart_fn】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_restart_fn, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_restart_fn in the linux kenrel source code.
## The set_restart_fn function is called in the sys_poll system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_poll invokes __se_sys_poll.
2. function __se_sys_poll invokes __do_sys_poll.
3. function __do_sys_poll invokes set_restart_fn.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_restart_fn.

————————————————————————————————These prompts belong to Node: 【demangle_poll】at below.—————————————————————————————————— 
# Now I have a kernel internal function demangle_poll, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: demangle_poll in the linux kenrel source code.
## The demangle_poll function is called in the sys_poll system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_poll invokes __se_sys_poll.
2. function __se_sys_poll invokes __do_sys_poll.
3. function __do_sys_poll invokes do_sys_poll.
4. function do_sys_poll invokes do_poll.
5. function do_poll invokes do_pollfd.
6. function do_pollfd invokes demangle_poll.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: demangle_poll.

————————————————————————————————These prompts belong to Node: 【mangle_poll】at below.—————————————————————————————————— 
# Now I have a kernel internal function mangle_poll, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mangle_poll in the linux kenrel source code.
## The mangle_poll function is called in the sys_poll system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_poll invokes __se_sys_poll.
2. function __se_sys_poll invokes __do_sys_poll.
3. function __do_sys_poll invokes do_sys_poll.
4. function do_sys_poll invokes do_poll.
5. function do_poll invokes do_pollfd.
6. function do_pollfd invokes mangle_poll.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mangle_poll.

————————————————————————————————These prompts belong to Node: 【hlist_unhashed】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_unhashed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_unhashed in the linux kenrel source code.
## The hlist_unhashed function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes dentry_free.
9. function dentry_free invokes hlist_unhashed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_unhashed.

————————————————————————————————These prompts belong to Node: 【hlist_bl_unhashed】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_bl_unhashed, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_bl_unhashed in the linux kenrel source code.
## The hlist_bl_unhashed function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes __d_drop.
10. function __d_drop invokes d_unhashed.
11. function d_unhashed invokes hlist_bl_unhashed.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_bl_unhashed.

————————————————————————————————These prompts belong to Node: 【d_hash】at below.—————————————————————————————————— 
# Now I have a kernel internal function d_hash, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: d_hash in the linux kenrel source code.
## The d_hash function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes __d_drop.
10. function __d_drop invokes ___d_drop.
11. function ___d_drop invokes d_hash.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: d_hash.

————————————————————————————————These prompts belong to Node: 【__hlist_bl_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __hlist_bl_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __hlist_bl_del in the linux kenrel source code.
## The __hlist_bl_del function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes __d_drop.
10. function __d_drop invokes ___d_drop.
11. function ___d_drop invokes __hlist_bl_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __hlist_bl_del.

————————————————————————————————These prompts belong to Node: 【INIT_HLIST_NODE】at below.—————————————————————————————————— 
# Now I have a kernel internal function INIT_HLIST_NODE, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: INIT_HLIST_NODE in the linux kenrel source code.
## The INIT_HLIST_NODE function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes dentry_unlink_inode.
10. function dentry_unlink_inode invokes hlist_del_init.
11. function hlist_del_init invokes INIT_HLIST_NODE.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: INIT_HLIST_NODE.

————————————————————————————————These prompts belong to Node: 【INIT_LIST_HEAD】at below.—————————————————————————————————— 
# Now I have a kernel internal function INIT_LIST_HEAD, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: INIT_LIST_HEAD in the linux kenrel source code.
## The INIT_LIST_HEAD function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes d_shrink_del.
9. function d_shrink_del invokes list_del_init.
10. function list_del_init invokes INIT_LIST_HEAD.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: INIT_LIST_HEAD.

————————————————————————————————These prompts belong to Node: 【__list_add_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_add_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_add_valid in the linux kenrel source code.
## The __list_add_valid function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dput_to_list.
9. function __dput_to_list invokes d_shrink_add.
10. function d_shrink_add invokes list_add.
11. function list_add invokes __list_add.
12. function __list_add invokes __list_add_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_add_valid.

————————————————————————————————These prompts belong to Node: 【__list_del_entry_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del_entry_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del_entry_valid in the linux kenrel source code.
## The __list_del_entry_valid function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes d_shrink_del.
9. function d_shrink_del invokes list_del_init.
10. function list_del_init invokes __list_del_entry.
11. function __list_del_entry invokes __list_del_entry_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del_entry_valid.

————————————————————————————————These prompts belong to Node: 【__list_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_del in the linux kenrel source code.
## The __list_del function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes d_shrink_del.
9. function d_shrink_del invokes list_del_init.
10. function list_del_init invokes __list_del_entry.
11. function __list_del_entry invokes __list_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_del.

————————————————————————————————These prompts belong to Node: 【dname_external】at below.—————————————————————————————————— 
# Now I have a kernel internal function dname_external, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dname_external in the linux kenrel source code.
## The dname_external function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes dentry_free.
9. function dentry_free invokes dname_external.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dname_external.

————————————————————————————————These prompts belong to Node: 【external_name】at below.—————————————————————————————————— 
# Now I have a kernel internal function external_name, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: external_name in the linux kenrel source code.
## The external_name function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes dentry_free.
9. function dentry_free invokes external_name.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: external_name.

————————————————————————————————These prompts belong to Node: 【mutex_trylock】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_trylock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_trylock in the linux kenrel source code.
## The mutex_trylock function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes epoll_mutex_lock.
5. function epoll_mutex_lock invokes mutex_trylock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_trylock.

————————————————————————————————These prompts belong to Node: 【_raw_spin_trylock】at below.—————————————————————————————————— 
# Now I have a kernel internal function _raw_spin_trylock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _raw_spin_trylock in the linux kenrel source code.
## The _raw_spin_trylock function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes shrink_lock_dentry.
9. function shrink_lock_dentry invokes _raw_spin_trylock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _raw_spin_trylock.

————————————————————————————————These prompts belong to Node: 【lockref_mark_dead】at below.—————————————————————————————————— 
# Now I have a kernel internal function lockref_mark_dead, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: lockref_mark_dead in the linux kenrel source code.
## The lockref_mark_dead function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes lockref_mark_dead.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: lockref_mark_dead.

————————————————————————————————These prompts belong to Node: 【__d_clear_type_and_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function __d_clear_type_and_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __d_clear_type_and_inode in the linux kenrel source code.
## The __d_clear_type_and_inode function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes dentry_unlink_inode.
10. function dentry_unlink_inode invokes __d_clear_type_and_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __d_clear_type_and_inode.

————————————————————————————————These prompts belong to Node: 【__hlist_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function __hlist_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __hlist_del in the linux kenrel source code.
## The __hlist_del function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes dentry_unlink_inode.
10. function dentry_unlink_inode invokes hlist_del_init.
11. function hlist_del_init invokes __hlist_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __hlist_del.

————————————————————————————————These prompts belong to Node: 【list_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_empty in the linux kenrel source code.
## The list_empty function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes list_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_empty.

————————————————————————————————These prompts belong to Node: 【list_lru_del】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_lru_del, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_lru_del in the linux kenrel source code.
## The list_lru_del function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes shrink_dentry_list.
8. function shrink_dentry_list invokes __dentry_kill.
9. function __dentry_kill invokes d_lru_del.
10. function d_lru_del invokes list_lru_del.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_lru_del.

————————————————————————————————These prompts belong to Node: 【copy_from_kernel_nofault】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_from_kernel_nofault, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_from_kernel_nofault in the linux kenrel source code.
## The copy_from_kernel_nofault function is called in the sys_getcwd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_getcwd invokes __se_sys_getcwd.
2. function __se_sys_getcwd invokes __do_sys_getcwd.
3. function __do_sys_getcwd invokes prepend_path.
4. function prepend_path invokes __prepend_path.
5. function __prepend_path invokes prepend_name.
6. function prepend_name invokes prepend.
7. function prepend invokes prepend_copy.
8. function prepend_copy invokes copy_from_kernel_nofault.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_from_kernel_nofault.

————————————————————————————————These prompts belong to Node: 【rcu_read_lock_sched】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_read_lock_sched, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_read_lock_sched in the linux kenrel source code.
## The rcu_read_lock_sched function is called in the sys_dup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_dup invokes __se_sys_dup.
2. function __se_sys_dup invokes __do_sys_dup.
3. function __do_sys_dup invokes fd_install.
4. function fd_install invokes rcu_read_lock_sched.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_read_lock_sched.

————————————————————————————————These prompts belong to Node: 【rcu_read_unlock_sched】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_read_unlock_sched, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_read_unlock_sched in the linux kenrel source code.
## The rcu_read_unlock_sched function is called in the sys_dup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_dup invokes __se_sys_dup.
2. function __se_sys_dup invokes __do_sys_dup.
3. function __do_sys_dup invokes fd_install.
4. function fd_install invokes rcu_read_unlock_sched.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_read_unlock_sched.

————————————————————————————————These prompts belong to Node: 【synchronize_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function synchronize_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: synchronize_rcu in the linux kenrel source code.
## The synchronize_rcu function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes synchronize_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: synchronize_rcu.

————————————————————————————————These prompts belong to Node: 【copy_fd_bitmaps】at below.—————————————————————————————————— 
# Now I have a kernel internal function copy_fd_bitmaps, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: copy_fd_bitmaps in the linux kenrel source code.
## The copy_fd_bitmaps function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes copy_fdtable.
11. function copy_fdtable invokes copy_fd_bitmaps.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: copy_fd_bitmaps.

————————————————————————————————These prompts belong to Node: 【fls_long】at below.—————————————————————————————————— 
# Now I have a kernel internal function fls_long, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fls_long in the linux kenrel source code.
## The fls_long function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes expand_files.
9. function expand_files invokes expand_fdtable.
10. function expand_fdtable invokes alloc_fdtable.
11. function alloc_fdtable invokes __roundup_pow_of_two.
12. function __roundup_pow_of_two invokes fls_long.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fls_long.

————————————————————————————————These prompts belong to Node: 【_find_next_zero_bit】at below.—————————————————————————————————— 
# Now I have a kernel internal function _find_next_zero_bit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: _find_next_zero_bit in the linux kenrel source code.
## The _find_next_zero_bit function is called in the sys_openat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_openat invokes __se_sys_openat.
2. function __se_sys_openat invokes __do_sys_openat.
3. function __do_sys_openat invokes do_sys_open.
4. function do_sys_open invokes do_sys_openat.
5. function do_sys_openat invokes get_unused_fd_flags.
6. function get_unused_fd_flags invokes __get_unused_fd_flags.
7. function __get_unused_fd_flags invokes alloc_fd.
8. function alloc_fd invokes find_next_fd.
9. function find_next_fd invokes find_next_zero_bit.
10. function find_next_zero_bit invokes _find_next_zero_bit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: _find_next_zero_bit.

————————————————————————————————These prompts belong to Node: 【last_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function last_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: last_fd in the linux kenrel source code.
## The last_fd function is called in the sys_close_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close_range invokes __se_sys_close_range.
2. function __se_sys_close_range invokes __do_sys_close_range.
3. function __do_sys_close_range invokes __close_range.
4. function __close_range invokes last_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: last_fd.

————————————————————————————————These prompts belong to Node: 【unshare_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function unshare_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: unshare_fd in the linux kenrel source code.
## The unshare_fd function is called in the sys_close_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close_range invokes __se_sys_close_range.
2. function __se_sys_close_range invokes __do_sys_close_range.
3. function __do_sys_close_range invokes __close_range.
4. function __close_range invokes unshare_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: unshare_fd.

————————————————————————————————These prompts belong to Node: 【__bitmap_set】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_set, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_set in the linux kenrel source code.
## The __bitmap_set function is called in the sys_close_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_close_range invokes __se_sys_close_range.
2. function __se_sys_close_range invokes __do_sys_close_range.
3. function __do_sys_close_range invokes __close_range.
4. function __close_range invokes __range_cloexec.
5. function __range_cloexec invokes __bitmap_set.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_set.

————————————————————————————————These prompts belong to Node: 【strchr】at below.—————————————————————————————————— 
# Now I have a kernel internal function strchr, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strchr in the linux kenrel source code.
## The strchr function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_new_mount.
6. function do_new_mount invokes strchr.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strchr.

————————————————————————————————These prompts belong to Node: 【put_filesystem】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_filesystem, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_filesystem in the linux kenrel source code.
## The put_filesystem function is called in the sys_sysfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sysfs invokes __se_sys_sysfs.
2. function __se_sys_sysfs invokes __do_sys_sysfs.
3. function __do_sys_sysfs invokes fs_name.
4. function fs_name invokes put_filesystem.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_filesystem.

————————————————————————————————These prompts belong to Node: 【strncmp】at below.—————————————————————————————————— 
# Now I have a kernel internal function strncmp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strncmp in the linux kenrel source code.
## The strncmp function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes vfs_setxattr.
7. function vfs_setxattr invokes __vfs_setxattr_locked.
8. function __vfs_setxattr_locked invokes xattr_permission.
9. function xattr_permission invokes strncmp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strncmp.

————————————————————————————————These prompts belong to Node: 【strcmp】at below.—————————————————————————————————— 
# Now I have a kernel internal function strcmp, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strcmp in the linux kenrel source code.
## The strcmp function is called in the sys_setxattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_setxattr invokes __se_sys_setxattr.
2. function __se_sys_setxattr invokes __do_sys_setxattr.
3. function __do_sys_setxattr invokes path_setxattr.
4. function path_setxattr invokes setxattr.
5. function setxattr invokes do_setxattr.
6. function do_setxattr invokes is_posix_acl_xattr.
7. function is_posix_acl_xattr invokes strcmp.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strcmp.

————————————————————————————————These prompts belong to Node: 【mnt_is_cursor】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_is_cursor, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_is_cursor in the linux kenrel source code.
## The mnt_is_cursor function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_new_mount.
6. function do_new_mount invokes do_new_mount_fc.
7. function do_new_mount_fc invokes mount_too_revealing.
8. function mount_too_revealing invokes mnt_already_visible.
9. function mnt_already_visible invokes mnt_is_cursor.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_is_cursor.

————————————————————————————————These prompts belong to Node: 【to_mnt_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function to_mnt_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: to_mnt_ns in the linux kenrel source code.
## The to_mnt_ns function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_loopback.
6. function do_loopback invokes mnt_ns_loop.
7. function mnt_ns_loop invokes to_mnt_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: to_mnt_ns.

————————————————————————————————These prompts belong to Node: 【is_anon_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_anon_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_anon_ns in the linux kenrel source code.
## The is_anon_ns function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes dissolve_on_fput.
5. function dissolve_on_fput invokes is_anon_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_anon_ns.

————————————————————————————————These prompts belong to Node: 【put_user_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_user_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_user_ns in the linux kenrel source code.
## The put_user_ns function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes dissolve_on_fput.
5. function dissolve_on_fput invokes free_mnt_ns.
6. function free_mnt_ns invokes put_user_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_user_ns.

————————————————————————————————These prompts belong to Node: 【dec_ucount】at below.—————————————————————————————————— 
# Now I have a kernel internal function dec_ucount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: dec_ucount in the linux kenrel source code.
## The dec_ucount function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes alloc_mnt_ns.
5. function alloc_mnt_ns invokes dec_mnt_namespaces.
6. function dec_mnt_namespaces invokes dec_ucount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: dec_ucount.

————————————————————————————————These prompts belong to Node: 【hlist_move_list】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_move_list, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_move_list in the linux kenrel source code.
## The hlist_move_list function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes hlist_move_list.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_move_list.

————————————————————————————————These prompts belong to Node: 【hlist_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_empty in the linux kenrel source code.
## The hlist_empty function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes hlist_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_empty.

————————————————————————————————These prompts belong to Node: 【synchronize_rcu_expedited】at below.—————————————————————————————————— 
# Now I have a kernel internal function synchronize_rcu_expedited, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: synchronize_rcu_expedited in the linux kenrel source code.
## The synchronize_rcu_expedited function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes synchronize_rcu_expedited.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: synchronize_rcu_expedited.

————————————————————————————————These prompts belong to Node: 【mnt_add_count】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_add_count, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_add_count in the linux kenrel source code.
## The mnt_add_count function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes mntput.
8. function mntput invokes mntput_no_expire.
9. function mntput_no_expire invokes mnt_add_count.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_add_count.

————————————————————————————————These prompts belong to Node: 【hlist_add_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_add_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_add_head in the linux kenrel source code.
## The hlist_add_head function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes mntput.
8. function mntput invokes mntput_no_expire.
9. function mntput_no_expire invokes hlist_add_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_add_head.

————————————————————————————————These prompts belong to Node: 【fsnotify_vfsmount_delete】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_vfsmount_delete, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_vfsmount_delete in the linux kenrel source code.
## The fsnotify_vfsmount_delete function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes mntput.
8. function mntput invokes mntput_no_expire.
9. function mntput_no_expire invokes cleanup_mnt.
10. function cleanup_mnt invokes fsnotify_vfsmount_delete.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_vfsmount_delete.

————————————————————————————————These prompts belong to Node: 【free_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function free_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: free_percpu in the linux kenrel source code.
## The free_percpu function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes clone_mnt.
7. function clone_mnt invokes free_vfsmnt.
8. function free_vfsmnt invokes free_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: free_percpu.

————————————————————————————————These prompts belong to Node: 【__list_splice】at below.—————————————————————————————————— 
# Now I have a kernel internal function __list_splice, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __list_splice in the linux kenrel source code.
## The __list_splice function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes namespace_unlock.
7. function namespace_unlock invokes list_splice_init.
8. function list_splice_init invokes __list_splice.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __list_splice.

————————————————————————————————These prompts belong to Node: 【next_mnt】at below.—————————————————————————————————— 
# Now I have a kernel internal function next_mnt, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: next_mnt in the linux kenrel source code.
## The next_mnt function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes umount_tree.
7. function umount_tree invokes next_mnt.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: next_mnt.

————————————————————————————————These prompts belong to Node: 【kstrdup_const】at below.—————————————————————————————————— 
# Now I have a kernel internal function kstrdup_const, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: kstrdup_const in the linux kenrel source code.
## The kstrdup_const function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes clone_mnt.
7. function clone_mnt invokes alloc_vfsmnt.
8. function alloc_vfsmnt invokes kstrdup_const.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: kstrdup_const.

————————————————————————————————These prompts belong to Node: 【__alloc_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function __alloc_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __alloc_percpu in the linux kenrel source code.
## The __alloc_percpu function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes clone_mnt.
7. function clone_mnt invokes alloc_vfsmnt.
8. function alloc_vfsmnt invokes __alloc_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __alloc_percpu.

————————————————————————————————These prompts belong to Node: 【get_user_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_user_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_user_ns in the linux kenrel source code.
## The get_user_ns function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes alloc_mnt_ns.
5. function alloc_mnt_ns invokes get_user_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_user_ns.

————————————————————————————————These prompts belong to Node: 【inc_ucount】at below.—————————————————————————————————— 
# Now I have a kernel internal function inc_ucount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inc_ucount in the linux kenrel source code.
## The inc_ucount function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes alloc_mnt_ns.
5. function alloc_mnt_ns invokes inc_mnt_namespaces.
6. function inc_mnt_namespaces invokes inc_ucount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inc_ucount.

————————————————————————————————These prompts belong to Node: 【check_mnt】at below.—————————————————————————————————— 
# Now I have a kernel internal function check_mnt, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: check_mnt in the linux kenrel source code.
## The check_mnt function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes can_umount.
6. function can_umount invokes check_mnt.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: check_mnt.

————————————————————————————————These prompts belong to Node: 【has_locked_children】at below.—————————————————————————————————— 
# Now I have a kernel internal function has_locked_children, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: has_locked_children in the linux kenrel source code.
## The has_locked_children function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes has_locked_children.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: has_locked_children.

————————————————————————————————These prompts belong to Node: 【set_mnt_shared】at below.—————————————————————————————————— 
# Now I have a kernel internal function set_mnt_shared, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: set_mnt_shared in the linux kenrel source code.
## The set_mnt_shared function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes clone_mnt.
7. function clone_mnt invokes set_mnt_shared.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: set_mnt_shared.

————————————————————————————————These prompts belong to Node: 【m_hash】at below.—————————————————————————————————— 
# Now I have a kernel internal function m_hash, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: m_hash in the linux kenrel source code.
## The m_hash function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes attach_mnt.
7. function attach_mnt invokes __attach_mnt.
8. function __attach_mnt invokes m_hash.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: m_hash.

————————————————————————————————These prompts belong to Node: 【hlist_add_head_rcu】at below.—————————————————————————————————— 
# Now I have a kernel internal function hlist_add_head_rcu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hlist_add_head_rcu in the linux kenrel source code.
## The hlist_add_head_rcu function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes attach_mnt.
7. function attach_mnt invokes __attach_mnt.
8. function __attach_mnt invokes hlist_add_head_rcu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hlist_add_head_rcu.

————————————————————————————————These prompts belong to Node: 【mp_hash】at below.—————————————————————————————————— 
# Now I have a kernel internal function mp_hash, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mp_hash in the linux kenrel source code.
## The mp_hash function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_loopback.
6. function do_loopback invokes lock_mount.
7. function lock_mount invokes do_lock_mount.
8. function do_lock_mount invokes get_mountpoint.
9. function get_mountpoint invokes lookup_mountpoint.
10. function lookup_mountpoint invokes mp_hash.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mp_hash.

————————————————————————————————These prompts belong to Node: 【security_sb_umount】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_sb_umount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_sb_umount in the linux kenrel source code.
## The security_sb_umount function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes security_sb_umount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_sb_umount.

————————————————————————————————These prompts belong to Node: 【path_mounted】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_mounted, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_mounted in the linux kenrel source code.
## The path_mounted function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes can_umount.
6. function can_umount invokes path_mounted.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_mounted.

————————————————————————————————These prompts belong to Node: 【is_mnt_ns_file】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_mnt_ns_file, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_mnt_ns_file in the linux kenrel source code.
## The is_mnt_ns_file function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes is_mnt_ns_file.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_mnt_ns_file.

————————————————————————————————These prompts belong to Node: 【skip_mnt_tree】at below.—————————————————————————————————— 
# Now I have a kernel internal function skip_mnt_tree, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: skip_mnt_tree in the linux kenrel source code.
## The skip_mnt_tree function is called in the sys_open_tree system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_open_tree invokes __se_sys_open_tree.
2. function __se_sys_open_tree invokes __do_sys_open_tree.
3. function __do_sys_open_tree invokes open_detached_copy.
4. function open_detached_copy invokes __do_loopback.
5. function __do_loopback invokes copy_tree.
6. function copy_tree invokes skip_mnt_tree.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: skip_mnt_tree.

————————————————————————————————These prompts belong to Node: 【cant_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function cant_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: cant_mount in the linux kenrel source code.
## The cant_mount function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_loopback.
6. function do_loopback invokes lock_mount.
7. function lock_mount invokes do_lock_mount.
8. function do_lock_mount invokes cant_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: cant_mount.

————————————————————————————————These prompts belong to Node: 【security_sb_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_sb_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_sb_mount in the linux kenrel source code.
## The security_sb_mount function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes security_sb_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_sb_mount.

————————————————————————————————These prompts belong to Node: 【security_sb_kern_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_sb_kern_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_sb_kern_mount in the linux kenrel source code.
## The security_sb_kern_mount function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_new_mount.
6. function do_new_mount invokes do_new_mount_fc.
7. function do_new_mount_fc invokes security_sb_kern_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_sb_kern_mount.

————————————————————————————————These prompts belong to Node: 【IS_ERR_OR_NULL】at below.—————————————————————————————————— 
# Now I have a kernel internal function IS_ERR_OR_NULL, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: IS_ERR_OR_NULL in the linux kenrel source code.
## The IS_ERR_OR_NULL function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_reconfigure_mnt.
6. function do_reconfigure_mnt invokes mnt_warn_timestamp_expiry.
7. function mnt_warn_timestamp_expiry invokes is_mounted.
8. function is_mounted invokes IS_ERR_OR_NULL.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: IS_ERR_OR_NULL.

————————————————————————————————These prompts belong to Node: 【ktime_get_real_seconds】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_get_real_seconds, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_get_real_seconds in the linux kenrel source code.
## The ktime_get_real_seconds function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_reconfigure_mnt.
6. function do_reconfigure_mnt invokes mnt_warn_timestamp_expiry.
7. function mnt_warn_timestamp_expiry invokes ktime_get_real_seconds.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_get_real_seconds.

————————————————————————————————These prompts belong to Node: 【is_power_of_】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_power_of_, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_power_of_ in the linux kenrel source code.
## The is_power_of_ function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_change_type.
6. function do_change_type invokes flags_to_propagation_type.
7. function flags_to_propagation_type invokes is_power_of_.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_power_of_.

————————————————————————————————These prompts belong to Node: 【can_change_locked_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function can_change_locked_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: can_change_locked_flags in the linux kenrel source code.
## The can_change_locked_flags function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_reconfigure_mnt.
6. function do_reconfigure_mnt invokes can_change_locked_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: can_change_locked_flags.

————————————————————————————————These prompts belong to Node: 【mnt_unhold_writers】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_unhold_writers, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_unhold_writers in the linux kenrel source code.
## The mnt_unhold_writers function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes do_mount.
4. function do_mount invokes path_mount.
5. function path_mount invokes do_reconfigure_mnt.
6. function do_reconfigure_mnt invokes change_mount_ro_state.
7. function change_mount_ro_state invokes mnt_make_readonly.
8. function mnt_make_readonly invokes mnt_unhold_writers.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_unhold_writers.

————————————————————————————————These prompts belong to Node: 【strndup_user】at below.—————————————————————————————————— 
# Now I have a kernel internal function strndup_user, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: strndup_user in the linux kenrel source code.
## The strndup_user function is called in the sys_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount invokes __se_sys_mount.
2. function __se_sys_mount invokes __do_sys_mount.
3. function __do_sys_mount invokes copy_mount_string.
4. function copy_mount_string invokes strndup_user.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: strndup_user.

————————————————————————————————These prompts belong to Node: 【attr_flags_to_mnt_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function attr_flags_to_mnt_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: attr_flags_to_mnt_flags in the linux kenrel source code.
## The attr_flags_to_mnt_flags function is called in the sys_fsmount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fsmount invokes __se_sys_fsmount.
2. function __se_sys_fsmount invokes __do_sys_fsmount.
3. function __do_sys_fsmount invokes attr_flags_to_mnt_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: attr_flags_to_mnt_flags.

————————————————————————————————These prompts belong to Node: 【security_move_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_move_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_move_mount in the linux kenrel source code.
## The security_move_mount function is called in the sys_move_mount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_move_mount invokes __se_sys_move_mount.
2. function __se_sys_move_mount invokes __do_sys_move_mount.
3. function __do_sys_move_mount invokes security_move_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_move_mount.

————————————————————————————————These prompts belong to Node: 【security_sb_pivotroot】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_sb_pivotroot, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_sb_pivotroot in the linux kenrel source code.
## The security_sb_pivotroot function is called in the sys_pivot_root system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_pivot_root invokes __se_sys_pivot_root.
2. function __se_sys_pivot_root invokes __do_sys_pivot_root.
3. function __do_sys_pivot_root invokes security_sb_pivotroot.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_sb_pivotroot.

————————————————————————————————These prompts belong to Node: 【recalc_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function recalc_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: recalc_flags in the linux kenrel source code.
## The recalc_flags function is called in the sys_mount_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount_setattr invokes __se_sys_mount_setattr.
2. function __se_sys_mount_setattr invokes __do_sys_mount_setattr.
3. function __do_sys_mount_setattr invokes do_mount_setattr.
4. function do_mount_setattr invokes mount_setattr_prepare.
5. function mount_setattr_prepare invokes recalc_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: recalc_flags.

————————————————————————————————These prompts belong to Node: 【mnt_allow_writers】at below.—————————————————————————————————— 
# Now I have a kernel internal function mnt_allow_writers, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mnt_allow_writers in the linux kenrel source code.
## The mnt_allow_writers function is called in the sys_mount_setattr system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mount_setattr invokes __se_sys_mount_setattr.
2. function __se_sys_mount_setattr invokes __do_sys_mount_setattr.
3. function __do_sys_mount_setattr invokes do_mount_setattr.
4. function do_mount_setattr invokes mount_setattr_prepare.
5. function mount_setattr_prepare invokes mnt_allow_writers.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mnt_allow_writers.

————————————————————————————————These prompts belong to Node: 【qtype_enforce_flag】at below.—————————————————————————————————— 
# Now I have a kernel internal function qtype_enforce_flag, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: qtype_enforce_flag in the linux kenrel source code.
## The qtype_enforce_flag function is called in the sys_quotactl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_quotactl invokes __se_sys_quotactl.
2. function __se_sys_quotactl invokes __do_sys_quotactl.
3. function __do_sys_quotactl invokes do_quotactl.
4. function do_quotactl invokes quota_quotaon.
5. function quota_quotaon invokes qtype_enforce_flag.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: qtype_enforce_flag.

————————————————————————————————These prompts belong to Node: 【next_peer】at below.—————————————————————————————————— 
# Now I have a kernel internal function next_peer, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: next_peer in the linux kenrel source code.
## The next_peer function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes umount_tree.
7. function umount_tree invokes propagate_umount.
8. function propagate_umount invokes propagation_next.
9. function propagation_next invokes next_peer.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: next_peer.

————————————————————————————————These prompts belong to Node: 【first_slave】at below.—————————————————————————————————— 
# Now I have a kernel internal function first_slave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: first_slave in the linux kenrel source code.
## The first_slave function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes umount_tree.
7. function umount_tree invokes propagate_umount.
8. function propagate_umount invokes propagation_next.
9. function propagation_next invokes first_slave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: first_slave.

————————————————————————————————These prompts belong to Node: 【next_slave】at below.—————————————————————————————————— 
# Now I have a kernel internal function next_slave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: next_slave in the linux kenrel source code.
## The next_slave function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes umount_tree.
7. function umount_tree invokes propagate_umount.
8. function propagate_umount invokes propagation_next.
9. function propagation_next invokes next_slave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: next_slave.

————————————————————————————————These prompts belong to Node: 【last_slave】at below.—————————————————————————————————— 
# Now I have a kernel internal function last_slave, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: last_slave in the linux kenrel source code.
## The last_slave function is called in the sys_umount system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_umount invokes __se_sys_umount.
2. function __se_sys_umount invokes __do_sys_umount.
3. function __do_sys_umount invokes ksys_umount.
4. function ksys_umount invokes path_umount.
5. function path_umount invokes do_umount.
6. function do_umount invokes umount_tree.
7. function umount_tree invokes propagate_umount.
8. function propagate_umount invokes skip_propagation_subtree.
9. function skip_propagation_subtree invokes last_slave.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: last_slave.

————————————————————————————————These prompts belong to Node: 【pipe_empty】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_empty, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_empty in the linux kenrel source code.
## The pipe_empty function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_user.
4. function vmsplice_to_user invokes __splice_from_pipe.
5. function __splice_from_pipe invokes splice_from_pipe_next.
6. function splice_from_pipe_next invokes pipe_empty.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_empty.

————————————————————————————————These prompts belong to Node: 【pipe_occupancy】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_occupancy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_occupancy in the linux kenrel source code.
## The pipe_occupancy function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_pipe.
4. function vmsplice_to_pipe invokes wait_for_space.
5. function wait_for_space invokes pipe_full.
6. function pipe_full invokes pipe_occupancy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_occupancy.

————————————————————————————————These prompts belong to Node: 【warn_unsupported】at below.—————————————————————————————————— 
# Now I have a kernel internal function warn_unsupported, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: warn_unsupported in the linux kenrel source code.
## The warn_unsupported function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes do_splice_from.
6. function do_splice_from invokes warn_unsupported.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: warn_unsupported.

————————————————————————————————These prompts belong to Node: 【iov_iter_bvec】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_bvec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_bvec in the linux kenrel source code.
## The iov_iter_bvec function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes iov_iter_bvec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_bvec.

————————————————————————————————These prompts belong to Node: 【release_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function release_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: release_pages in the linux kenrel source code.
## The release_pages function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes release_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: release_pages.

————————————————————————————————These prompts belong to Node: 【pipe_buf】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_buf, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_buf in the linux kenrel source code.
## The pipe_buf function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes pipe_head_buf.
9. function pipe_head_buf invokes pipe_buf.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_buf.

————————————————————————————————These prompts belong to Node: 【get_current_ioprio】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_current_ioprio, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_current_ioprio in the linux kenrel source code.
## The get_current_ioprio function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes init_sync_kiocb.
9. function init_sync_kiocb invokes get_current_ioprio.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_current_ioprio.

————————————————————————————————These prompts belong to Node: 【__alloc_pages_bulk】at below.—————————————————————————————————— 
# Now I have a kernel internal function __alloc_pages_bulk, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __alloc_pages_bulk in the linux kenrel source code.
## The __alloc_pages_bulk function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes alloc_pages_bulk_array.
9. function alloc_pages_bulk_array invokes __alloc_pages_bulk.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __alloc_pages_bulk.

————————————————————————————————These prompts belong to Node: 【numa_node_id】at below.—————————————————————————————————— 
# Now I have a kernel internal function numa_node_id, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: numa_node_id in the linux kenrel source code.
## The numa_node_id function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_file_to_pipe.
6. function splice_file_to_pipe invokes vfs_splice_read.
7. function vfs_splice_read invokes copy_splice_read.
8. function copy_splice_read invokes alloc_pages_bulk_array.
9. function alloc_pages_bulk_array invokes numa_mem_id.
10. function numa_mem_id invokes numa_node_id.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: numa_node_id.

————————————————————————————————These prompts belong to Node: 【splice_from_pipe_begin】at below.—————————————————————————————————— 
# Now I have a kernel internal function splice_from_pipe_begin, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: splice_from_pipe_begin in the linux kenrel source code.
## The splice_from_pipe_begin function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_user.
4. function vmsplice_to_user invokes __splice_from_pipe.
5. function __splice_from_pipe invokes splice_from_pipe_begin.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: splice_from_pipe_begin.

————————————————————————————————These prompts belong to Node: 【pipe_buf_confirm】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_buf_confirm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_buf_confirm in the linux kenrel source code.
## The pipe_buf_confirm function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_user.
4. function vmsplice_to_user invokes __splice_from_pipe.
5. function __splice_from_pipe invokes splice_from_pipe_feed.
6. function splice_from_pipe_feed invokes pipe_buf_confirm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_buf_confirm.

————————————————————————————————These prompts belong to Node: 【pipe_buf_get】at below.—————————————————————————————————— 
# Now I have a kernel internal function pipe_buf_get, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: pipe_buf_get in the linux kenrel source code.
## The pipe_buf_get function is called in the sys_splice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_splice invokes __se_sys_splice.
2. function __se_sys_splice invokes __do_sys_splice.
3. function __do_sys_splice invokes __do_splice.
4. function __do_splice invokes do_splice.
5. function do_splice invokes splice_pipe_to_pipe.
6. function splice_pipe_to_pipe invokes pipe_buf_get.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: pipe_buf_get.

————————————————————————————————These prompts belong to Node: 【iov_iter_get_pages】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_get_pages, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_get_pages in the linux kenrel source code.
## The iov_iter_get_pages function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_pipe.
4. function vmsplice_to_pipe invokes iter_to_pipe.
5. function iter_to_pipe invokes iov_iter_get_pages.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_get_pages.

————————————————————————————————These prompts belong to Node: 【iov_iter_revert】at below.—————————————————————————————————— 
# Now I have a kernel internal function iov_iter_revert, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: iov_iter_revert in the linux kenrel source code.
## The iov_iter_revert function is called in the sys_vmsplice system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_vmsplice invokes __se_sys_vmsplice.
2. function __se_sys_vmsplice invokes __do_sys_vmsplice.
3. function __do_sys_vmsplice invokes vmsplice_to_pipe.
4. function vmsplice_to_pipe invokes iter_to_pipe.
5. function iter_to_pipe invokes iov_iter_revert.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: iov_iter_revert.

————————————————————————————————These prompts belong to Node: 【mark_inode_dirty_sync】at below.—————————————————————————————————— 
# Now I have a kernel internal function mark_inode_dirty_sync, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mark_inode_dirty_sync in the linux kenrel source code.
## The mark_inode_dirty_sync function is called in the sys_fsync system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fsync invokes __se_sys_fsync.
2. function __se_sys_fsync invokes __do_sys_fsync.
3. function __do_sys_fsync invokes do_fsync.
4. function do_fsync invokes vfs_fsync.
5. function vfs_fsync invokes vfs_fsync_range.
6. function vfs_fsync_range invokes mark_inode_dirty_sync.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mark_inode_dirty_sync.

————————————————————————————————These prompts belong to Node: 【sync_blockdev_nowait】at below.—————————————————————————————————— 
# Now I have a kernel internal function sync_blockdev_nowait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sync_blockdev_nowait in the linux kenrel source code.
## The sync_blockdev_nowait function is called in the sys_syncfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_syncfs invokes __se_sys_syncfs.
2. function __se_sys_syncfs invokes __do_sys_syncfs.
3. function __do_sys_syncfs invokes sync_filesystem.
4. function sync_filesystem invokes sync_blockdev_nowait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sync_blockdev_nowait.

————————————————————————————————These prompts belong to Node: 【errseq_check_and_advance】at below.—————————————————————————————————— 
# Now I have a kernel internal function errseq_check_and_advance, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: errseq_check_and_advance in the linux kenrel source code.
## The errseq_check_and_advance function is called in the sys_syncfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_syncfs invokes __se_sys_syncfs.
2. function __se_sys_syncfs invokes __do_sys_syncfs.
3. function __do_sys_syncfs invokes errseq_check_and_advance.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: errseq_check_and_advance.

————————————————————————————————These prompts belong to Node: 【file_fdatawait_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_fdatawait_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_fdatawait_range in the linux kenrel source code.
## The file_fdatawait_range function is called in the sys_sync_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sync_file_range invokes __se_sys_sync_file_range.
2. function __se_sys_sync_file_range invokes __do_sys_sync_file_range.
3. function __do_sys_sync_file_range invokes ksys_sync_file_range.
4. function ksys_sync_file_range invokes sync_file_range.
5. function sync_file_range invokes file_fdatawait_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_fdatawait_range.

————————————————————————————————These prompts belong to Node: 【__filemap_fdatawrite_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function __filemap_fdatawrite_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __filemap_fdatawrite_range in the linux kenrel source code.
## The __filemap_fdatawrite_range function is called in the sys_sync_file_range system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_sync_file_range invokes __se_sys_sync_file_range.
2. function __se_sys_sync_file_range invokes __do_sys_sync_file_range.
3. function __do_sys_sync_file_range invokes ksys_sync_file_range.
4. function ksys_sync_file_range invokes sync_file_range.
5. function sync_file_range invokes __filemap_fdatawrite_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __filemap_fdatawrite_range.

————————————————————————————————These prompts belong to Node: 【nsec_valid】at below.—————————————————————————————————— 
# Now I have a kernel internal function nsec_valid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: nsec_valid in the linux kenrel source code.
## The nsec_valid function is called in the sys_utimensat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_utimensat invokes __se_sys_utimensat.
2. function __se_sys_utimensat invokes __do_sys_utimensat.
3. function __do_sys_utimensat invokes do_utimes.
4. function do_utimes invokes do_utimes_fd.
5. function do_utimes_fd invokes vfs_utimes.
6. function vfs_utimes invokes nsec_valid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: nsec_valid.

————————————————————————————————These prompts belong to Node: 【prepend_char】at below.—————————————————————————————————— 
# Now I have a kernel internal function prepend_char, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: prepend_char in the linux kenrel source code.
## The prepend_char function is called in the sys_getcwd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_getcwd invokes __se_sys_getcwd.
2. function __se_sys_getcwd invokes __do_sys_getcwd.
3. function __do_sys_getcwd invokes prepend_char.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: prepend_char.

————————————————————————————————These prompts belong to Node: 【current_umask】at below.—————————————————————————————————— 
# Now I have a kernel internal function current_umask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: current_umask in the linux kenrel source code.
## The current_umask function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes mode_strip_umask.
5. function mode_strip_umask invokes current_umask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: current_umask.

————————————————————————————————These prompts belong to Node: 【flags_by_mnt】at below.—————————————————————————————————— 
# Now I have a kernel internal function flags_by_mnt, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flags_by_mnt in the linux kenrel source code.
## The flags_by_mnt function is called in the sys_statfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_statfs invokes __se_sys_statfs.
2. function __se_sys_statfs invokes __do_sys_statfs.
3. function __do_sys_statfs invokes user_statfs.
4. function user_statfs invokes vfs_statfs.
5. function vfs_statfs invokes calculate_f_flags.
6. function calculate_f_flags invokes flags_by_mnt.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flags_by_mnt.

————————————————————————————————These prompts belong to Node: 【flags_by_sb】at below.—————————————————————————————————— 
# Now I have a kernel internal function flags_by_sb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flags_by_sb in the linux kenrel source code.
## The flags_by_sb function is called in the sys_statfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_statfs invokes __se_sys_statfs.
2. function __se_sys_statfs invokes __do_sys_statfs.
3. function __do_sys_statfs invokes user_statfs.
4. function user_statfs invokes vfs_statfs.
5. function vfs_statfs invokes calculate_f_flags.
6. function calculate_f_flags invokes flags_by_sb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flags_by_sb.

————————————————————————————————These prompts belong to Node: 【security_sb_statfs】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_sb_statfs, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_sb_statfs in the linux kenrel source code.
## The security_sb_statfs function is called in the sys_statfs system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_statfs invokes __se_sys_statfs.
2. function __se_sys_statfs invokes __do_sys_statfs.
3. function __do_sys_statfs invokes user_statfs.
4. function user_statfs invokes vfs_statfs.
5. function vfs_statfs invokes statfs_by_dentry.
6. function statfs_by_dentry invokes security_sb_statfs.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_sb_statfs.

————————————————————————————————These prompts belong to Node: 【fscontext_create_fd】at below.—————————————————————————————————— 
# Now I have a kernel internal function fscontext_create_fd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fscontext_create_fd in the linux kenrel source code.
## The fscontext_create_fd function is called in the sys_fsopen system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fsopen invokes __se_sys_fsopen.
2. function __se_sys_fsopen invokes __do_sys_fsopen.
3. function __do_sys_fsopen invokes fscontext_create_fd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fscontext_create_fd.

————————————————————————————————These prompts belong to Node: 【memdup_user_nul】at below.—————————————————————————————————— 
# Now I have a kernel internal function memdup_user_nul, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memdup_user_nul in the linux kenrel source code.
## The memdup_user_nul function is called in the sys_fsconfig system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fsconfig invokes __se_sys_fsconfig.
2. function __se_sys_fsconfig invokes __do_sys_fsconfig.
3. function __do_sys_fsconfig invokes memdup_user_nul.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memdup_user_nul.

————————————————————————————————These prompts belong to Node: 【in_group_p】at below.—————————————————————————————————— 
# Now I have a kernel internal function in_group_p, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: in_group_p in the linux kenrel source code.
## The in_group_p function is called in the sys_mknodat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_mknodat invokes __se_sys_mknodat.
2. function __se_sys_mknodat invokes __do_sys_mknodat.
3. function __do_sys_mknodat invokes do_mknodat.
4. function do_mknodat invokes filename_create.
5. function filename_create invokes filename_parentat.
6. function filename_parentat invokes __filename_parentat.
7. function __filename_parentat invokes path_parentat.
8. function path_parentat invokes link_path_walk.
9. function link_path_walk invokes may_lookup.
10. function may_lookup invokes inode_permission.
11. function inode_permission invokes do_inode_permission.
12. function do_inode_permission invokes generic_permission.
13. function generic_permission invokes acl_permission_check.
14. function acl_permission_check invokes vfsgid_in_group_p.
15. function vfsgid_in_group_p invokes in_group_p.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: in_group_p.

————————————————————————————————These prompts belong to Node: 【initial_idmapping】at below.—————————————————————————————————— 
# Now I have a kernel internal function initial_idmapping, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: initial_idmapping in the linux kenrel source code.
## The initial_idmapping function is called in the sys_fchownat system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_fchownat invokes __se_sys_fchownat.
2. function __se_sys_fchownat invokes __do_sys_fchownat.
3. function __do_sys_fchownat invokes do_fchownat.
4. function do_fchownat invokes chown_common.
5. function chown_common invokes from_vfsuid.
6. function from_vfsuid invokes no_idmapping.
7. function no_idmapping invokes initial_idmapping.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: initial_idmapping.

————————————————————————————————These prompts belong to Node: 【fsnotify_conn_inode】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_conn_inode, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_conn_inode in the linux kenrel source code.
## The fsnotify_conn_inode function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes fsnotify_recalc_mask.
6. function fsnotify_recalc_mask invokes __fsnotify_recalc_mask.
7. function __fsnotify_recalc_mask invokes fsnotify_update_iref.
8. function fsnotify_update_iref invokes fsnotify_conn_inode.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_conn_inode.

————————————————————————————————These prompts belong to Node: 【fsnotify_valid_obj_type】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_valid_obj_type, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_valid_obj_type in the linux kenrel source code.
## The fsnotify_valid_obj_type function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes fsnotify_recalc_mask.
6. function fsnotify_recalc_mask invokes __fsnotify_recalc_mask.
7. function __fsnotify_recalc_mask invokes fsnotify_valid_obj_type.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_valid_obj_type.

————————————————————————————————These prompts belong to Node: 【fsnotify_conn_mount】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_conn_mount, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_conn_mount in the linux kenrel source code.
## The fsnotify_conn_mount function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes fsnotify_recalc_mask.
6. function fsnotify_recalc_mask invokes __fsnotify_recalc_mask.
7. function __fsnotify_recalc_mask invokes fsnotify_conn_mask_p.
8. function fsnotify_conn_mask_p invokes fsnotify_conn_mount.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_conn_mount.

————————————————————————————————These prompts belong to Node: 【fsnotify_conn_sb】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_conn_sb, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_conn_sb in the linux kenrel source code.
## The fsnotify_conn_sb function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes fsnotify_recalc_mask.
6. function fsnotify_recalc_mask invokes __fsnotify_recalc_mask.
7. function __fsnotify_recalc_mask invokes fsnotify_conn_mask_p.
8. function fsnotify_conn_mask_p invokes fsnotify_conn_sb.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_conn_sb.

————————————————————————————————These prompts belong to Node: 【fsnotify_ignored_events】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_ignored_events, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_ignored_events in the linux kenrel source code.
## The fsnotify_ignored_events function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes fsnotify_recalc_mask.
6. function fsnotify_recalc_mask invokes __fsnotify_recalc_mask.
7. function __fsnotify_recalc_mask invokes fsnotify_calc_mask.
8. function fsnotify_calc_mask invokes fsnotify_ignored_events.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_ignored_events.

————————————————————————————————These prompts belong to Node: 【idr_remove】at below.—————————————————————————————————— 
# Now I have a kernel internal function idr_remove, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: idr_remove in the linux kenrel source code.
## The idr_remove function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes inotify_remove_from_idr.
6. function inotify_remove_from_idr invokes idr_remove.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: idr_remove.

————————————————————————————————These prompts belong to Node: 【idr_find】at below.—————————————————————————————————— 
# Now I have a kernel internal function idr_find, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: idr_find in the linux kenrel source code.
## The idr_find function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes inotify_remove_from_idr.
6. function inotify_remove_from_idr invokes inotify_idr_find_locked.
7. function inotify_idr_find_locked invokes idr_find.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: idr_find.

————————————————————————————————These prompts belong to Node: 【get_mem_cgroup_from_mm】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_mem_cgroup_from_mm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_mem_cgroup_from_mm in the linux kenrel source code.
## The get_mem_cgroup_from_mm function is called in the sys_inotify_init system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_init invokes __se_sys_inotify_init.
2. function __se_sys_inotify_init invokes __do_sys_inotify_init.
3. function __do_sys_inotify_init invokes do_inotify_init.
4. function do_inotify_init invokes inotify_new_group.
5. function inotify_new_group invokes get_mem_cgroup_from_mm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_mem_cgroup_from_mm.

————————————————————————————————These prompts belong to Node: 【xa_init_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function xa_init_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: xa_init_flags in the linux kenrel source code.
## The xa_init_flags function is called in the sys_inotify_init system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_init invokes __se_sys_inotify_init.
2. function __se_sys_inotify_init invokes __do_sys_inotify_init.
3. function __do_sys_inotify_init invokes do_inotify_init.
4. function do_inotify_init invokes inotify_new_group.
5. function inotify_new_group invokes idr_init.
6. function idr_init invokes idr_init_base.
7. function idr_init_base invokes xa_init_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: xa_init_flags.

————————————————————————————————These prompts belong to Node: 【memalloc_nofs_restore】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_nofs_restore, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_nofs_restore in the linux kenrel source code.
## The memalloc_nofs_restore function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes fsnotify_group_unlock.
5. function fsnotify_group_unlock invokes memalloc_nofs_restore.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_nofs_restore.

————————————————————————————————These prompts belong to Node: 【inotify_arg_to_mask】at below.—————————————————————————————————— 
# Now I have a kernel internal function inotify_arg_to_mask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inotify_arg_to_mask in the linux kenrel source code.
## The inotify_arg_to_mask function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes inotify_arg_to_mask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inotify_arg_to_mask.

————————————————————————————————These prompts belong to Node: 【inotify_arg_to_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function inotify_arg_to_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: inotify_arg_to_flags in the linux kenrel source code.
## The inotify_arg_to_flags function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_update_existing_watch.
5. function inotify_update_existing_watch invokes inotify_arg_to_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: inotify_arg_to_flags.

————————————————————————————————These prompts belong to Node: 【fsnotify_add_inode_mark_locked】at below.—————————————————————————————————— 
# Now I have a kernel internal function fsnotify_add_inode_mark_locked, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: fsnotify_add_inode_mark_locked in the linux kenrel source code.
## The fsnotify_add_inode_mark_locked function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes fsnotify_add_inode_mark_locked.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: fsnotify_add_inode_mark_locked.

————————————————————————————————These prompts belong to Node: 【idr_preload】at below.—————————————————————————————————— 
# Now I have a kernel internal function idr_preload, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: idr_preload in the linux kenrel source code.
## The idr_preload function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes inotify_add_to_idr.
6. function inotify_add_to_idr invokes idr_preload.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: idr_preload.

————————————————————————————————These prompts belong to Node: 【idr_alloc_cyclic】at below.—————————————————————————————————— 
# Now I have a kernel internal function idr_alloc_cyclic, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: idr_alloc_cyclic in the linux kenrel source code.
## The idr_alloc_cyclic function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes inotify_add_to_idr.
6. function inotify_add_to_idr invokes idr_alloc_cyclic.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: idr_alloc_cyclic.

————————————————————————————————These prompts belong to Node: 【local_lock_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function local_lock_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: local_lock_release in the linux kenrel source code.
## The local_lock_release function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes inotify_new_watch.
5. function inotify_new_watch invokes inotify_add_to_idr.
6. function inotify_add_to_idr invokes idr_preload_end.
7. function idr_preload_end invokes local_lock_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: local_lock_release.

————————————————————————————————These prompts belong to Node: 【memalloc_nofs_save】at below.—————————————————————————————————— 
# Now I have a kernel internal function memalloc_nofs_save, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: memalloc_nofs_save in the linux kenrel source code.
## The memalloc_nofs_save function is called in the sys_inotify_add_watch system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_inotify_add_watch invokes __se_sys_inotify_add_watch.
2. function __se_sys_inotify_add_watch invokes __do_sys_inotify_add_watch.
3. function __do_sys_inotify_add_watch invokes inotify_update_watch.
4. function inotify_update_watch invokes fsnotify_group_lock.
5. function fsnotify_group_lock invokes memalloc_nofs_save.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: memalloc_nofs_save.

————————————————————————————————These prompts belong to Node: 【mutex_destroy】at below.—————————————————————————————————— 
# Now I have a kernel internal function mutex_destroy, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: mutex_destroy in the linux kenrel source code.
## The mutex_destroy function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes ep_free.
6. function ep_free invokes mutex_destroy.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: mutex_destroy.

————————————————————————————————These prompts belong to Node: 【wakeup_source_unregister】at below.—————————————————————————————————— 
# Now I have a kernel internal function wakeup_source_unregister, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wakeup_source_unregister in the linux kenrel source code.
## The wakeup_source_unregister function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes ep_free.
6. function ep_free invokes wakeup_source_unregister.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wakeup_source_unregister.

————————————————————————————————These prompts belong to Node: 【is_file_epoll】at below.—————————————————————————————————— 
# Now I have a kernel internal function is_file_epoll, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: is_file_epoll in the linux kenrel source code.
## The is_file_epoll function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes ep_remove_safe.
6. function ep_remove_safe invokes __ep_remove.
7. function __ep_remove invokes is_file_epoll.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: is_file_epoll.

————————————————————————————————These prompts belong to Node: 【ep_wakeup_source】at below.—————————————————————————————————— 
# Now I have a kernel internal function ep_wakeup_source, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ep_wakeup_source in the linux kenrel source code.
## The ep_wakeup_source function is called in the sys_epoll_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_create invokes __se_sys_epoll_create.
2. function __se_sys_epoll_create invokes __do_sys_epoll_create.
3. function __do_sys_epoll_create invokes do_epoll_create.
4. function do_epoll_create invokes ep_clear_and_put.
5. function ep_clear_and_put invokes ep_remove_safe.
6. function ep_remove_safe invokes __ep_remove.
7. function __ep_remove invokes ep_wakeup_source.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ep_wakeup_source.

————————————————————————————————These prompts belong to Node: 【poll_wait】at below.—————————————————————————————————— 
# Now I have a kernel internal function poll_wait, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: poll_wait in the linux kenrel source code.
## The poll_wait function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_modify.
5. function ep_modify invokes ep_item_poll.
6. function ep_item_poll invokes __ep_eventpoll_poll.
7. function __ep_eventpoll_poll invokes poll_wait.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: poll_wait.

————————————————————————————————These prompts belong to Node: 【__pm_relax】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pm_relax, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pm_relax in the linux kenrel source code.
## The __pm_relax function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_modify.
5. function ep_modify invokes ep_item_poll.
6. function ep_item_poll invokes __ep_eventpoll_poll.
7. function __ep_eventpoll_poll invokes __pm_relax.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pm_relax.

————————————————————————————————These prompts belong to Node: 【__pm_stay_awake】at below.—————————————————————————————————— 
# Now I have a kernel internal function __pm_stay_awake, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __pm_stay_awake in the linux kenrel source code.
## The __pm_stay_awake function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_modify.
5. function ep_modify invokes ep_item_poll.
6. function ep_item_poll invokes __ep_eventpoll_poll.
7. function __ep_eventpoll_poll invokes ep_done_scan.
8. function ep_done_scan invokes ep_pm_stay_awake.
9. function ep_pm_stay_awake invokes __pm_stay_awake.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __pm_stay_awake.

————————————————————————————————These prompts belong to Node: 【file_can_poll】at below.—————————————————————————————————— 
# Now I have a kernel internal function file_can_poll, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: file_can_poll in the linux kenrel source code.
## The file_can_poll function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes file_can_poll.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: file_can_poll.

————————————————————————————————These prompts belong to Node: 【ep_op_has_event】at below.—————————————————————————————————— 
# Now I have a kernel internal function ep_op_has_event, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ep_op_has_event in the linux kenrel source code.
## The ep_op_has_event function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes ep_op_has_event.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ep_op_has_event.

————————————————————————————————These prompts belong to Node: 【ep_has_wakeup_source】at below.—————————————————————————————————— 
# Now I have a kernel internal function ep_has_wakeup_source, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ep_has_wakeup_source in the linux kenrel source code.
## The ep_has_wakeup_source function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_modify.
5. function ep_modify invokes ep_has_wakeup_source.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ep_has_wakeup_source.

————————————————————————————————These prompts belong to Node: 【wakeup_source_register】at below.—————————————————————————————————— 
# Now I have a kernel internal function wakeup_source_register, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wakeup_source_register in the linux kenrel source code.
## The wakeup_source_register function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_modify.
5. function ep_modify invokes ep_create_wakeup_source.
6. function ep_create_wakeup_source invokes wakeup_source_register.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wakeup_source_register.

————————————————————————————————These prompts belong to Node: 【ep_set_ffd】at below.—————————————————————————————————— 
# Now I have a kernel internal function ep_set_ffd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ep_set_ffd in the linux kenrel source code.
## The ep_set_ffd function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes ep_set_ffd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ep_set_ffd.

————————————————————————————————These prompts belong to Node: 【list_file】at below.—————————————————————————————————— 
# Now I have a kernel internal function list_file, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: list_file in the linux kenrel source code.
## The list_file function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes list_file.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: list_file.

————————————————————————————————These prompts belong to Node: 【path_count_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_count_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_count_init in the linux kenrel source code.
## The path_count_init function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes reverse_path_check.
6. function reverse_path_check invokes path_count_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_count_init.

————————————————————————————————These prompts belong to Node: 【path_count_inc】at below.—————————————————————————————————— 
# Now I have a kernel internal function path_count_inc, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: path_count_inc in the linux kenrel source code.
## The path_count_inc function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes reverse_path_check.
6. function reverse_path_check invokes reverse_path_check_proc.
7. function reverse_path_check_proc invokes path_count_inc.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: path_count_inc.

————————————————————————————————These prompts belong to Node: 【ep_cmp_ffd】at below.—————————————————————————————————— 
# Now I have a kernel internal function ep_cmp_ffd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ep_cmp_ffd in the linux kenrel source code.
## The ep_cmp_ffd function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes ep_rbtree_insert.
6. function ep_rbtree_insert invokes ep_cmp_ffd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ep_cmp_ffd.

————————————————————————————————These prompts belong to Node: 【rb_link_node】at below.—————————————————————————————————— 
# Now I have a kernel internal function rb_link_node, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rb_link_node in the linux kenrel source code.
## The rb_link_node function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes ep_rbtree_insert.
6. function ep_rbtree_insert invokes rb_link_node.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rb_link_node.

————————————————————————————————These prompts belong to Node: 【__percpu_counter_compare】at below.—————————————————————————————————— 
# Now I have a kernel internal function __percpu_counter_compare, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __percpu_counter_compare in the linux kenrel source code.
## The __percpu_counter_compare function is called in the sys_epoll_ctl system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_ctl invokes __se_sys_epoll_ctl.
2. function __se_sys_epoll_ctl invokes __do_sys_epoll_ctl.
3. function __do_sys_epoll_ctl invokes do_epoll_ctl.
4. function do_epoll_ctl invokes ep_insert.
5. function ep_insert invokes percpu_counter_compare.
6. function percpu_counter_compare invokes __percpu_counter_compare.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __percpu_counter_compare.

————————————————————————————————These prompts belong to Node: 【napi_busy_loop】at below.—————————————————————————————————— 
# Now I have a kernel internal function napi_busy_loop, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: napi_busy_loop in the linux kenrel source code.
## The napi_busy_loop function is called in the sys_epoll_wait system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_epoll_wait invokes __se_sys_epoll_wait.
2. function __se_sys_epoll_wait invokes __do_sys_epoll_wait.
3. function __do_sys_epoll_wait invokes do_epoll_wait.
4. function do_epoll_wait invokes ep_poll.
5. function ep_poll invokes ep_busy_loop.
6. function ep_busy_loop invokes napi_busy_loop.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: napi_busy_loop.

————————————————————————————————These prompts belong to Node: 【sigdelsetmask】at below.—————————————————————————————————— 
# Now I have a kernel internal function sigdelsetmask, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: sigdelsetmask in the linux kenrel source code.
## The sigdelsetmask function is called in the sys_signalfd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_signalfd invokes __se_sys_signalfd.
2. function __se_sys_signalfd invokes __do_sys_signalfd.
3. function __do_sys_signalfd invokes do_signalfd.
4. function do_signalfd invokes sigdelsetmask.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: sigdelsetmask.

————————————————————————————————These prompts belong to Node: 【signotset】at below.—————————————————————————————————— 
# Now I have a kernel internal function signotset, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: signotset in the linux kenrel source code.
## The signotset function is called in the sys_signalfd system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_signalfd invokes __se_sys_signalfd.
2. function __se_sys_signalfd invokes __do_sys_signalfd.
3. function __do_sys_signalfd invokes do_signalfd.
4. function do_signalfd invokes signotset.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: signotset.

————————————————————————————————These prompts belong to Node: 【__wake_up_locked_key】at below.—————————————————————————————————— 
# Now I have a kernel internal function __wake_up_locked_key, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __wake_up_locked_key in the linux kenrel source code.
## The __wake_up_locked_key function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_poll.
6. function aio_poll invokes iocb_put.
7. function iocb_put invokes aio_complete.
8. function aio_complete invokes eventfd_signal.
9. function eventfd_signal invokes eventfd_signal_mask.
10. function eventfd_signal_mask invokes __wake_up_locked_key.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __wake_up_locked_key.

————————————————————————————————These prompts belong to Node: 【ktime_mono_to_any】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_mono_to_any, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_mono_to_any in the linux kenrel source code.
## The ktime_mono_to_any function is called in the sys_timerfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_create invokes __se_sys_timerfd_create.
2. function __se_sys_timerfd_create invokes __do_sys_timerfd_create.
3. function __do_sys_timerfd_create invokes ktime_mono_to_real.
4. function ktime_mono_to_real invokes ktime_mono_to_any.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_mono_to_any.

————————————————————————————————These prompts belong to Node: 【isalarm】at below.—————————————————————————————————— 
# Now I have a kernel internal function isalarm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: isalarm in the linux kenrel source code.
## The isalarm function is called in the sys_timerfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_create invokes __se_sys_timerfd_create.
2. function __se_sys_timerfd_create invokes __do_sys_timerfd_create.
3. function __do_sys_timerfd_create invokes isalarm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: isalarm.

————————————————————————————————These prompts belong to Node: 【alarm_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_init in the linux kenrel source code.
## The alarm_init function is called in the sys_timerfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_create invokes __se_sys_timerfd_create.
2. function __se_sys_timerfd_create invokes __do_sys_timerfd_create.
3. function __do_sys_timerfd_create invokes alarm_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_init.

————————————————————————————————These prompts belong to Node: 【hrtimer_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_init in the linux kenrel source code.
## The hrtimer_init function is called in the sys_timerfd_create system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_create invokes __se_sys_timerfd_create.
2. function __se_sys_timerfd_create invokes __do_sys_timerfd_create.
3. function __do_sys_timerfd_create invokes hrtimer_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_init.

————————————————————————————————These prompts belong to Node: 【ns_to_timespec】at below.—————————————————————————————————— 
# Now I have a kernel internal function ns_to_timespec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ns_to_timespec in the linux kenrel source code.
## The ns_to_timespec function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes ns_to_timespec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ns_to_timespec.

————————————————————————————————These prompts belong to Node: 【alarm_expires_remaining】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_expires_remaining, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_expires_remaining in the linux kenrel source code.
## The alarm_expires_remaining function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_get_remaining.
5. function timerfd_get_remaining invokes alarm_expires_remaining.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_expires_remaining.

————————————————————————————————These prompts belong to Node: 【__hrtimer_expires_remaining_adjusted】at below.—————————————————————————————————— 
# Now I have a kernel internal function __hrtimer_expires_remaining_adjusted, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __hrtimer_expires_remaining_adjusted in the linux kenrel source code.
## The __hrtimer_expires_remaining_adjusted function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_get_remaining.
5. function timerfd_get_remaining invokes hrtimer_expires_remaining_adjusted.
6. function hrtimer_expires_remaining_adjusted invokes __hrtimer_expires_remaining_adjusted.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __hrtimer_expires_remaining_adjusted.

————————————————————————————————These prompts belong to Node: 【hrtimer_cancel】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_cancel, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_cancel in the linux kenrel source code.
## The hrtimer_cancel function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes hrtimer_cancel.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_cancel.

————————————————————————————————These prompts belong to Node: 【alarm_forward_now】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_forward_now, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_forward_now in the linux kenrel source code.
## The alarm_forward_now function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes alarm_forward_now.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_forward_now.

————————————————————————————————These prompts belong to Node: 【alarm_restart】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_restart, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_restart in the linux kenrel source code.
## The alarm_restart function is called in the sys_timerfd_gettime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_gettime invokes __se_sys_timerfd_gettime.
2. function __se_sys_timerfd_gettime invokes __do_sys_timerfd_gettime.
3. function __do_sys_timerfd_gettime invokes do_timerfd_gettime.
4. function do_timerfd_gettime invokes alarm_restart.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_restart.

————————————————————————————————These prompts belong to Node: 【hrtimer_get_softexpires】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_get_softexpires, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_get_softexpires in the linux kenrel source code.
## The hrtimer_get_softexpires function is called in the sys_timerfd_gettime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_gettime invokes __se_sys_timerfd_gettime.
2. function __se_sys_timerfd_gettime invokes __do_sys_timerfd_gettime.
3. function __do_sys_timerfd_gettime invokes do_timerfd_gettime.
4. function do_timerfd_gettime invokes hrtimer_restart.
5. function hrtimer_restart invokes hrtimer_start_expires.
6. function hrtimer_start_expires invokes hrtimer_get_softexpires.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_get_softexpires.

————————————————————————————————These prompts belong to Node: 【hrtimer_get_expires】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_get_expires, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_get_expires in the linux kenrel source code.
## The hrtimer_get_expires function is called in the sys_timerfd_gettime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_gettime invokes __se_sys_timerfd_gettime.
2. function __se_sys_timerfd_gettime invokes __do_sys_timerfd_gettime.
3. function __do_sys_timerfd_gettime invokes do_timerfd_gettime.
4. function do_timerfd_gettime invokes hrtimer_restart.
5. function hrtimer_restart invokes hrtimer_start_expires.
6. function hrtimer_start_expires invokes hrtimer_get_expires.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_get_expires.

————————————————————————————————These prompts belong to Node: 【ktime_to_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_to_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_to_ns in the linux kenrel source code.
## The ktime_to_ns function is called in the sys_timerfd_gettime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_gettime invokes __se_sys_timerfd_gettime.
2. function __se_sys_timerfd_gettime invokes __do_sys_timerfd_gettime.
3. function __do_sys_timerfd_gettime invokes do_timerfd_gettime.
4. function do_timerfd_gettime invokes hrtimer_restart.
5. function hrtimer_restart invokes hrtimer_start_expires.
6. function hrtimer_start_expires invokes ktime_to_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_to_ns.

————————————————————————————————These prompts belong to Node: 【hrtimer_start_range_ns】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_start_range_ns, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_start_range_ns in the linux kenrel source code.
## The hrtimer_start_range_ns function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_setup.
5. function timerfd_setup invokes hrtimer_start.
6. function hrtimer_start invokes hrtimer_start_range_ns.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_start_range_ns.

————————————————————————————————These prompts belong to Node: 【hrtimer_forward】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_forward, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_forward in the linux kenrel source code.
## The hrtimer_forward function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes hrtimer_forward_now.
5. function hrtimer_forward_now invokes hrtimer_forward.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_forward.

————————————————————————————————These prompts belong to Node: 【get_itimerspec】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_itimerspec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_itimerspec in the linux kenrel source code.
## The get_itimerspec function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes get_itimerspec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_itimerspec.

————————————————————————————————These prompts belong to Node: 【put_itimerspec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_itimerspec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_itimerspec in the linux kenrel source code.
## The put_itimerspec function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes put_itimerspec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_itimerspec.

————————————————————————————————These prompts belong to Node: 【alarm_try_to_cancel】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_try_to_cancel, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_try_to_cancel in the linux kenrel source code.
## The alarm_try_to_cancel function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes alarm_try_to_cancel.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_try_to_cancel.

————————————————————————————————These prompts belong to Node: 【hrtimer_try_to_cancel】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_try_to_cancel, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_try_to_cancel in the linux kenrel source code.
## The hrtimer_try_to_cancel function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes hrtimer_try_to_cancel.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_try_to_cancel.

————————————————————————————————These prompts belong to Node: 【hrtimer_cancel_wait_running】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_cancel_wait_running, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_cancel_wait_running in the linux kenrel source code.
## The hrtimer_cancel_wait_running function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes hrtimer_cancel_wait_running.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_cancel_wait_running.

————————————————————————————————These prompts belong to Node: 【hrtimer_set_expires】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_set_expires, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_set_expires in the linux kenrel source code.
## The hrtimer_set_expires function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_setup.
5. function timerfd_setup invokes hrtimer_set_expires.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_set_expires.

————————————————————————————————These prompts belong to Node: 【alarm_start】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_start, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_start in the linux kenrel source code.
## The alarm_start function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_setup.
5. function timerfd_setup invokes alarm_start.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_start.

————————————————————————————————These prompts belong to Node: 【alarm_start_relative】at below.—————————————————————————————————— 
# Now I have a kernel internal function alarm_start_relative, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: alarm_start_relative in the linux kenrel source code.
## The alarm_start_relative function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_setup.
5. function timerfd_setup invokes alarm_start_relative.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: alarm_start_relative.

————————————————————————————————These prompts belong to Node: 【do_timens_ktime_to_host】at below.—————————————————————————————————— 
# Now I have a kernel internal function do_timens_ktime_to_host, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: do_timens_ktime_to_host in the linux kenrel source code.
## The do_timens_ktime_to_host function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes do_timerfd_settime.
4. function do_timerfd_settime invokes timerfd_setup.
5. function timerfd_setup invokes timens_ktime_to_host.
6. function timens_ktime_to_host invokes do_timens_ktime_to_host.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: do_timens_ktime_to_host.

————————————————————————————————These prompts belong to Node: 【get_old_itimerspec】at below.—————————————————————————————————— 
# Now I have a kernel internal function get_old_itimerspec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: get_old_itimerspec in the linux kenrel source code.
## The get_old_itimerspec function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes get_old_itimerspec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: get_old_itimerspec.

————————————————————————————————These prompts belong to Node: 【put_old_itimerspec】at below.—————————————————————————————————— 
# Now I have a kernel internal function put_old_itimerspec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: put_old_itimerspec in the linux kenrel source code.
## The put_old_itimerspec function is called in the sys_timerfd_settime system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_timerfd_settime invokes __se_sys_timerfd_settime.
2. function __se_sys_timerfd_settime invokes __do_sys_timerfd_settime.
3. function __do_sys_timerfd_settime invokes put_old_itimerspec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: put_old_itimerspec.

————————————————————————————————These prompts belong to Node: 【wait_for_completion】at below.—————————————————————————————————— 
# Now I have a kernel internal function wait_for_completion, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: wait_for_completion in the linux kenrel source code.
## The wait_for_completion function is called in the sys_io_destroy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_destroy invokes __se_sys_io_destroy.
2. function __se_sys_io_destroy invokes __do_sys_io_destroy.
3. function __do_sys_io_destroy invokes wait_for_completion.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: wait_for_completion.

————————————————————————————————These prompts belong to Node: 【vm_munmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function vm_munmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: vm_munmap in the linux kenrel source code.
## The vm_munmap function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes vm_munmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: vm_munmap.

————————————————————————————————These prompts belong to Node: 【percpu_ref_kill_and_confirm】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_kill_and_confirm, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_kill_and_confirm in the linux kenrel source code.
## The percpu_ref_kill_and_confirm function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes kill_ioctx.
4. function kill_ioctx invokes percpu_ref_kill.
5. function percpu_ref_kill invokes percpu_ref_kill_and_confirm.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_kill_and_confirm.

————————————————————————————————These prompts belong to Node: 【__init_swait_queue_head】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_swait_queue_head, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_swait_queue_head in the linux kenrel source code.
## The __init_swait_queue_head function is called in the sys_io_destroy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_destroy invokes __se_sys_io_destroy.
2. function __se_sys_io_destroy invokes __do_sys_io_destroy.
3. function __do_sys_io_destroy invokes init_completion.
4. function init_completion invokes __init_swait_queue_head.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_swait_queue_head.

————————————————————————————————These prompts belong to Node: 【__ref_is_percpu】at below.—————————————————————————————————— 
# Now I have a kernel internal function __ref_is_percpu, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __ref_is_percpu in the linux kenrel source code.
## The __ref_is_percpu function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes percpu_ref_get.
5. function percpu_ref_get invokes percpu_ref_get_many.
6. function percpu_ref_get_many invokes __ref_is_percpu.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __ref_is_percpu.

————————————————————————————————These prompts belong to Node: 【percpu_ref_init】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_init, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_init in the linux kenrel source code.
## The percpu_ref_init function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes percpu_ref_init.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_init.

————————————————————————————————These prompts belong to Node: 【percpu_ref_exit】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_ref_exit, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_ref_exit in the linux kenrel source code.
## The percpu_ref_exit function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes percpu_ref_exit.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_ref_exit.

————————————————————————————————These prompts belong to Node: 【find_or_create_page】at below.—————————————————————————————————— 
# Now I have a kernel internal function find_or_create_page, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: find_or_create_page in the linux kenrel source code.
## The find_or_create_page function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes find_or_create_page.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: find_or_create_page.

————————————————————————————————These prompts belong to Node: 【folio_flags】at below.—————————————————————————————————— 
# Now I have a kernel internal function folio_flags, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: folio_flags in the linux kenrel source code.
## The folio_flags function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes folio_flags.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: folio_flags.

————————————————————————————————These prompts belong to Node: 【do_mmap】at below.—————————————————————————————————— 
# Now I have a kernel internal function do_mmap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: do_mmap in the linux kenrel source code.
## The do_mmap function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes do_mmap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: do_mmap.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_released】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_released, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_released in the linux kenrel source code.
## The __mmap_lock_trace_released function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes mmap_write_unlock.
6. function mmap_write_unlock invokes __mmap_lock_trace_released.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_released.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_start_locking】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_start_locking, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_start_locking in the linux kenrel source code.
## The __mmap_lock_trace_start_locking function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes mmap_write_lock_killable.
6. function mmap_write_lock_killable invokes __mmap_lock_trace_start_locking.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_start_locking.

————————————————————————————————These prompts belong to Node: 【__mmap_lock_trace_acquire_returned】at below.—————————————————————————————————— 
# Now I have a kernel internal function __mmap_lock_trace_acquire_returned, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __mmap_lock_trace_acquire_returned in the linux kenrel source code.
## The __mmap_lock_trace_acquire_returned function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes aio_setup_ring.
5. function aio_setup_ring invokes mmap_write_lock_killable.
6. function mmap_write_lock_killable invokes __mmap_lock_trace_acquire_returned.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __mmap_lock_trace_acquire_returned.

————————————————————————————————These prompts belong to Node: 【__init_work】at below.—————————————————————————————————— 
# Now I have a kernel internal function __init_work, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __init_work in the linux kenrel source code.
## The __init_work function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_poll.
6. function aio_poll invokes __init_work.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __init_work.

————————————————————————————————These prompts belong to Node: 【__bitmap_weight】at below.—————————————————————————————————— 
# Now I have a kernel internal function __bitmap_weight, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __bitmap_weight in the linux kenrel source code.
## The __bitmap_weight function is called in the sys_io_setup system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_setup invokes __se_sys_io_setup.
2. function __se_sys_io_setup invokes __do_sys_io_setup.
3. function __do_sys_io_setup invokes ioctx_alloc.
4. function ioctx_alloc invokes cpumask_weight.
5. function cpumask_weight invokes __bitmap_weight.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __bitmap_weight.

————————————————————————————————These prompts belong to Node: 【rcu_read_lock_held】at below.—————————————————————————————————— 
# Now I have a kernel internal function rcu_read_lock_held, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: rcu_read_lock_held in the linux kenrel source code.
## The rcu_read_lock_held function is called in the sys_io_destroy system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_destroy invokes __se_sys_io_destroy.
2. function __se_sys_io_destroy invokes __do_sys_io_destroy.
3. function __do_sys_io_destroy invokes lookup_ioctx.
4. function lookup_ioctx invokes percpu_ref_tryget_live.
5. function percpu_ref_tryget_live invokes percpu_ref_tryget_live_rcu.
6. function percpu_ref_tryget_live_rcu invokes rcu_read_lock_held.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: rcu_read_lock_held.

————————————————————————————————These prompts belong to Node: 【init_waitqueue_func_entry】at below.—————————————————————————————————— 
# Now I have a kernel internal function init_waitqueue_func_entry, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: init_waitqueue_func_entry in the linux kenrel source code.
## The init_waitqueue_func_entry function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_poll.
6. function aio_poll invokes init_waitqueue_func_entry.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: init_waitqueue_func_entry.

————————————————————————————————These prompts belong to Node: 【aio_rw_done】at below.—————————————————————————————————— 
# Now I have a kernel internal function aio_rw_done, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: aio_rw_done in the linux kenrel source code.
## The aio_rw_done function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_read.
6. function aio_read invokes aio_rw_done.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: aio_rw_done.

————————————————————————————————These prompts belong to Node: 【percpu_rwsem_release】at below.—————————————————————————————————— 
# Now I have a kernel internal function percpu_rwsem_release, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: percpu_rwsem_release in the linux kenrel source code.
## The percpu_rwsem_release function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_write.
6. function aio_write invokes kiocb_start_write.
7. function kiocb_start_write invokes percpu_rwsem_release.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: percpu_rwsem_release.

————————————————————————————————These prompts belong to Node: 【import_single_range】at below.—————————————————————————————————— 
# Now I have a kernel internal function import_single_range, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: import_single_range in the linux kenrel source code.
## The import_single_range function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_read.
6. function aio_read invokes aio_setup_rw.
7. function aio_setup_rw invokes import_single_range.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: import_single_range.

————————————————————————————————These prompts belong to Node: 【__import_iovec】at below.—————————————————————————————————— 
# Now I have a kernel internal function __import_iovec, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: __import_iovec in the linux kenrel source code.
## The __import_iovec function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_read.
6. function aio_read invokes aio_setup_rw.
7. function aio_setup_rw invokes __import_iovec.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: __import_iovec.

————————————————————————————————These prompts belong to Node: 【ioprio_check_cap】at below.—————————————————————————————————— 
# Now I have a kernel internal function ioprio_check_cap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ioprio_check_cap in the linux kenrel source code.
## The ioprio_check_cap function is called in the sys_io_submit system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_submit invokes __se_sys_io_submit.
2. function __se_sys_io_submit invokes __do_sys_io_submit.
3. function __do_sys_io_submit invokes io_submit_one.
4. function io_submit_one invokes __io_submit_one.
5. function __io_submit_one invokes aio_read.
6. function aio_read invokes aio_prep_rw.
7. function aio_prep_rw invokes ioprio_check_cap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ioprio_check_cap.

————————————————————————————————These prompts belong to Node: 【hrtimer_sleeper_start_expires】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_sleeper_start_expires, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_sleeper_start_expires in the linux kenrel source code.
## The hrtimer_sleeper_start_expires function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes hrtimer_sleeper_start_expires.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_sleeper_start_expires.

————————————————————————————————These prompts belong to Node: 【destroy_hrtimer_on_stack】at below.—————————————————————————————————— 
# Now I have a kernel internal function destroy_hrtimer_on_stack, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: destroy_hrtimer_on_stack in the linux kenrel source code.
## The destroy_hrtimer_on_stack function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes destroy_hrtimer_on_stack.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: destroy_hrtimer_on_stack.

————————————————————————————————These prompts belong to Node: 【ns_to_ktime】at below.—————————————————————————————————— 
# Now I have a kernel internal function ns_to_ktime, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ns_to_ktime in the linux kenrel source code.
## The ns_to_ktime function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes hrtimer_set_expires_range_ns.
6. function hrtimer_set_expires_range_ns invokes ns_to_ktime.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ns_to_ktime.

————————————————————————————————These prompts belong to Node: 【ktime_add_safe】at below.—————————————————————————————————— 
# Now I have a kernel internal function ktime_add_safe, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: ktime_add_safe in the linux kenrel source code.
## The ktime_add_safe function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes hrtimer_set_expires_range_ns.
6. function hrtimer_set_expires_range_ns invokes ktime_add_safe.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: ktime_add_safe.

————————————————————————————————These prompts belong to Node: 【hrtimer_init_sleeper】at below.—————————————————————————————————— 
# Now I have a kernel internal function hrtimer_init_sleeper, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: hrtimer_init_sleeper in the linux kenrel source code.
## The hrtimer_init_sleeper function is called in the sys_io_getevents system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_io_getevents invokes __se_sys_io_getevents.
2. function __se_sys_io_getevents invokes __do_sys_io_getevents.
3. function __do_sys_io_getevents invokes do_io_getevents.
4. function do_io_getevents invokes read_events.
5. function read_events invokes hrtimer_init_sleeper_on_stack.
6. function hrtimer_init_sleeper_on_stack invokes hrtimer_init_sleeper.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: hrtimer_init_sleeper.

————————————————————————————————These prompts belong to Node: 【locks_inode_context】at below.—————————————————————————————————— 
# Now I have a kernel internal function locks_inode_context, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: locks_inode_context in the linux kenrel source code.
## The locks_inode_context function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes locks_get_lock_context.
8. function locks_get_lock_context invokes locks_inode_context.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: locks_inode_context.

————————————————————————————————These prompts belong to Node: 【locks_copy_conflock】at below.—————————————————————————————————— 
# Now I have a kernel internal function locks_copy_conflock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: locks_copy_conflock in the linux kenrel source code.
## The locks_copy_conflock function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes locks_copy_conflock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: locks_copy_conflock.

————————————————————————————————These prompts belong to Node: 【posix_same_owner】at below.—————————————————————————————————— 
# Now I have a kernel internal function posix_same_owner, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: posix_same_owner in the linux kenrel source code.
## The posix_same_owner function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes posix_locks_conflict.
8. function posix_locks_conflict invokes posix_same_owner.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: posix_same_owner.

————————————————————————————————These prompts belong to Node: 【posix_owner_key】at below.—————————————————————————————————— 
# Now I have a kernel internal function posix_owner_key, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: posix_owner_key in the linux kenrel source code.
## The posix_owner_key function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes posix_locks_deadlock.
8. function posix_locks_deadlock invokes what_owner_is_waiting_for.
9. function what_owner_is_waiting_for invokes posix_owner_key.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: posix_owner_key.

————————————————————————————————These prompts belong to Node: 【locks_overlap】at below.—————————————————————————————————— 
# Now I have a kernel internal function locks_overlap, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: locks_overlap in the linux kenrel source code.
## The locks_overlap function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes posix_locks_conflict.
8. function posix_locks_conflict invokes locks_overlap.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: locks_overlap.

————————————————————————————————These prompts belong to Node: 【locks_conflict】at below.—————————————————————————————————— 
# Now I have a kernel internal function locks_conflict, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: locks_conflict in the linux kenrel source code.
## The locks_conflict function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes locks_lock_file_wait.
4. function locks_lock_file_wait invokes locks_lock_inode_wait.
5. function locks_lock_inode_wait invokes posix_lock_inode_wait.
6. function posix_lock_inode_wait invokes posix_lock_inode.
7. function posix_lock_inode invokes posix_locks_conflict.
8. function posix_locks_conflict invokes locks_conflict.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: locks_conflict.

————————————————————————————————These prompts belong to Node: 【security_file_lock】at below.—————————————————————————————————— 
# Now I have a kernel internal function security_file_lock, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: security_file_lock in the linux kenrel source code.
## The security_file_lock function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes security_file_lock.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: security_file_lock.

————————————————————————————————These prompts belong to Node: 【flock_translate_cmd】at below.—————————————————————————————————— 
# Now I have a kernel internal function flock_translate_cmd, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: flock_translate_cmd in the linux kenrel source code.
## The flock_translate_cmd function is called in the sys_flock system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_flock invokes __se_sys_flock.
2. function __se_sys_flock invokes __do_sys_flock.
3. function __do_sys_flock invokes flock_translate_cmd.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: flock_translate_cmd.

————————————————————————————————These prompts belong to Node: 【exportfs_encode_ino64_fid】at below.—————————————————————————————————— 
# Now I have a kernel internal function exportfs_encode_ino64_fid, the kernel internal function needs to be invoked from the user mode through the corresponding system call function.
## Targeted invocation of kernel internal function: exportfs_encode_ino64_fid in the linux kenrel source code.
## The exportfs_encode_ino64_fid function is called in the sys_name_to_handle_at system call function in linux kernel.
## Detailed linux kernel internal function invocation chain is shown at below.
1. function sys_name_to_handle_at invokes __se_sys_name_to_handle_at.
2. function __se_sys_name_to_handle_at invokes __do_sys_name_to_handle_at.
3. function __do_sys_name_to_handle_at invokes do_sys_name_to_handle.
4. function do_sys_name_to_handle invokes exportfs_encode_fh.
5. function exportfs_encode_fh invokes exportfs_encode_inode_fh.
6. function exportfs_encode_inode_fh invokes exportfs_encode_ino64_fid.
## Based on the show of the kernel internal function chain. please reason step by step. Don't develop kernel module to generate code. Please generate the complete executable C language source code to call the given kernel internal function: exportfs_encode_ino64_fid.
